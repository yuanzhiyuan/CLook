{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","js/bam.js","js/bigwig.js","js/bin.js","js/color.js","js/das.js","js/encode.js","js/fetchworker.js","js/lh3utils.js","js/sha1.js","js/spans.js","js/utils.js","node_modules/browserify/node_modules/process/browser.js","node_modules/es6-promise/dist/es6-promise.js","node_modules/jszlib/js/inflate.js"],"names":[],"mappingshpklneA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC3FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACvfile":"worker-all.js","sourceRoot":"/source/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */\n\n// \n// Dalliance Genome Explorer\n// (c) Thomas Down 2006-2011\n//\n// bam.js: indexed binary alignments\n//\n\n\"use strict\";\n\nif (typeof(require) !== 'undefined') {\n    var spans = require('./spans');\n    var Range = spans.Range;\n    var union = spans.union;\n    var intersection = spans.intersection;\n\n    var bin = require('./bin');\n    var readInt = bin.readInt;\n    var readShort = bin.readShort;\n    var readByte = bin.readByte;\n    var readInt64 = bin.readInt64;\n    var readFloat = bin.readFloat;\n\n    var lh3utils = require('./lh3utils');\n    var readVob = lh3utils.readVob;\n    var unbgzf = lh3utils.unbgzf;\n    var reg2bins = lh3utils.reg2bins;\n    var Chunk = lh3utils.Chunk;\n}\n\n\nvar BAM_MAGIC = 0x14d4142;\nvar BAI_MAGIC = 0x1494142;\n\nvar BamFlags = {\n    MULTIPLE_SEGMENTS:       0x1,\n    ALL_SEGMENTS_ALIGN:      0x2,\n    SEGMENT_UNMAPPED:        0x4,\n    NEXT_SEGMENT_UNMAPPED:   0x8,\n    REVERSE_COMPLEMENT:      0x10,\n    NEXT_REVERSE_COMPLEMENT: 0x20,\n    FIRST_SEGMENT:           0x40,\n    LAST_SEGMENT:            0x80,\n    SECONDARY_ALIGNMENT:     0x100,\n    QC_FAIL:                 0x200,\n    DUPLICATE:               0x400,\n    SUPPLEMENTARY:           0x800\n};\n\nfunction BamFile() {\n}\n\n\n// Calculate the length (in bytes) of the BAI ref starting at offset.\n// Returns {nbin, length, minBlockIndex}\nfunction _getBaiRefLength(uncba, offset) {\n    var p = offset;\n    var nbin = readInt(uncba, p); p += 4;\n    for (var b = 0; b < nbin; ++b) {\n        var bin = readInt(uncba, p);\n        var nchnk = readInt(uncba, p+4);\n        p += 8 + (nchnk * 16);\n    }\n    var nintv = readInt(uncba, p); p += 4;\n\n    var minBlockIndex = 1000000000;\n    var q = p;\n    for (var i = 0; i < nintv; ++i) {\n        var v = readVob(uncba, q); q += 8;\n        if (v) {\n            var bi = v.block;\n            if (v.offset > 0)\n                bi += 65536;\n\n            if (bi < minBlockIndex)\n                minBlockIndex = bi;\n            break;\n        }\n    }\n    p += (nintv * 8);\n\n    return {\n        minBlockIndex: minBlockIndex,\n        nbin: nbin,\n        length: p - offset\n    };\n}\n\n\nfunction makeBam(data, bai, indexChunks, callback, attempted) {\n    // Do an initial probe on the BAM file to catch any mixed-content errors.\n    data.slice(0, 10).fetch(function(header) {\n        if (header) {\n            return makeBam2(data, bai, indexChunks, callback, attempted);\n        } else {\n            return callback(null, \"Couldn't access BAM.\");\n        }\n    }, {timeout: 5000});\n}\n\nfunction makeBam2(data, bai, indexChunks, callback, attempted) {\n    var bam = new BamFile();\n    bam.data = data;\n    bam.bai = bai;\n    bam.indexChunks = indexChunks;\n\n    var minBlockIndex = bam.indexChunks ? bam.indexChunks.minBlockIndex : 1000000000;\n\n    // Fills out bam.chrToIndex and bam.indexToChr based on the first few bytes of the BAM.\n    function parseBamHeader(r) {\n        if (!r) {\n            return callback(null, \"Couldn't access BAM\");\n        }\n\n        var unc = unbgzf(r, r.byteLength);\n        var uncba = new Uint8Array(unc);\n\n        var magic = readInt(uncba, 0);\n        if (magic != BAM_MAGIC) {\n            return callback(null, \"Not a BAM file, magic=0x\" + magic.toString(16));\n        }\n        var headLen = readInt(uncba, 4);\n        var header = '';\n        for (var i = 0; i < headLen; ++i) {\n            header += String.fromCharCode(uncba[i + 8]);\n        }\n\n        var nRef = readInt(uncba, headLen + 8);\n        var p = headLen + 12;\n\n        bam.chrToIndex = {};\n        bam.indexToChr = [];\n        for (var i = 0; i < nRef; ++i) {\n            var lName = readInt(uncba, p);\n            var name = '';\n            for (var j = 0; j < lName-1; ++j) {\n                name += String.fromCharCode(uncba[p + 4 + j]);\n            }\n            var lRef = readInt(uncba, p + lName + 4);\n            bam.chrToIndex[name] = i;\n            if (name.indexOf('chr') == 0) {\n                bam.chrToIndex[name.substring(3)] = i;\n            } else {\n                bam.chrToIndex['chr' + name] = i;\n            }\n            bam.indexToChr.push(name);\n\n            p = p + 8 + lName;\n        }\n\n        if (bam.indices) {\n            return callback(bam);\n        }\n    }\n\n    function parseBai(header) {\n        if (!header) {\n            return \"Couldn't access BAI\";\n        }\n\n        var uncba = new Uint8Array(header);\n        var baiMagic = readInt(uncba, 0);\n        if (baiMagic != BAI_MAGIC) {\n            return callback(null, 'Not a BAI file, magic=0x' + baiMagic.toString(16));\n        }\n\n        var nref = readInt(uncba, 4);\n\n        bam.indices = [];\n\n        var p = 8;\n        for (var ref = 0; ref < nref; ++ref) {\n            var blockStart = p;\n            var o = _getBaiRefLength(uncba, blockStart);\n            p += o.length;\n\n            minBlockIndex = Math.min(o.minBlockIndex, minBlockIndex);\n\n            var nbin = o.nbin;\n\n            if (nbin > 0) {\n                bam.indices[ref] = new Uint8Array(header, blockStart, p - blockStart);\n            }\n        }\n\n        return true;\n    }\n\n    if (!bam.indexChunks) {\n        bam.bai.fetch(function(header) {   // Do we really need to fetch the whole thing? :-(\n            var result = parseBai(header);\n            if (result !== true) {\n                if (bam.bai.url && typeof(attempted) === \"undefined\") {\n                    // Already attempted x.bam.bai not there so now trying x.bai\n                    bam.bai.url = bam.data.url.replace(new RegExp('.bam$'), '.bai');\n                    \n                     // True lets us know we are making a second attempt\n                    makeBam2(data, bam.bai, indexChunks, callback, true);\n                }\n                else {\n                    // We've attempted x.bam.bai & x.bai and nothing worked\n                    callback(null, result);\n                }\n            } else {\n              bam.data.slice(0, minBlockIndex).fetch(parseBamHeader);\n            }\n        });   // Timeout on first request to catch Chrome mixed-content error.\n    } else {\n        var chunks = bam.indexChunks.chunks;\n        bam.indices = []\n        for (var i = 0; i < chunks.length; i++) {\n           bam.indices[i] = null;  // To be filled out lazily as needed\n        }\n        bam.data.slice(0, minBlockIndex).fetch(parseBamHeader);\n    }\n}\n\n\n\nBamFile.prototype.blocksForRange = function(refId, min, max) {\n    var index = this.indices[refId];\n    if (!index) {\n        return [];\n    }\n\n    var intBinsL = reg2bins(min, max);\n    var intBins = [];\n    for (var i = 0; i < intBinsL.length; ++i) {\n        intBins[intBinsL[i]] = true;\n    }\n    var leafChunks = [], otherChunks = [];\n\n    var nbin = readInt(index, 0);\n    var p = 4;\n    for (var b = 0; b < nbin; ++b) {\n        var bin = readInt(index, p);\n        var nchnk = readInt(index, p+4);\n//        dlog('bin=' + bin + '; nchnk=' + nchnk);\n        p += 8;\n        if (intBins[bin]) {\n            for (var c = 0; c < nchnk; ++c) {\n                var cs = readVob(index, p);\n                var ce = readVob(index, p + 8);\n                (bin < 4681 ? otherChunks : leafChunks).push(new Chunk(cs, ce));\n                p += 16;\n            }\n        } else {\n            p +=  (nchnk * 16);\n        }\n    }\n    // console.log('leafChunks = ' + miniJSONify(leafChunks));\n    // console.log('otherChunks = ' + miniJSONify(otherChunks));\n\n    var nintv = readInt(index, p);\n    var lowest = null;\n    var minLin = Math.min(min>>14, nintv - 1), maxLin = Math.min(max>>14, nintv - 1);\n    for (var i = minLin; i <= maxLin; ++i) {\n        var lb =  readVob(index, p + 4 + (i * 8));\n        if (!lb) {\n            continue;\n        }\n        if (!lowest || lb.block < lowest.block || lb.offset < lowest.offset) {\n            lowest = lb;\n        }\n    }\n    // console.log('Lowest LB = ' + lowest);\n    \n    var prunedOtherChunks = [];\n    if (lowest != null) {\n        for (var i = 0; i < otherChunks.length; ++i) {\n            var chnk = otherChunks[i];\n            if (chnk.maxv.block >= lowest.block && chnk.maxv.offset >= lowest.offset) {\n                prunedOtherChunks.push(chnk);\n            }\n        }\n    }\n    // console.log('prunedOtherChunks = ' + miniJSONify(prunedOtherChunks));\n    otherChunks = prunedOtherChunks;\n\n    var intChunks = [];\n    for (var i = 0; i < otherChunks.length; ++i) {\n        intChunks.push(otherChunks[i]);\n    }\n    for (var i = 0; i < leafChunks.length; ++i) {\n        intChunks.push(leafChunks[i]);\n    }\n\n    intChunks.sort(function(c0, c1) {\n        var dif = c0.minv.block - c1.minv.block;\n        if (dif != 0) {\n            return dif;\n        } else {\n            return c0.minv.offset - c1.minv.offset;\n        }\n    });\n    var mergedChunks = [];\n    if (intChunks.length > 0) {\n        var cur = intChunks[0];\n        for (var i = 1; i < intChunks.length; ++i) {\n            var nc = intChunks[i];\n            if (nc.minv.block == cur.maxv.block /* && nc.minv.offset == cur.maxv.offset */) { // no point splitting mid-block\n                cur = new Chunk(cur.minv, nc.maxv);\n            } else {\n                mergedChunks.push(cur);\n                cur = nc;\n            }\n        }\n        mergedChunks.push(cur);\n    }\n    // console.log('mergedChunks = ' + miniJSONify(mergedChunks));\n\n    return mergedChunks;\n}\n\nBamFile.prototype.fetch = function(chr, min, max, callback, opts) {\n    var thisB = this;\n    opts = opts || {};\n\n    var chrId = this.chrToIndex[chr];\n    var chunks;\n    if (chrId === undefined) {\n        chunks = [];\n    } else {\n        // Fetch this portion of the BAI if it hasn't been loaded yet.\n        if (this.indices[chrId] === null && this.indexChunks.chunks[chrId]) {\n            var start_stop = this.indexChunks.chunks[chrId];\n            return this.bai.slice(start_stop[0], start_stop[1]).fetch(function(data) {\n                var buffer = new Uint8Array(data);\n                this.indices[chrId] = buffer;\n                return this.fetch(chr, min, max, callback, opts);\n            }.bind(this));\n        }\n\n        chunks = this.blocksForRange(chrId, min, max);\n        if (!chunks) {\n            callback(null, 'Error in index fetch');\n        }\n    }\n    \n    var records = [];\n    var index = 0;\n    var data;\n\n    function tramp() {\n        if (index >= chunks.length) {\n            return callback(records);\n        } else if (!data) {\n            var c = chunks[index];\n            var fetchMin = c.minv.block;\n            var fetchMax = c.maxv.block + (1<<16); // *sigh*\n            // console.log('fetching ' + fetchMin + ':' + fetchMax);\n            thisB.data.slice(fetchMin, fetchMax - fetchMin).fetch(function(r) {\n                data = unbgzf(r, c.maxv.block - c.minv.block + 1);\n                return tramp();\n            });\n        } else {\n            var ba = new Uint8Array(data);\n            var finished = thisB.readBamRecords(ba, chunks[index].minv.offset, records, min, max, chrId, opts);\n            data = null;\n            ++index;\n            if (finished)\n                return callback(records);\n            else\n                return tramp();\n        }\n    }\n    tramp();\n}\n\nvar SEQRET_DECODER = ['=', 'A', 'C', 'x', 'G', 'x', 'x', 'x', 'T', 'x', 'x', 'x', 'x', 'x', 'x', 'N'];\nvar CIGAR_DECODER = ['M', 'I', 'D', 'N', 'S', 'H', 'P', '=', 'X', '?', '?', '?', '?', '?', '?', '?'];\n\nfunction BamRecord() {\n}\n\nBamFile.prototype.readBamRecords = function(ba, offset, sink, min, max, chrId, opts) {\n    while (true) {\n        var blockSize = readInt(ba, offset);\n        var blockEnd = offset + blockSize + 4;\n        if (blockEnd >= ba.length) {\n            return false;\n        }\n\n        var record = new BamRecord();\n\n        var refID = readInt(ba, offset + 4);\n        var pos = readInt(ba, offset + 8);\n        \n        var bmn = readInt(ba, offset + 12);\n        var bin = (bmn & 0xffff0000) >> 16;\n        var mq = (bmn & 0xff00) >> 8;\n        var nl = bmn & 0xff;\n\n        var flag_nc = readInt(ba, offset + 16);\n        var flag = (flag_nc & 0xffff0000) >> 16;\n        var nc = flag_nc & 0xffff;\n    \n        var lseq = readInt(ba, offset + 20);\n        \n        var nextRef  = readInt(ba, offset + 24);\n        var nextPos = readInt(ba, offset + 28);\n        \n        var tlen = readInt(ba, offset + 32);\n    \n        record.segment = this.indexToChr[refID];\n        record.flag = flag;\n        record.pos = pos;\n        record.mq = mq;\n        if (opts.light)\n            record.seqLength = lseq;\n\n        if (!opts.light) {\n            if (nextRef >= 0) {\n                record.nextSegment = this.indexToChr[nextRef];\n                record.nextPos = nextPos;\n            }\n\n            var readName = '';\n            for (var j = 0; j < nl-1; ++j) {\n                readName += String.fromCharCode(ba[offset + 36 + j]);\n            }\n            record.readName = readName;\n        \n            var p = offset + 36 + nl;\n\n            var cigar = '';\n            for (var c = 0; c < nc; ++c) {\n                var cigop = readInt(ba, p);\n                cigar = cigar + (cigop>>4) + CIGAR_DECODER[cigop & 0xf];\n                p += 4;\n            }\n            record.cigar = cigar;\n        \n            var seq = '';\n            var seqBytes = (lseq + 1) >> 1;\n            for (var j = 0; j < seqBytes; ++j) {\n                var sb = ba[p + j];\n                seq += SEQRET_DECODER[(sb & 0xf0) >> 4];\n                if (seq.length < lseq)\n                    seq += SEQRET_DECODER[(sb & 0x0f)];\n            }\n            p += seqBytes;\n            record.seq = seq;\n\n            var qseq = '';\n            for (var j = 0; j < lseq; ++j) {\n                qseq += String.fromCharCode(ba[p + j] + 33);\n            }\n            p += lseq;\n            record.quals = qseq;\n\n            while (p < blockEnd) {\n                var tag = String.fromCharCode(ba[p], ba[p + 1]);\n                var type = String.fromCharCode(ba[p + 2]);\n                var value;\n\n                if (type == 'A') {\n                    value = String.fromCharCode(ba[p + 3]);\n                    p += 4;\n                } else if (type == 'i' || type == 'I') {\n                    value = readInt(ba, p + 3);\n                    p += 7;\n                } else if (type == 'c' || type == 'C') {\n                    value = ba[p + 3];\n                    p += 4;\n                } else if (type == 's' || type == 'S') {\n                    value = readShort(ba, p + 3);\n                    p += 5;\n                } else if (type == 'f') {\n                    value = readFloat(ba, p + 3);\n                    p += 7;\n                } else if (type == 'Z' || type == 'H') {\n                    p += 3;\n                    value = '';\n                    for (;;) {\n                        var cc = ba[p++];\n                        if (cc == 0) {\n                            break;\n                        } else {\n                            value += String.fromCharCode(cc);\n                        }\n                    }\n                } else if (type == 'B') {\n                    var atype = String.fromCharCode(ba[p + 3]);\n                    var alen = readInt(ba, p + 4);\n                    var elen;\n                    var reader;\n                    if (atype == 'i' || atype == 'I' || atype == 'f') {\n                        elen = 4;\n                        if (atype == 'f')\n                            reader = readFloat;\n                        else\n                            reader = readInt;\n                    } else if (atype == 's' || atype == 'S') {\n                        elen = 2;\n                        reader = readShort;\n                    } else if (atype == 'c' || atype == 'C') {\n                        elen = 1;\n                        reader = readByte;\n                    } else {\n                        throw 'Unknown array type ' + atype;\n                    }\n\n                    p += 8;\n                    value = [];\n                    for (var i = 0; i < alen; ++i) {\n                        value.push(reader(ba, p));\n                        p += elen;\n                    }\n                } else {\n                    throw 'Unknown type '+ type;\n                }\n                record[tag] = value;\n            }\n        }\n\n        if (!min || record.pos <= max && record.pos + lseq >= min) {\n            if (chrId === undefined || refID == chrId) {\n                sink.push(record);\n            }\n        }\n        if (record.pos > max) {\n            return true;\n        }\n        offset = blockEnd;\n    }\n\n    // Exits via top of loop.\n};\n\nif (typeof(module) !== 'undefined') {\n    module.exports = {\n        makeBam: makeBam,\n        BAM_MAGIC: BAM_MAGIC,\n        BAI_MAGIC: BAI_MAGIC,\n        BamFlags: BamFlags\n    };\n}\n","/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */\n\n// \n// Dalliance Genome Explorer\n// (c) Thomas Down 2006-2010\n//\n// bigwig.js: indexed binary WIG (and BED) files\n//\n\n\"use strict\";\n\n\nif (typeof(require) !== 'undefined') {\n    var spans = require('./spans');\n    var Range = spans.Range;\n    var union = spans.union;\n    var intersection = spans.intersection;\n\n    var das = require('./das');\n    var DASFeature = das.DASFeature;\n    var DASGroup = das.DASGroup;\n\n    var utils = require('./utils');\n    var shallowCopy = utils.shallowCopy;\n\n    var bin = require('./bin');\n    var readInt = bin.readInt;\n\n    var jszlib = require('jszlib');\n    var jszlib_inflate_buffer = jszlib.inflateBuffer;\n    var arrayCopy = jszlib.arrayCopy;\n}\n\nvar BIG_WIG_MAGIC = 0x888FFC26;\nvar BIG_WIG_MAGIC_BE = 0x26FC8F88;\nvar BIG_BED_MAGIC = 0x8789F2EB;\nvar BIG_BED_MAGIC_BE = 0xEBF28987;\n\n\nvar BIG_WIG_TYPE_GRAPH = 1;\nvar BIG_WIG_TYPE_VSTEP = 2;\nvar BIG_WIG_TYPE_FSTEP = 3;\n  \nvar M1 = 256;\nvar M2 = 256*256;\nvar M3 = 256*256*256;\nvar M4 = 256*256*256*256;\n\nvar BED_COLOR_REGEXP = new RegExp(\"^[0-9]+,[0-9]+,[0-9]+\");\n\nfunction bwg_readOffset(ba, o) {\n    var offset = ba[o] + ba[o+1]*M1 + ba[o+2]*M2 + ba[o+3]*M3 + ba[o+4]*M4;\n    return offset;\n}\n\nfunction BigWig() {\n}\n\nBigWig.prototype.readChromTree = function(callback) {\n    var thisB = this;\n    this.chromsToIDs = {};\n    this.idsToChroms = {};\n    this.maxID = 0;\n\n    var udo = this.unzoomedDataOffset;\n    var eb = (udo - this.chromTreeOffset) & 3;\n    udo = udo + 4 - eb;\n\n    this.data.slice(this.chromTreeOffset, udo - this.chromTreeOffset).fetch(function(bpt) {\n        var ba = new Uint8Array(bpt);\n        var sa = new Int16Array(bpt);\n        var la = new Int32Array(bpt);\n        var bptMagic = la[0];\n        var blockSize = la[1];\n        var keySize = la[2];\n        var valSize = la[3];\n        var itemCount = bwg_readOffset(ba, 16);\n        var rootNodeOffset = 32;\n\n        var bptReadNode = function(offset) {\n            var nodeType = ba[offset];\n            var cnt = sa[(offset/2) + 1];\n            offset += 4;\n            for (var n = 0; n < cnt; ++n) {\n                if (nodeType == 0) {\n                    offset += keySize;\n                    var childOffset = bwg_readOffset(ba, offset);\n                    offset += 8;\n                    childOffset -= thisB.chromTreeOffset;\n                    bptReadNode(childOffset);\n                } else {\n                    var key = '';\n                    for (var ki = 0; ki < keySize; ++ki) {\n                        var charCode = ba[offset++];\n                        if (charCode != 0) {\n                            key += String.fromCharCode(charCode);\n                        }\n                    }\n                    var chromId = (ba[offset+3]<<24) | (ba[offset+2]<<16) | (ba[offset+1]<<8) | (ba[offset+0]);\n                    var chromSize = (ba[offset + 7]<<24) | (ba[offset+6]<<16) | (ba[offset+5]<<8) | (ba[offset+4]);\n                    offset += 8;\n\n                    thisB.chromsToIDs[key] = chromId;\n                    if (key.indexOf('chr') == 0) {\n                        thisB.chromsToIDs[key.substr(3)] = chromId;\n                    }\n                    thisB.idsToChroms[chromId] = key;\n                    thisB.maxID = Math.max(thisB.maxID, chromId);\n                }\n            }\n        };\n        bptReadNode(rootNodeOffset);\n\n        callback(thisB);\n    });\n}\n\nfunction BigWigView(bwg, cirTreeOffset, cirTreeLength, isSummary) {\n    this.bwg = bwg;\n    this.cirTreeOffset = cirTreeOffset;\n    this.cirTreeLength = cirTreeLength;\n    this.isSummary = isSummary;\n}\n\n\n\nBigWigView.prototype.readWigData = function(chrName, min, max, callback) {\n    var chr = this.bwg.chromsToIDs[chrName];\n    if (chr === undefined) {\n        // Not an error because some .bwgs won't have data for all chromosomes.\n        return callback([]);\n    } else {\n        this.readWigDataById(chr, min, max, callback);\n    }\n}\n\nBigWigView.prototype.readWigDataById = function(chr, min, max, callback) {\n    var thisB = this;\n    if (!this.cirHeader) {\n        this.bwg.data.slice(this.cirTreeOffset, 48).fetch(function(result) {\n            thisB.cirHeader = result;\n            var la = new Int32Array(thisB.cirHeader);\n            thisB.cirBlockSize = la[1];\n            thisB.readWigDataById(chr, min, max, callback);\n        });\n        return;\n    }\n\n    var blocksToFetch = [];\n    var outstanding = 0;\n\n    var beforeBWG = Date.now();\n\n    var filter = function(chromId, fmin, fmax, toks) {\n        return ((chr < 0 || chromId == chr) && fmin <= max && fmax >= min);\n    }\n\n    var cirFobRecur = function(offset, level) {\n        if (thisB.bwg.instrument)\n            console.log('level=' + level + '; offset=' + offset + '; time=' + (Date.now()|0));\n\n        outstanding += offset.length;\n\n        if (offset.length == 1 && offset[0] - thisB.cirTreeOffset == 48 && thisB.cachedCirRoot) {\n            cirFobRecur2(thisB.cachedCirRoot, 0, level);\n            --outstanding;\n            if (outstanding == 0) {\n                thisB.fetchFeatures(filter, blocksToFetch, callback);\n            }\n            return;\n        }\n\n        var maxCirBlockSpan = 4 +  (thisB.cirBlockSize * 32);   // Upper bound on size, based on a completely full leaf node.\n        var spans;\n        for (var i = 0; i < offset.length; ++i) {\n            var blockSpan = new Range(offset[i], offset[i] + maxCirBlockSpan);\n            spans = spans ? union(spans, blockSpan) : blockSpan;\n        }\n        \n        var fetchRanges = spans.ranges();\n        for (var r = 0; r < fetchRanges.length; ++r) {\n            var fr = fetchRanges[r];\n            cirFobStartFetch(offset, fr, level);\n        }\n    }\n\n    var cirFobStartFetch = function(offset, fr, level, attempts) {\n        var length = fr.max() - fr.min();\n        thisB.bwg.data.slice(fr.min(), fr.max() - fr.min()).fetch(function(resultBuffer) {\n            for (var i = 0; i < offset.length; ++i) {\n                if (fr.contains(offset[i])) {\n                    cirFobRecur2(resultBuffer, offset[i] - fr.min(), level);\n\n                    if (offset[i] - thisB.cirTreeOffset == 48 && offset[i] - fr.min() == 0)\n                        thisB.cachedCirRoot = resultBuffer;\n\n                    --outstanding;\n                    if (outstanding == 0) {\n                        thisB.fetchFeatures(filter, blocksToFetch, callback);\n                    }\n                }\n            }\n        });\n    }\n\n    var cirFobRecur2 = function(cirBlockData, offset, level) {\n        var ba = new Uint8Array(cirBlockData);\n        var sa = new Int16Array(cirBlockData);\n        var la = new Int32Array(cirBlockData);\n\n        var isLeaf = ba[offset];\n        var cnt = sa[offset/2 + 1];\n        offset += 4;\n\n        if (isLeaf != 0) {\n            for (var i = 0; i < cnt; ++i) {\n                var lo = offset/4;\n                var startChrom = la[lo];\n                var startBase = la[lo + 1];\n                var endChrom = la[lo + 2];\n                var endBase = la[lo + 3];\n                var blockOffset = bwg_readOffset(ba, offset+16);\n                var blockSize = bwg_readOffset(ba, offset+24);\n                if (((chr < 0 || startChrom < chr) || (startChrom == chr && startBase <= max)) &&\n                    ((chr < 0 || endChrom   > chr) || (endChrom == chr && endBase >= min)))\n                {\n                    blocksToFetch.push({offset: blockOffset, size: blockSize});\n                }\n                offset += 32;\n            }\n        } else {\n            var recurOffsets = [];\n            for (var i = 0; i < cnt; ++i) {\n                var lo = offset/4;\n                var startChrom = la[lo];\n                var startBase = la[lo + 1];\n                var endChrom = la[lo + 2];\n                var endBase = la[lo + 3];\n                var blockOffset = bwg_readOffset(ba, offset+16);\n                if ((chr < 0 || startChrom < chr || (startChrom == chr && startBase <= max)) &&\n                    (chr < 0 || endChrom   > chr || (endChrom == chr && endBase >= min)))\n                {\n                    recurOffsets.push(blockOffset);\n                }\n                offset += 24;\n            }\n            if (recurOffsets.length > 0) {\n                cirFobRecur(recurOffsets, level + 1);\n            }\n        }\n    };\n\n    cirFobRecur([thisB.cirTreeOffset + 48], 1);\n}\n\n\nBigWigView.prototype.fetchFeatures = function(filter, blocksToFetch, callback) {\n    var thisB = this;\n\n    blocksToFetch.sort(function(b0, b1) {\n        return (b0.offset|0) - (b1.offset|0);\n    });\n\n    if (blocksToFetch.length == 0) {\n        callback([]);\n    } else {\n        var features = [];\n        var createFeature = function(chr, fmin, fmax, opts) {\n            if (!opts) {\n                opts = {};\n            }\n        \n            var f = new DASFeature();\n            f._chromId = chr;\n            f.segment = thisB.bwg.idsToChroms[chr];\n            f.min = fmin;\n            f.max = fmax;\n            f.type = thisB.bwg.type;\n            \n            for (var k in opts) {\n                f[k] = opts[k];\n            }\n            \n            features.push(f);\n        };\n\n        var tramp = function() {\n            if (blocksToFetch.length == 0) {\n                var afterBWG = Date.now();\n                // dlog('BWG fetch took ' + (afterBWG - beforeBWG) + 'ms');\n                callback(features);\n                return;  // just in case...\n            } else {\n                var block = blocksToFetch[0];\n                if (block.data) {\n                    thisB.parseFeatures(block.data, createFeature, filter);\n                    blocksToFetch.splice(0, 1);\n                    tramp();\n                } else {\n                    var fetchStart = block.offset;\n                    var fetchSize = block.size;\n                    var bi = 1;\n                    while (bi < blocksToFetch.length && blocksToFetch[bi].offset == (fetchStart + fetchSize)) {\n                        fetchSize += blocksToFetch[bi].size;\n                        ++bi;\n                    }\n\n                    thisB.bwg.data.slice(fetchStart, fetchSize).fetch(function(result) {\n                        var offset = 0;\n                        var bi = 0;\n                        while (offset < fetchSize) {\n                            var fb = blocksToFetch[bi];\n                        \n                            var data;\n                            if (thisB.bwg.uncompressBufSize > 0) {\n                                data = jszlib_inflate_buffer(result, offset + 2, fb.size - 2);\n                            } else {\n                                var tmp = new Uint8Array(fb.size);    // FIXME is this really the best we can do?\n                                arrayCopy(new Uint8Array(result, offset, fb.size), 0, tmp, 0, fb.size);\n                                data = tmp.buffer;\n                            }\n                            fb.data = data;\n                            \n                            offset += fb.size;\n                            ++bi;\n                        }\n                        tramp();\n                    });\n                }\n            }\n        }\n        tramp();\n    }\n}\n\nBigWigView.prototype.parseFeatures = function(data, createFeature, filter) {\n    var ba = new Uint8Array(data);\n\n    if (this.isSummary) {\n        var sa = new Int16Array(data);\n        var la = new Int32Array(data);\n        var fa = new Float32Array(data);\n\n        var itemCount = data.byteLength/32;\n        for (var i = 0; i < itemCount; ++i) {\n            var chromId =   la[(i*8)];\n            var start =     la[(i*8)+1];\n            var end =       la[(i*8)+2];\n            var validCnt =  la[(i*8)+3];\n            var minVal    = fa[(i*8)+4];\n            var maxVal    = fa[(i*8)+5];\n            var sumData   = fa[(i*8)+6];\n            var sumSqData = fa[(i*8)+7];\n            \n            if (filter(chromId, start + 1, end)) {\n                var summaryOpts = {type: 'bigwig', score: sumData/validCnt, maxScore: maxVal};\n                if (this.bwg.type == 'bigbed') {\n                    summaryOpts.type = 'density';\n                }\n                createFeature(chromId, start + 1, end, summaryOpts);\n            }\n        }\n    } else if (this.bwg.type == 'bigwig') {\n        var sa = new Int16Array(data);\n        var la = new Int32Array(data);\n        var fa = new Float32Array(data);\n\n        var chromId = la[0];\n        var blockStart = la[1];\n        var blockEnd = la[2];\n        var itemStep = la[3];\n        var itemSpan = la[4];\n        var blockType = ba[20];\n        var itemCount = sa[11];\n        \n        if (blockType == BIG_WIG_TYPE_FSTEP) {\n            for (var i = 0; i < itemCount; ++i) {\n                var score = fa[i + 6];\n                var fmin = blockStart + (i*itemStep) + 1, fmax = blockStart + (i*itemStep) + itemSpan;\n                if (filter(chromId, fmin, fmax))\n                    createFeature(chromId, fmin, fmax, {score: score});\n            }\n        } else if (blockType == BIG_WIG_TYPE_VSTEP) {\n            for (var i = 0; i < itemCount; ++i) {\n                var start = la[(i*2) + 6] + 1;\n                var end = start + itemSpan - 1;\n                var score = fa[(i*2) + 7];\n                if (filter(chromId, start, end))\n                    createFeature(chromId, start, end, {score: score});\n            }\n        } else if (blockType == BIG_WIG_TYPE_GRAPH) {\n            for (var i = 0; i < itemCount; ++i) {\n                var start = la[(i*3) + 6] + 1;\n                var end   = la[(i*3) + 7];\n                var score = fa[(i*3) + 8];\n                if (start > end) {\n                    start = end;\n                }\n                if (filter(chromId, start, end))\n                    createFeature(chromId, start, end, {score: score});\n            }\n        } else {\n            console.log('Currently not handling bwgType=' + blockType);\n        }\n    } else if (this.bwg.type == 'bigbed') {\n        var offset = 0;\n        var dfc = this.bwg.definedFieldCount;\n        var schema = this.bwg.schema;\n\n        while (offset < ba.length) {\n            var chromId = (ba[offset+3]<<24) | (ba[offset+2]<<16) | (ba[offset+1]<<8) | (ba[offset+0]);\n            var start = (ba[offset+7]<<24) | (ba[offset+6]<<16) | (ba[offset+5]<<8) | (ba[offset+4]);\n            var end = (ba[offset+11]<<24) | (ba[offset+10]<<16) | (ba[offset+9]<<8) | (ba[offset+8]);\n            offset += 12;\n            var rest = '';\n            while (true) {\n                var ch = ba[offset++];\n                if (ch != 0) {\n                    rest += String.fromCharCode(ch);\n                } else {\n                    break;\n                }\n            }\n\n            var featureOpts = {};\n            \n            var bedColumns;\n            if (rest.length > 0) {\n                bedColumns = rest.split('\\t');\n            } else {\n                bedColumns = [];\n            }\n            if (bedColumns.length > 0 && dfc > 3) {\n                featureOpts.label = bedColumns[0];\n            }\n            if (bedColumns.length > 1 && dfc > 4) {\n                var score = parseInt(bedColumns[1]);\n                if (!isNaN(score))\n                    featureOpts.score = score;\n            }\n            if (bedColumns.length > 2 && dfc > 5) {\n                featureOpts.orientation = bedColumns[2];\n            }\n            if (bedColumns.length > 5 && dfc > 8) {\n                var color = bedColumns[5];\n                if (BED_COLOR_REGEXP.test(color)) {\n                    featureOpts.itemRgb = 'rgb(' + color + ')';\n                }\n            }\n\n            if (bedColumns.length > dfc-3 && schema) {\n                for (var col = dfc - 3; col < bedColumns.length; ++col) {\n                    featureOpts[schema.fields[col+3].name] = bedColumns[col];\n                }\n            }\n\n            if (filter(chromId, start + 1, end, bedColumns)) {\n                if (dfc < 12) {\n                    createFeature(chromId, start + 1, end, featureOpts);\n                } else {\n                    var thickStart = bedColumns[3]|0;\n                    var thickEnd   = bedColumns[4]|0;\n                    var blockCount = bedColumns[6]|0;\n                    var blockSizes = bedColumns[7].split(',');\n                    var blockStarts = bedColumns[8].split(',');\n\n                    if (featureOpts.exonFrames) {\n                        var exonFrames = featureOpts.exonFrames.split(',');\n                        featureOpts.exonFrames = undefined;\n                    }\n                    \n                    featureOpts.type = 'transcript'\n                    var grp = new DASGroup();\n                    for (var k in featureOpts) {\n                        grp[k] = featureOpts[k];\n                    }\n                    grp.id = bedColumns[0];\n                    grp.segment = this.bwg.idsToChroms[chromId];\n                    grp.min = start + 1;\n                    grp.max = end;\n                    grp.notes = [];\n                    featureOpts.groups = [grp];\n\n                    // Moving towards using bigGenePred model, but will\n                    // still support old Dalliance-style BED12+gene-name for the\n                    // foreseeable future.\n                    if (bedColumns.length > 9) {\n                        var geneId = featureOpts.geneName || bedColumns[9];\n                        var geneName = geneId;\n                        if (bedColumns.length > 10) {\n                            geneName = bedColumns[10];\n                        }\n                        if (featureOpts.geneName2)\n                            geneName = featureOpts.geneName2;\n\n                        var gg = shallowCopy(grp);\n                        gg.id = geneId;\n                        gg.label = geneName;\n                        gg.type = 'gene';\n                        featureOpts.groups.push(gg);\n                    }\n\n                    var spanList = [];\n                    for (var b = 0; b < blockCount; ++b) {\n                        var bmin = (blockStarts[b]|0) + start;\n                        var bmax = bmin + (blockSizes[b]|0);\n                        var span = new Range(bmin, bmax);\n                        spanList.push(span);\n                    }\n                    var spans = union(spanList);\n                    \n                    var tsList = spans.ranges();\n                    for (var s = 0; s < tsList.length; ++s) {\n                        var ts = tsList[s];\n                        createFeature(chromId, ts.min() + 1, ts.max(), featureOpts);\n                    }\n\n                    if (thickEnd > thickStart) {\n                        var codingRegion = (featureOpts.orientation == '+') ?\n                            new Range(thickStart, thickEnd + 3) :\n                            new Range(thickStart - 3, thickEnd);\n                            // +/- 3 to account for stop codon\n\n                        var tl = intersection(spans, codingRegion);\n                        if (tl) {\n                            featureOpts.type = 'translation';\n                            var tlList = tl.ranges();\n                            var readingFrame = 0;\n\n                            var tlOffset = 0;\n                            while (tlList[0].min() > tsList[tlOffset].max())\n                                tlOffset++;\n\n                            for (var s = 0; s < tlList.length; ++s) {\n                                // Record reading frame for every exon\n                                var index = s;\n                                if (featureOpts.orientation == '-')\n                                    index = tlList.length - s - 1;\n                                var ts = tlList[index];\n                                featureOpts.readframe = readingFrame;\n                                if (exonFrames) {\n                                    var brf = parseInt(exonFrames[index + tlOffset]);\n                                    if (typeof(brf) === 'number' && brf >= 0 && brf <= 2) {\n                                        featureOpts.readframe = brf;\n                                        featureOpts.readframeExplicit = true;\n                                    }\n                                }\n                                var length = ts.max() - ts.min();\n                                readingFrame = (readingFrame + length) % 3;\n                                createFeature(chromId, ts.min() + 1, ts.max(), featureOpts);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        throw Error(\"Don't know what to do with \" + this.bwg.type);\n    }\n}\n\n//\n// nasty cut/paste, should roll back in!\n//\n\nBigWigView.prototype.getFirstAdjacent = function(chrName, pos, dir, callback) {\n    var chr = this.bwg.chromsToIDs[chrName];\n    if (chr === undefined) {\n        // Not an error because some .bwgs won't have data for all chromosomes.\n        return callback([]);\n    } else {\n        this.getFirstAdjacentById(chr, pos, dir, callback);\n    }\n}\n\nBigWigView.prototype.getFirstAdjacentById = function(chr, pos, dir, callback) {\n    var thisB = this;\n    if (!this.cirHeader) {\n        this.bwg.data.slice(this.cirTreeOffset, 48).fetch(function(result) {\n            thisB.cirHeader = result;\n            var la = new Int32Array(thisB.cirHeader);\n            thisB.cirBlockSize = la[1];\n            thisB.getFirstAdjacentById(chr, pos, dir, callback);\n        });\n        return;\n    }\n\n    var blockToFetch = null;\n    var bestBlockChr = -1;\n    var bestBlockOffset = -1;\n\n    var outstanding = 0;\n\n    var beforeBWG = Date.now();\n\n    var cirFobRecur = function(offset, level) {\n        outstanding += offset.length;\n\n        var maxCirBlockSpan = 4 +  (thisB.cirBlockSize * 32);   // Upper bound on size, based on a completely full leaf node.\n        var spans;\n        for (var i = 0; i < offset.length; ++i) {\n            var blockSpan = new Range(offset[i], offset[i] + maxCirBlockSpan);\n            spans = spans ? union(spans, blockSpan) : blockSpan;\n        }\n        \n        var fetchRanges = spans.ranges();\n        for (var r = 0; r < fetchRanges.length; ++r) {\n            var fr = fetchRanges[r];\n            cirFobStartFetch(offset, fr, level);\n        }\n    }\n\n    var cirFobStartFetch = function(offset, fr, level, attempts) {\n        var length = fr.max() - fr.min();\n        thisB.bwg.data.slice(fr.min(), fr.max() - fr.min()).fetch(function(resultBuffer) {\n            for (var i = 0; i < offset.length; ++i) {\n                if (fr.contains(offset[i])) {\n                    cirFobRecur2(resultBuffer, offset[i] - fr.min(), level);\n                    --outstanding;\n                    if (outstanding == 0) {\n                        if (!blockToFetch) {\n                            if (dir > 0 && (chr != 0 || pos > 0)) {\n                                return thisB.getFirstAdjacentById(0, 0, dir, callback);\n                            } else if (dir < 0 && (chr != thisB.bwg.maxID || pos < 1000000000)) {\n                                return thisB.getFirstAdjacentById(thisB.bwg.maxID, 1000000000, dir, callback);\n                            }\n                            return callback([]);\n                        }\n\n                        thisB.fetchFeatures(function(chrx, fmin, fmax, toks) {\n                            return (dir < 0 && (chrx < chr || fmax < pos)) || (dir > 0 && (chrx > chr || fmin > pos));\n                        }, [blockToFetch], function(features) {\n                            var bestFeature = null;\n                            var bestChr = -1;\n                            var bestPos = -1;\n                            for (var fi = 0; fi < features.length; ++fi) {\n                                var f = features[fi];\n                                var chrx = f._chromId, fmin = f.min, fmax = f.max;\n                                if (bestFeature == null || ((dir < 0) && (chrx > bestChr || fmax > bestPos)) || ((dir > 0) && (chrx < bestChr || fmin < bestPos))) {\n                                    bestFeature = f;\n                                    bestPos = (dir < 0) ? fmax : fmin;\n                                    bestChr = chrx;\n                                }\n                            }\n\n                            if (bestFeature != null) \n                                return callback([bestFeature]);\n                            else\n                                return callback([]);\n                        });\n                    }\n                }\n            }\n        });\n    }\n\n    var cirFobRecur2 = function(cirBlockData, offset, level) {\n        var ba = new Uint8Array(cirBlockData);\n        var sa = new Int16Array(cirBlockData);\n        var la = new Int32Array(cirBlockData);\n\n        var isLeaf = ba[offset];\n        var cnt = sa[offset/2 + 1];\n        offset += 4;\n\n        if (isLeaf != 0) {\n            for (var i = 0; i < cnt; ++i) {\n                var lo = offset/4;\n                var startChrom = la[lo];\n                var startBase = la[lo + 1];\n                var endChrom = la[lo + 2];\n                var endBase = la[lo + 3];\n                var blockOffset = bwg_readOffset(ba, offset+16);\n                var blockSize = bwg_readOffset(ba, offset+24);\n                if ((dir < 0 && ((startChrom < chr || (startChrom == chr && startBase <= pos)))) ||\n                    (dir > 0 && ((endChrom > chr || (endChrom == chr && endBase >= pos)))))\n                {\n                    // console.log('Got an interesting block: startBase=' + startChrom + ':' + startBase + '; endBase=' + endChrom + ':' + endBase + '; offset=' + blockOffset + '; size=' + blockSize);\n                    if (/_random/.exec(thisB.bwg.idsToChroms[startChrom])) {\n                        // dlog('skipping random: ' + thisB.bwg.idsToChroms[startChrom]);\n                    } else if (blockToFetch == null || ((dir < 0) && (endChrom > bestBlockChr || (endChrom == bestBlockChr && endBase > bestBlockOffset)) ||\n                                                 (dir > 0) && (startChrom < bestBlockChr || (startChrom == bestBlockChr && startBase < bestBlockOffset))))\n                    {\n                        //                        dlog('best is: startBase=' + startChrom + ':' + startBase + '; endBase=' + endChrom + ':' + endBase + '; offset=' + blockOffset + '; size=' + blockSize);\n                        blockToFetch = {offset: blockOffset, size: blockSize};\n                        bestBlockOffset = (dir < 0) ? endBase : startBase;\n                        bestBlockChr = (dir < 0) ? endChrom : startChrom;\n                    }\n                }\n                offset += 32;\n            }\n        } else {\n            var bestRecur = -1;\n            var bestPos = -1;\n            var bestChr = -1;\n            for (var i = 0; i < cnt; ++i) {\n                var lo = offset/4;\n                var startChrom = la[lo];\n                var startBase = la[lo + 1];\n                var endChrom = la[lo + 2];\n                var endBase = la[lo + 3];\n                var blockOffset = (la[lo + 4]<<32) | (la[lo + 5]);\n                if ((dir < 0 && ((startChrom < chr || (startChrom == chr && startBase <= pos)) &&\n                                 (endChrom   >= chr))) ||\n                     (dir > 0 && ((endChrom > chr || (endChrom == chr && endBase >= pos)) &&\n                                  (startChrom <= chr))))\n                {\n                    if (bestRecur < 0 || endBase > bestPos) {\n                        bestRecur = blockOffset;\n                        bestPos = (dir < 0) ? endBase : startBase;\n                        bestChr = (dir < 0) ? endChrom : startChrom;\n                    }\n                }\n                offset += 24;\n            }\n            if (bestRecur >= 0) {\n                cirFobRecur([bestRecur], level + 1);\n            }\n        }\n    };\n    \n\n    cirFobRecur([thisB.cirTreeOffset + 48], 1);\n}\n\nBigWig.prototype.readWigData = function(chrName, min, max, callback) {\n    this.getUnzoomedView().readWigData(chrName, min, max, callback);\n}\n\nBigWig.prototype.getUnzoomedView = function() {\n    if (!this.unzoomedView) {\n        var cirLen = 4000;\n        var nzl = this.zoomLevels[0];\n        if (nzl) {\n            cirLen = this.zoomLevels[0].dataOffset - this.unzoomedIndexOffset;\n        }\n        this.unzoomedView = new BigWigView(this, this.unzoomedIndexOffset, cirLen, false);\n    }\n    return this.unzoomedView;\n}\n\nBigWig.prototype.getZoomedView = function(z) {\n    var zh = this.zoomLevels[z];\n    if (!zh.view) {\n        zh.view = new BigWigView(this, zh.indexOffset, /* this.zoomLevels[z + 1].dataOffset - zh.indexOffset */ 4000, true);\n    }\n    return zh.view;\n}\n\nfunction makeBwg(data, callback, name) {\n    var bwg = new BigWig();\n    bwg.data = data;\n    bwg.name = name;\n    bwg.data.slice(0, 512).salted().fetch(function(result) {\n        if (!result) {\n            return callback(null, \"Couldn't fetch file\");\n        }\n\n        var header = result;\n        var ba = new Uint8Array(header);\n        var sa = new Int16Array(header);\n        var la = new Int32Array(header);\n        var magic = ba[0] + (M1 * ba[1]) + (M2 * ba[2]) + (M3 * ba[3]);\n        if (magic == BIG_WIG_MAGIC) {\n            bwg.type = 'bigwig';\n        } else if (magic == BIG_BED_MAGIC) {\n            bwg.type = 'bigbed';\n        } else if (magic == BIG_WIG_MAGIC_BE || magic == BIG_BED_MAGIC_BE) {\n            return callback(null, \"Currently don't support big-endian BBI files\");\n            \n        } else {\n            return callback(null, \"Not a supported format, magic=0x\" + magic.toString(16));\n            \n        }\n\n        bwg.version = sa[2];             // 4\n        bwg.numZoomLevels = sa[3];       // 6\n        bwg.chromTreeOffset = bwg_readOffset(ba, 8);\n        bwg.unzoomedDataOffset = bwg_readOffset(ba, 16);\n        bwg.unzoomedIndexOffset = bwg_readOffset(ba, 24);\n        bwg.fieldCount = sa[16];         // 32\n        bwg.definedFieldCount = sa[17];  // 34\n        bwg.asOffset = bwg_readOffset(ba, 36);\n        bwg.totalSummaryOffset = bwg_readOffset(ba, 44);\n        bwg.uncompressBufSize = la[13];  // 52\n        bwg.extHeaderOffset = bwg_readOffset(ba, 56);\n\n        bwg.zoomLevels = [];\n        for (var zl = 0; zl < bwg.numZoomLevels; ++zl) {\n            var zlReduction = la[zl*6 + 16]\n            var zlData = bwg_readOffset(ba, zl*24 + 72);\n            var zlIndex = bwg_readOffset(ba, zl*24 + 80);\n            bwg.zoomLevels.push({reduction: zlReduction, dataOffset: zlData, indexOffset: zlIndex});\n        }\n\n        bwg.readChromTree(function() {\n            bwg.getAutoSQL(function(as) {\n                bwg.schema = as;\n                return callback(bwg);\n            });\n        });\n    }, {timeout: 5000});    // Potential timeout on first request to catch mixed-content errors on\n                            // Chromium.\n}\n\n\nBigWig.prototype._tsFetch = function(zoom, chr, min, max, callback) {\n    var bwg = this;\n    if (zoom >= this.zoomLevels.length - 1) {\n        if (!this.topLevelReductionCache) {\n            this.getZoomedView(this.zoomLevels.length - 1).readWigDataById(-1, 0, 300000000, function(feats) {\n                bwg.topLevelReductionCache = feats;\n                return bwg._tsFetch(zoom, chr, min, max, callback);\n            });\n        } else {\n            var f = [];\n            var c = this.topLevelReductionCache;\n            for (var fi = 0; fi < c.length; ++fi) {\n                if (c[fi]._chromId == chr) {\n                    f.push(c[fi]);\n                }\n            }\n            return callback(f);\n        }\n    } else {\n        var view;\n        if (zoom < 0) {\n            view = this.getUnzoomedView();\n        } else {\n            view = this.getZoomedView(zoom);\n        }\n        return view.readWigDataById(chr, min, max, callback);\n    }\n}\n\nBigWig.prototype.thresholdSearch = function(chrName, referencePoint, dir, threshold, callback) {\n    dir = (dir<0) ? -1 : 1;\n    var bwg = this;\n    var initialChr = this.chromsToIDs[chrName];\n    var candidates = [{chrOrd: 0, chr: initialChr, zoom: bwg.zoomLevels.length - 4, min: 0, max: 300000000, fromRef: true}]\n    for (var i = 1; i <= this.maxID + 1; ++i) {\n        var chrId = (initialChr + (dir*i)) % (this.maxID + 1);\n        if (chrId < 0) \n            chrId += (this.maxID + 1);\n        candidates.push({chrOrd: i, chr: chrId, zoom: bwg.zoomLevels.length - 1, min: 0, max: 300000000})\n    }\n       \n    function fbThresholdSearchRecur() {\n    \tif (candidates.length == 0) {\n    \t    return callback(null);\n    \t}\n    \tcandidates.sort(function(c1, c2) {\n    \t    var d = c1.zoom - c2.zoom;\n    \t    if (d != 0)\n    \t\t    return d;\n\n            d = c1.chrOrd - c2.chrOrd;\n            if (d != 0)\n                return d;\n    \t    else\n    \t\t    return c1.min - c2.min * dir;\n    \t});\n\n\t    var candidate = candidates.splice(0, 1)[0];\n        bwg._tsFetch(candidate.zoom, candidate.chr, candidate.min, candidate.max, function(feats) {\n            var rp = dir > 0 ? 0 : 300000000;\n            if (candidate.fromRef)\n                rp = referencePoint;\n            \n            for (var fi = 0; fi < feats.length; ++fi) {\n    \t        var f = feats[fi];\n                var score;\n                if (f.maxScore != undefined)\n                    score = f.maxScore;\n                else\n                    score = f.score;\n\n                if (dir > 0) {\n    \t            if (score > threshold) {\n        \t\t        if (candidate.zoom < 0) {\n        \t\t            if (f.min > rp)\n                                return callback(f);\n        \t\t        } else if (f.max > rp) {\n        \t\t            candidates.push({chr: candidate.chr, chrOrd: candidate.chrOrd, zoom: candidate.zoom - 2, min: f.min, max: f.max, fromRef: candidate.fromRef});\n        \t\t        }\n                    }\n                } else {\n                    if (score > threshold) {\n            \t\t    if (candidate.zoom < 0) {\n                \t        if (f.max < rp)\n                \t\t\t    return callback(f);\n                        } else if (f.min < rp) {\n                            candidates.push({chr: candidate.chr, chrOrd: candidate.chrOrd, zoom: candidate.zoom - 2, min: f.min, max: f.max, fromRef: candidate.fromRef});\n                        }\n    \t            }\n                }\n    \t    }\n            fbThresholdSearchRecur();\n        });\n    }\n    \n    fbThresholdSearchRecur();\n}\n\nBigWig.prototype.getAutoSQL = function(callback) {\n    var thisB = this;\n    if (!this.asOffset)\n        return callback(null);\n\n\n    this.data.slice(this.asOffset, 2048).fetch(function(result) {\n        var ba = new Uint8Array(result);\n        var s = '';\n        for (var i = 0; i < ba.length; ++i) {\n            if (ba[i] == 0)\n                break;\n            s += String.fromCharCode(ba[i]);\n        }\n        \n        /* \n         * Quick'n'dirty attempt to parse autoSql format.\n         * See: http://www.linuxjournal.com/files/linuxjournal.com/linuxjournal/articles/059/5949/5949l2.html\n         */\n\n        var header_re = /(\\w+)\\s+(\\w+)\\s+(\"([^\"]+)\")?\\s+\\(\\s*/;\n        var field_re = /([\\w\\[\\]]+)\\s+(\\w+)\\s*;\\s*(\"([^\"]+)\")?\\s*/g;\n\n        var headerMatch = header_re.exec(s);\n        if (headerMatch) {\n            var as = {\n                declType: headerMatch[1],\n                name: headerMatch[2],\n                comment: headerMatch[4],\n\n                fields: []\n            };\n\n            s = s.substring(headerMatch[0]);\n            for (var m = field_re.exec(s); m != null; m = field_re.exec(s)) {\n                as.fields.push({type: m[1],\n                             name: m[2],\n                             comment: m[4]});\n            }\n\n            return callback(as);\n        }\n    });\n}\n\nBigWig.prototype.getExtraIndices = function(callback) {\n    var thisB = this;\n    if (this.version < 4 || this.extHeaderOffset == 0 || this.type != 'bigbed') {\n        return callback(null);\n    } else {\n        this.data.slice(this.extHeaderOffset, 64).fetch(function(result) {\n            if (!result) {\n                return callback(null, \"Couldn't fetch extension header\");\n            }\n\n            var ba = new Uint8Array(result);\n            var sa = new Int16Array(result);\n            var la = new Int32Array(result);\n            \n            var extHeaderSize = sa[0];\n            var extraIndexCount = sa[1];\n            var extraIndexListOffset = bwg_readOffset(ba, 4);\n\n            if (extraIndexCount == 0) {\n                return callback(null);\n            }\n\n            // FIXME 20byte records only make sense for single-field indices.\n            // Right now, these seem to be the only things around, but the format\n            // is actually more general.\n            thisB.data.slice(extraIndexListOffset, extraIndexCount * 20).fetch(function(eil) {\n                if (!eil) {\n                    return callback(null, \"Couldn't fetch index info\");\n                }\n\n                var ba = new Uint8Array(eil);\n                var sa = new Int16Array(eil);\n                var la = new Int32Array(eil);\n\n                var indices = [];\n                for (var ii = 0; ii < extraIndexCount; ++ii) {\n                    var eiType = sa[ii*10];\n                    var eiFieldCount = sa[ii*10 + 1];\n                    var eiOffset = bwg_readOffset(ba, ii*20 + 4);\n                    var eiField = sa[ii*10 + 8]\n                    var index = new BBIExtraIndex(thisB, eiType, eiFieldCount, eiOffset, eiField);\n                    indices.push(index);\n                }\n                callback(indices);\n            });\n        });\n    }\n}\n\nfunction BBIExtraIndex(bbi, type, fieldCount, offset, field) {\n    this.bbi = bbi;\n    this.type = type;\n    this.fieldCount = fieldCount;\n    this.offset = offset;\n    this.field = field;\n}\n\nBBIExtraIndex.prototype.lookup = function(name, callback) {\n    var thisB = this;\n\n    this.bbi.data.slice(this.offset, 32).fetch(function(bpt) {\n        var ba = new Uint8Array(bpt);\n        var sa = new Int16Array(bpt);\n        var la = new Int32Array(bpt);\n        var bptMagic = la[0];\n        var blockSize = la[1];\n        var keySize = la[2];\n        var valSize = la[3];\n        var itemCount = bwg_readOffset(ba, 16);\n        var rootNodeOffset = 32;\n\n        function bptReadNode(nodeOffset) {\n            thisB.bbi.data.slice(nodeOffset, 4 + (blockSize * (keySize + valSize))).fetch(function(node) {\n                var ba = new Uint8Array(node);\n                var sa = new Uint16Array(node);\n                var la = new Uint32Array(node);\n\n                var nodeType = ba[0];\n                var cnt = sa[1];\n\n                var offset = 4;\n                if (nodeType == 0) {\n                    var lastChildOffset = null;\n                    for (var n = 0; n < cnt; ++n) {\n                        var key = '';\n                        for (var ki = 0; ki < keySize; ++ki) {\n                            var charCode = ba[offset++];\n                            if (charCode != 0) {\n                                key += String.fromCharCode(charCode);\n                            }\n                        }\n\n                        var childOffset = bwg_readOffset(ba, offset);\n                        offset += 8;\n                        \n                        if (name.localeCompare(key) < 0 && lastChildOffset) {\n                            bptReadNode(lastChildOffset);\n                            return;\n                        }\n                        lastChildOffset = childOffset;\n                    }\n                    bptReadNode(lastChildOffset);\n                } else {\n                    for (var n = 0; n < cnt; ++n) {\n                        var key = '';\n                        for (var ki = 0; ki < keySize; ++ki) {\n                            var charCode = ba[offset++];\n                            if (charCode != 0) {\n                                key += String.fromCharCode(charCode);\n                            }\n                        }\n                        \n                        // Specific for EI case.\n                        if (key == name) {\n                            var start = bwg_readOffset(ba, offset);\n                            var length = readInt(ba, offset + 8);\n\n                            return thisB.bbi.getUnzoomedView().fetchFeatures(\n                                function(chr, min, max, toks) {\n                                    if (toks && toks.length > thisB.field - 3)\n                                        return toks[thisB.field - 3] == name;\n                                }, \n                                [{offset: start, size: length}], \n                                callback);\n                        }\n                        offset += valSize;\n                    }\n                    return callback([]);\n                }\n            });\n        }\n\n        bptReadNode(thisB.offset + rootNodeOffset);\n    });\n}\n\nif (typeof(module) !== 'undefined') {\n    module.exports = {\n        makeBwg: makeBwg,\n        BIG_BED_MAGIC: BIG_BED_MAGIC,\n        BIG_WIG_MAGIC: BIG_WIG_MAGIC\n    }\n}\n","/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */\n\n// \n// Dalliance Genome Explorer\n// (c) Thomas Down 2006-2011\n//\n// bin.js general binary data support\n//\n\n\"use strict\";\n\nif (typeof(require) !== 'undefined') {\n    var utils = require('./utils');\n    var shallowCopy = utils.shallowCopy;\n\n    var sha1 = require('./sha1');\n    var b64_sha1 = sha1.b64_sha1;\n\n    var Promise = require('es6-promise').Promise;\n}\n\nfunction BlobFetchable(b) {\n    this.blob = b;\n}\n\nBlobFetchable.prototype.slice = function(start, length) {\n    var b;\n\n    if (this.blob.slice) {\n        if (length) {\n            b = this.blob.slice(start, start + length);\n        } else {\n            b = this.blob.slice(start);\n        }\n    } else {\n        if (length) {\n            b = this.blob.webkitSlice(start, start + length);\n        } else {\n            b = this.blob.webkitSlice(start);\n        }\n    }\n    return new BlobFetchable(b);\n}\n\nBlobFetchable.prototype.salted = function() {return this;}\n\nif (typeof(FileReader) !== 'undefined') {\n    // console.log('defining async BlobFetchable.fetch');\n\n    BlobFetchable.prototype.fetch = function(callback) {\n        var reader = new FileReader();\n        reader.onloadend = function(ev) {\n            callback(bstringToBuffer(reader.result));\n        };\n        reader.readAsBinaryString(this.blob);\n    }\n\n} else {\n    // if (console && console.log)\n    //    console.log('defining sync BlobFetchable.fetch');\n\n    BlobFetchable.prototype.fetch = function(callback) {\n        var reader = new FileReaderSync();\n        try {\n            var res = reader.readAsArrayBuffer(this.blob);\n            callback(res);\n        } catch (e) {\n            callback(null, e);\n        }\n    }\n}\n\nfunction URLFetchable(url, start, end, opts) {\n    if (!opts) {\n        if (typeof start === 'object') {\n            opts = start;\n            start = undefined;\n        } else {\n            opts = {};\n        }\n    }\n\n    this.url = url;\n    this.start = start || 0;\n    if (end) {\n        this.end = end;\n    }\n    this.opts = opts;\n}\n\nURLFetchable.prototype.slice = function(s, l) {\n    if (s < 0) {\n        throw 'Bad slice ' + s;\n    }\n\n    var ns = this.start, ne = this.end;\n    if (ns && s) {\n        ns = ns + s;\n    } else {\n        ns = s || ns;\n    }\n    if (l && ns) {\n        ne = ns + l - 1;\n    } else {\n        ne = ne || l - 1;\n    }\n    return new URLFetchable(this.url, ns, ne, this.opts);\n}\n\nvar seed=0;\nvar isSafari = navigator.userAgent.indexOf('Safari') >= 0 && navigator.userAgent.indexOf('Chrome') < 0 ;\n\nURLFetchable.prototype.fetchAsText = function(callback) {\n    var thisB = this;\n\n    this.getURL().then(function(url) {\n        try {\n            var req = new XMLHttpRequest();\n            var length;\n            if ((isSafari || thisB.opts.salt) && url.indexOf('?') < 0) {\n                url = url + '?salt=' + b64_sha1('' + Date.now() + ',' + (++seed));\n            }\n            req.open('GET', url, true);\n            \n            if (thisB.end) {\n                if (thisB.end - thisB.start > 100000000) {\n                    throw 'Monster fetch!';\n                }\n                req.setRequestHeader('Range', 'bytes=' + thisB.start + '-' + thisB.end);\n                length = thisB.end - thisB.start + 1;\n            }\n\n            req.onreadystatechange = function() {\n                if (req.readyState == 4) {\n                    if (req.status == 200 || req.status == 206) {\n                        return callback(req.responseText);\n                    } else {\n                        return callback(null);\n                    }\n                }\n            };\n            if (thisB.opts.credentials) {\n                req.withCredentials = true;\n            }\n            req.send('');\n        } catch (e) {\n            return callback(null);\n        }\n    }).catch(function(err) {\n        console.log(err);\n        return callback(null, err);\n    });\n}\n\nURLFetchable.prototype.salted = function() {\n    var o = shallowCopy(this.opts);\n    o.salt = true;\n    return new URLFetchable(this.url, this.start, this.end, o);\n}\n\nURLFetchable.prototype.getURL = function() {\n    if (this.opts.resolver) {\n        return this.opts.resolver(this.url).then(function (urlOrObj) {\n            if (typeof urlOrObj === 'string') {\n                return urlOrObj;\n            } else {\n                return urlOrObj.url;\n            }\n        });\n    } else {\n        return Promise.resolve(this.url);\n    }\n}\n\nURLFetchable.prototype.fetch = function(callback, opts) {\n    var thisB = this;\n \n    opts = opts || {};\n    var attempt = opts.attempt || 1;\n    var truncatedLength = opts.truncatedLength;\n    if (attempt > 3) {\n        return callback(null);\n    }\n\n    this.getURL().then(function(url) {\n        try {\n            var timeout;\n            if (opts.timeout && !thisB.opts.credentials) {\n                timeout = setTimeout(\n                    function() {\n                        console.log('timing out ' + url);\n                        req.abort();\n                        return callback(null, 'Timeout');\n                    },\n                    opts.timeout\n                );\n            }\n            \n            var req = new XMLHttpRequest();\n            var length;\n            if ((isSafari || thisB.opts.salt) && url.indexOf('?') < 0) {\n                url = url + '?salt=' + b64_sha1('' + Date.now() + ',' + (++seed));\n            }\n            req.open('GET', url, true);\n            req.overrideMimeType('text/plain; charset=x-user-defined');\n            if (thisB.end) {\n                if (thisB.end - thisB.start > 100000000) {\n                    throw 'Monster fetch!';\n                }\n                req.setRequestHeader('Range', 'bytes=' + thisB.start + '-' + thisB.end);\n                length = thisB.end - thisB.start + 1;\n            }\n            req.responseType = 'arraybuffer';\n            req.onreadystatechange = function() {\n                if (req.readyState == 4) {\n                    if (timeout)\n                        clearTimeout(timeout);\n                    if (req.status == 200 || req.status == 206) {\n                        if (req.response) {\n                            var bl = req.response.byteLength;\n                            if (length && length != bl && (!truncatedLength || bl != truncatedLength)) {\n                                return thisB.fetch(callback, {attempt: attempt + 1, truncatedLength: bl});\n                            } else {\n                                return callback(req.response);\n                            }\n                        } else if (req.mozResponseArrayBuffer) {\n                            return callback(req.mozResponseArrayBuffer);\n                        } else {\n                            var r = req.responseText;\n                            if (length && length != r.length && (!truncatedLength || r.length != truncatedLength)) {\n                                return thisB.fetch(callback, {attempt: attempt + 1, truncatedLength: r.length});\n                            } else {\n                                return callback(bstringToBuffer(req.responseText));\n                            }\n                        }\n                    } else {\n                        return thisB.fetch(callback, {attempt: attempt + 1});\n                    }\n                }\n            };\n            if (thisB.opts.credentials) {\n                req.withCredentials = true;\n            }\n            req.send('');\n        } catch (e) {\n            return callback(null);\n        }\n    }).catch(function(err) {\n        console.log(err);\n        return callback(null, err);\n    });\n}\n                       \nfunction bstringToBuffer(result) {\n    if (!result) {\n        return null;\n    }\n\n    var ba = new Uint8Array(result.length);\n    for (var i = 0; i < ba.length; ++i) {\n        ba[i] = result.charCodeAt(i);\n    }\n    return ba.buffer;\n}\n\n// Read from Uint8Array\n\n(function(global) {\n    var convertBuffer = new ArrayBuffer(8);\n    var ba = new Uint8Array(convertBuffer);\n    var fa = new Float32Array(convertBuffer);\n\n\n    global.readFloat = function(buf, offset) {\n        ba[0] = buf[offset];\n        ba[1] = buf[offset+1];\n        ba[2] = buf[offset+2];\n        ba[3] = buf[offset+3];\n        return fa[0];\n    };\n }(this));\n\nfunction readInt64(ba, offset) {\n    return (ba[offset + 7] << 24) | (ba[offset + 6] << 16) | (ba[offset + 5] << 8) | (ba[offset + 4]);\n}\n\nfunction readInt(ba, offset) {\n    return (ba[offset + 3] << 24) | (ba[offset + 2] << 16) | (ba[offset + 1] << 8) | (ba[offset]);\n}\n\nfunction readShort(ba, offset) {\n    return (ba[offset + 1] << 8) | (ba[offset]);\n}\n\nfunction readByte(ba, offset) {\n    return ba[offset];\n}\n\nfunction readIntBE(ba, offset) {\n    return (ba[offset] << 24) | (ba[offset + 1] << 16) | (ba[offset + 2] << 8) | (ba[offset + 3]);\n}\n\n// Exports if we are being used as a module\n\nif (typeof(module) !== 'undefined') {\n    module.exports = {\n        BlobFetchable: BlobFetchable,\n        URLFetchable: URLFetchable,\n\n        readInt: readInt,\n        readIntBE: readIntBE,\n        readInt64: readInt64,\n        readShort: readShort,\n        readByte: readByte,\n        readFloat: this.readFloat\n    }\n}\n","/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */\n\n// \n// Dalliance Genome Explorer\n// (c) Thomas Down 2006-2010\n//\n// color.js\n//\n\n\"use strict\";\n\nfunction DColour(red, green, blue, name) {\n    this.red = red|0;\n    this.green = green|0;\n    this.blue = blue|0;\n    if (name) {\n        this.name = name;\n    }\n}\n\nDColour.prototype.toSvgString = function() {\n    if (!this.name) {\n        this.name = \"rgb(\" + this.red + \",\" + this.green + \",\" + this.blue + \")\";\n    }\n\n    return this.name;\n}\n\nfunction hex2(x) {\n    var y = '00' + x.toString(16);\n    return y.substring(y.length - 2);\n}\n\nDColour.prototype.toHexString = function() {\n    return '#' + hex2(this.red) + hex2(this.green) + hex2(this.blue);\n}\n\nvar palette = {\n    red: new DColour(255, 0, 0, 'red'),\n    green: new DColour(0, 255, 0, 'green'),\n    blue: new DColour(0, 0, 255, 'blue'),\n    yellow: new DColour(255, 255, 0, 'yellow'),\n    white: new DColour(255, 255, 255, 'white'),\n    black: new DColour(0, 0, 0, 'black'),\n    gray: new DColour(180, 180, 180, 'gray'),\n    grey: new DColour(180, 180, 180, 'grey'),\n    lightskyblue: new DColour(135, 206, 250, 'lightskyblue'),\n    lightsalmon: new DColour(255, 160, 122, 'lightsalmon'),\n    hotpink: new DColour(255, 105, 180, 'hotpink')\n};\n\nvar COLOR_RE = new RegExp('^#([0-9A-Fa-f]{2})([0-9A-Fa-f]{2})([0-9A-Fa-f]{2})$');\nvar CSS_COLOR_RE = /rgb\\(([0-9]+),([0-9]+),([0-9]+)\\)/\n\nfunction dasColourForName(name) {\n    var c = palette[name];\n    if (!c) {\n        var match = COLOR_RE.exec(name);\n        if (match) {\n            c = new DColour(('0x' + match[1])|0, ('0x' + match[2])|0, ('0x' + match[3])|0, name);\n            palette[name] = c;\n        } else {\n    \t    match = CSS_COLOR_RE.exec(name);\n    \t    if (match) {\n        \t\tc = new DColour(match[1]|0, match[2]|0, match[3]|0, name);\n        \t\tpalette[name] = c;\n\t       } else {\n\t\t      console.log(\"couldn't handle color: \" + name);\n\t\t      c = palette.black;\n\t\t      palette[name] = c;\n\t       }\n        }\n    }\n    return c;\n}\n\nfunction makeColourSteps(steps, stops, colours) {\n    var dcolours = [];\n    for (var ci = 0; ci < colours.length; ++ci) {\n        dcolours.push(dasColourForName(colours[ci]));\n    }\n\n    var grad = [];\n  STEP_LOOP:\n    for (var si = 0; si < steps; ++si) {\n        var rs = (1.0 * si) / (steps-1);\n        var score = stops[0] + (stops[stops.length -1] - stops[0]) * rs;\n        for (var i = 0; i < stops.length - 1; ++i) {\n            if (score >= stops[i] && score <= stops[i+1]) {\n                var frac = (score - stops[i]) / (stops[i+1] - stops[i]);\n                var ca = dcolours[i];\n                var cb = dcolours[i+1];\n\n                var fill = new DColour(\n                    ((ca.red * (1.0 - frac)) + (cb.red * frac))|0,\n                    ((ca.green * (1.0 - frac)) + (cb.green * frac))|0,\n                    ((ca.blue * (1.0 - frac)) + (cb.blue * frac))|0\n                ).toSvgString();\n                grad.push(fill);\n\n                continue STEP_LOOP;\n            }\n        }\n        throw 'Bad step';\n    }\n\n    return grad;\n}\n\nfunction makeGradient(steps, color1, color2, color3) {\n    if (color3) {\n        return makeColourSteps(steps, [0, 0.5, 1], [color1, color2, color3]);\n    } else {\n        return makeColourSteps(steps, [0, 1], [color1, color2]);\n    }\n}\n\nif (typeof(module) !== 'undefined') {\n    module.exports = {\n        makeColourSteps: makeColourSteps,\n        makeGradient: makeGradient,\n        dasColourForName: dasColourForName\n    };\n}\n","/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */\n\n// \n// Dalliance Genome Explorer\n// (c) Thomas Down 2006-2010\n//\n// das.js: queries and low-level data model.\n//\n\n\"use strict\";\n\nif (typeof(require) !== 'undefined') {\n    var utils = require('./utils');\n    var shallowCopy = utils.shallowCopy;\n    var pusho = utils.pusho;\n\n    var color = require('./color');\n    var makeColourSteps = color.makeColourSteps;\n}\n\nvar dasLibErrorHandler = function(errMsg) {\n    alert(errMsg);\n}\nvar dasLibRequestQueue = new Array();\n\nfunction DASSegment(name, start, end, description) {\n    this.name = name;\n    this.start = start;\n    this.end = end;\n    this.description = description;\n}\nDASSegment.prototype.toString = function() {\n    return this.name + ':' + this.start + '..' + this.end;\n};\nDASSegment.prototype.isBounded = function() {\n    return this.start && this.end;\n}\nDASSegment.prototype.toDASQuery = function() {\n    var q = 'segment=' + this.name;\n    if (this.start && this.end) {\n        q += (':' + this.start + ',' + this.end);\n    }\n    return q;\n}\n\n\nfunction DASSource(a1, a2) {\n    var options;\n    if (typeof a1 == 'string') {\n        this.uri = a1;\n        options = a2 || {};\n    } else {\n        options = a1 || {};\n    }\n    for (var k in options) {\n        this[k] = options[k];\n    }\n\n    if (!this.coords) {\n        this.coords = [];\n    }\n    if (!this.props) {\n        this.props = {};\n    }\n\n    this.dasBaseURI = this.uri;\n    if (this.dasBaseURI && this.dasBaseURI.substr(this.uri.length - 1) != '/') {\n        this.dasBaseURI = this.dasBaseURI + '/';\n    }\n}\n\nDASSource.prototype.getURI = function(uri) {\n    if (this.resolver) {\n        return this.resolver(uri).then(function (urlOrObj) {\n            if (typeof urlOrObj === 'string') {\n                return urlOrObj;\n            } else {\n                return urlOrObj.url;\n            }\n        });\n    } else {\n        return Promise.resolve(uri);\n    }\n}\n\nfunction DASCoords() {\n}\n\nfunction coordsMatch(c1, c2) {\n    return c1.taxon == c2.taxon && c1.auth == c2.auth && c1.version == c2.version;\n}\n\n//\n// DAS 1.6 entry_points command\n//\n\nDASSource.prototype.entryPoints = function(callback) {\n    var dasURI = this.dasBaseURI + 'entry_points';\n    this.doCrossDomainRequest(dasURI, function(responseXML) {\n            if (!responseXML) {\n                return callback([]);\n            }\n\n                var entryPoints = new Array();\n                \n                var segs = responseXML.getElementsByTagName('SEGMENT');\n                for (var i = 0; i < segs.length; ++i) {\n                    var seg = segs[i];\n                    var segId = seg.getAttribute('id');\n                    \n                    var segSize = seg.getAttribute('size');\n                    var segMin, segMax;\n                    if (segSize) {\n                        segMin = 1; segMax = segSize|0;\n                    } else {\n                        segMin = seg.getAttribute('start');\n                        if (segMin) {\n                            segMin |= 0;\n                        }\n                        segMax = seg.getAttribute('stop');\n                        if (segMax) {\n                            segMax |= 0;\n                        }\n                    }\n                    var segDesc = null;\n                    if (seg.firstChild) {\n                        segDesc = seg.firstChild.nodeValue;\n                    }\n                    entryPoints.push(new DASSegment(segId, segMin, segMax, segDesc));\n                }          \n               callback(entryPoints);\n    });         \n}\n\n//\n// DAS 1.6 sequence command\n// Do we need an option to fall back to the dna command?\n//\n\nfunction DASSequence(name, start, end, alpha, seq) {\n    this.name = name;\n    this.start = start;\n    this.end = end;\n    this.alphabet = alpha;\n    this.seq = seq;\n}\n\nDASSource.prototype.sequence = function(segment, callback) {\n    var dasURI = this.dasBaseURI + 'sequence?' + segment.toDASQuery();\n    this.doCrossDomainRequest(dasURI, function(responseXML) {\n        if (!responseXML) {\n            callback([]);\n            return;\n        } else {\n                var seqs = new Array();\n                \n                var segs = responseXML.getElementsByTagName('SEQUENCE');\n                for (var i = 0; i < segs.length; ++i) {\n                    var seg = segs[i];\n                    var segId = seg.getAttribute('id');\n                    var segMin = seg.getAttribute('start');\n                    var segMax = seg.getAttribute('stop');\n                    var segAlpha = 'DNA';\n                    var segSeq = null;\n                    if (seg.firstChild) {\n                        var rawSeq = seg.firstChild.nodeValue;\n                        segSeq = '';\n                        var idx = 0;\n                        while (true) {\n                            var space = rawSeq.indexOf('\\n', idx);\n                            if (space >= 0) {\n                                segSeq += rawSeq.substring(idx, space).toUpperCase();\n                                idx = space + 1;\n                            } else {\n                                segSeq += rawSeq.substring(idx).toUpperCase();\n                                break;\n                            }\n                        }\n                    }\n                    seqs.push(new DASSequence(segId, segMin, segMax, segAlpha, segSeq));\n                }\n                \n                callback(seqs);\n        }\n    });\n}\n\n//\n// DAS 1.6 features command\n//\n\nfunction DASFeature() {\n}\n\nfunction DASGroup(id) {\n    if (id)\n        this.id = id;\n}\n\nfunction DASLink(desc, uri) {\n    this.desc = desc;\n    this.uri = uri;\n}\n\nDASSource.prototype.features = function(segment, options, callback) {\n    options = options || {};\n    var thisB = this;\n\n    var dasURI;\n    if (this.features_uri) {\n        dasURI = this.features_uri;\n    } else {\n        var filters = [];\n\n        if (segment) {\n            filters.push(segment.toDASQuery());\n        } else if (options.group) {\n            var g = options.group;\n            if (typeof g == 'string') {\n                filters.push('group_id=' + g);\n            } else {\n                for (var gi = 0; gi < g.length; ++gi) {\n                    filters.push('group_id=' + g[gi]);\n                }\n            }\n        }\n\n        if (options.adjacent) {\n            var adj = options.adjacent;\n            if (typeof adj == 'string') {\n                adj = [adj];\n            }\n            for (var ai = 0; ai < adj.length; ++ai) {\n                filters.push('adjacent=' + adj[ai]);\n            }\n        }\n\n        if (options.type) {\n            if (typeof options.type == 'string') {\n                filters.push('type=' + options.type);\n            } else {\n                for (var ti = 0; ti < options.type.length; ++ti) {\n                    filters.push('type=' + options.type[ti]);\n                }\n            }\n        }\n        \n        if (options.maxbins) {\n            filters.push('maxbins=' + options.maxbins);\n        }\n        \n        if (filters.length > 0) {\n            dasURI = this.dasBaseURI + 'features?' + filters.join(';');\n        } else {\n            callback([], 'No filters specified');\n        }\n    } \n   \n\n    this.doCrossDomainRequest(dasURI, function(responseXML, req) {\n        if (!responseXML) {\n            var msg;\n            if (req.status == 0) {\n                msg = 'server may not support CORS';\n            } else {\n                msg = 'status=' + req.status;\n            }\n            callback([], 'Failed request: ' + msg);\n            return;\n        }\n/*      if (req) {\n            var caps = req.getResponseHeader('X-DAS-Capabilties');\n            if (caps) {\n                alert(caps);\n            }\n        } */\n\n        var features = new Array();\n        var segmentMap = {};\n\n        var segs = responseXML.getElementsByTagName('SEGMENT');\n        for (var si = 0; si < segs.length; ++si) {\n            var segmentXML = segs[si];\n            var segmentID = segmentXML.getAttribute('id');\n            segmentMap[segmentID] = {\n                min: segmentXML.getAttribute('start'),\n                max: segmentXML.getAttribute('stop')\n            };\n            \n            var featureXMLs = segmentXML.getElementsByTagName('FEATURE');\n            for (var i = 0; i < featureXMLs.length; ++i) {\n                var feature = featureXMLs[i];\n                var dasFeature = new DASFeature();\n                \n                dasFeature.segment = segmentID;\n                dasFeature.id = feature.getAttribute('id');\n                dasFeature.label = feature.getAttribute('label');\n\n\n/*\n                var childNodes = feature.childNodes;\n                for (var c = 0; c < childNodes.length; ++c) {\n                    var cn = childNodes[c];\n                    if (cn.nodeType == Node.ELEMENT_NODE) {\n                        var key = cn.tagName;\n                        //var val = null;\n                        //if (cn.firstChild) {\n                        //   val = cn.firstChild.nodeValue;\n                        //}\n                        dasFeature[key] = 'x';\n                    }\n                } */\n\n\n                var spos = elementValue(feature, \"START\");\n                var epos = elementValue(feature, \"END\");\n                if ((spos|0) > (epos|0)) {\n                    dasFeature.min = epos|0;\n                    dasFeature.max = spos|0;\n                } else {\n                    dasFeature.min = spos|0;\n                    dasFeature.max = epos|0;\n                }\n                {\n                    var tec = feature.getElementsByTagName('TYPE');\n                    if (tec.length > 0) {\n                        var te = tec[0];\n                        if (te.firstChild) {\n                            dasFeature.type = te.firstChild.nodeValue;\n                        }\n                        dasFeature.typeId = te.getAttribute('id');\n                        dasFeature.typeCv = te.getAttribute('cvId');\n                    }\n                }\n                dasFeature.type = elementValue(feature, \"TYPE\");\n                if (!dasFeature.type && dasFeature.typeId) {\n                    dasFeature.type = dasFeature.typeId; // FIXME?\n                }\n                \n                dasFeature.method = elementValue(feature, \"METHOD\");\n                {\n                    var ori = elementValue(feature, \"ORIENTATION\");\n                    if (!ori) {\n                        ori = '0';\n                    }\n                    dasFeature.orientation = ori;\n                }\n                dasFeature.score = elementValue(feature, \"SCORE\");\n                dasFeature.links = dasLinksOf(feature);\n                dasFeature.notes = dasNotesOf(feature);\n                \n                var groups = feature.getElementsByTagName(\"GROUP\");\n                for (var gi  = 0; gi < groups.length; ++gi) {\n                    var groupXML = groups[gi];\n                    var dasGroup = new DASGroup();\n                    dasGroup.type = groupXML.getAttribute('type');\n                    dasGroup.id = groupXML.getAttribute('id');\n                    dasGroup.links = dasLinksOf(groupXML);\n                    dasGroup.notes = dasNotesOf(groupXML);\n                    if (!dasFeature.groups) {\n                        dasFeature.groups = new Array(dasGroup);\n                    } else {\n                        dasFeature.groups.push(dasGroup);\n                    }\n                }\n\n                // Magic notes.  Check with TAD before changing this.\n                if (dasFeature.notes) {\n                    for (var ni = 0; ni < dasFeature.notes.length; ++ni) {\n                        var n = dasFeature.notes[ni];\n                        if (n.indexOf('Genename=') == 0) {\n                            var gg = new DASGroup();\n                            gg.type='gene';\n                            gg.id = n.substring(9);\n                            if (!dasFeature.groups) {\n                                dasFeature.groups = new Array(gg);\n                            } else {\n                                dasFeature.groups.push(gg);\n                            }\n                        }\n                    }\n                }\n                \n                {\n                    var pec = feature.getElementsByTagName('PART');\n                    if (pec.length > 0) {\n                        var parts = [];\n                        for (var pi = 0; pi < pec.length; ++pi) {\n                            parts.push(pec[pi].getAttribute('id'));\n                        }\n                        dasFeature.parts = parts;\n                    }\n                }\n                {\n                    var pec = feature.getElementsByTagName('PARENT');\n                    if (pec.length > 0) {\n                        var parents = [];\n                        for (var pi = 0; pi < pec.length; ++pi) {\n                            parents.push(pec[pi].getAttribute('id'));\n                        }\n                        dasFeature.parents = parents;\n                    }\n                }\n                \n                features.push(dasFeature);\n            }\n        }\n                \n        callback(features, undefined, segmentMap);\n    },\n    function (err) {\n        callback([], err);\n    });\n}\n\nfunction DASAlignment(type) {\n    this.type = type;\n    this.objects = {};\n    this.blocks = [];\n}\n\nDASSource.prototype.alignments = function(segment, options, callback) {\n    var dasURI = this.dasBaseURI + 'alignment?query=' + segment;\n    this.doCrossDomainRequest(dasURI, function(responseXML) {\n        if (!responseXML) {\n            callback([], 'Failed request ' + dasURI);\n            return;\n        }\n\n        var alignments = [];\n        var aliXMLs = responseXML.getElementsByTagName('alignment');\n        for (var ai = 0; ai < aliXMLs.length; ++ai) {\n            var aliXML = aliXMLs[ai];\n            var ali = new DASAlignment(aliXML.getAttribute('alignType'));\n            var objXMLs = aliXML.getElementsByTagName('alignObject');\n            for (var oi = 0; oi < objXMLs.length; ++oi) {\n                var objXML = objXMLs[oi];\n                var obj = {\n                    id:          objXML.getAttribute('intObjectId'),\n                    accession:   objXML.getAttribute('dbAccessionId'),\n                    version:     objXML.getAttribute('objectVersion'),\n                    dbSource:    objXML.getAttribute('dbSource'),\n                    dbVersion:   objXML.getAttribute('dbVersion')\n                };\n                ali.objects[obj.id] = obj;\n            }\n            \n            var blockXMLs = aliXML.getElementsByTagName('block');\n            for (var bi = 0; bi < blockXMLs.length; ++bi) {\n                var blockXML = blockXMLs[bi];\n                var block = {\n                    order:      blockXML.getAttribute('blockOrder'),\n                    segments:   []\n                };\n                var segXMLs = blockXML.getElementsByTagName('segment');\n                for (var si = 0; si < segXMLs.length; ++si) {\n                    var segXML = segXMLs[si];\n                    var seg = {\n                        object:      segXML.getAttribute('intObjectId'),\n                        min:         segXML.getAttribute('start'),\n                        max:         segXML.getAttribute('end'),\n                        strand:      segXML.getAttribute('strand'),\n                        cigar:       elementValue(segXML, 'cigar')\n                    };\n                    block.segments.push(seg);\n                }\n                ali.blocks.push(block);\n            }       \n                    \n            alignments.push(ali);\n        }\n        callback(alignments);\n    });\n}\n\n\nfunction DASStylesheet() {\n    this.styles = [];\n}\n\nDASStylesheet.prototype.pushStyle = function(filters, zoom, style) {\n    if (!filters) {\n        filters = {type: 'default'};\n    }\n    var styleHolder = shallowCopy(filters);\n    if (zoom) {\n        styleHolder.zoom = zoom;\n    }\n    styleHolder.style = style;\n    this.styles.push(styleHolder);\n}\n\nfunction DASStyle() {\n}\n\nfunction parseGradient(grad) {\n    var steps = grad.getAttribute('steps');\n    if (steps) {\n        steps = steps|0;\n    } else {\n        steps = 50;\n    }\n\n    var stops = [];\n    var colors = [];\n    var se = grad.getElementsByTagName('STOP');\n    for (var si = 0; si < se.length; ++si) {\n        var stop = se[si];\n        stops.push(1.0 * stop.getAttribute('score'));\n        colors.push(stop.firstChild.nodeValue);\n    }\n\n    return makeColourSteps(steps, stops, colors);\n}\n\nDASSource.prototype.stylesheet = function(successCB, failureCB) {\n    var dasURI, creds = this.credentials;\n    if (this.stylesheet_uri) {\n        dasURI = this.stylesheet_uri;\n        creds = false;\n    } else {\n        dasURI = this.dasBaseURI + 'stylesheet';\n    }\n\n    this.getURI(dasURI).then(function(dasURI) {\n        doCrossDomainRequest(dasURI, function(responseXML) {\n            if (!responseXML) {\n                if (failureCB) {\n                    failureCB();\n                } \n                return;\n            }\n            var stylesheet = new DASStylesheet();\n            var typeXMLs = responseXML.getElementsByTagName('TYPE');\n            for (var i = 0; i < typeXMLs.length; ++i) {\n                var typeStyle = typeXMLs[i];\n            \n                var filter = {};\n                filter.type = typeStyle.getAttribute('id'); // Am I right in thinking that this makes DASSTYLE XML invalid?  Ugh.\n                filter.label = typeStyle.getAttribute('label');\n                filter.method = typeStyle.getAttribute('method');\n                var glyphXMLs = typeStyle.getElementsByTagName('GLYPH');\n                for (var gi = 0; gi < glyphXMLs.length; ++gi) {\n                    var glyphXML = glyphXMLs[gi];\n                    var zoom = glyphXML.getAttribute('zoom');\n                    var glyph = childElementOf(glyphXML);\n                    var style = new DASStyle();\n                    style.glyph = glyph.localName;\n                    var child = glyph.firstChild;\n                    \n                    while (child) {\n                        if (child.nodeType == Node.ELEMENT_NODE) {\n                            if (child.localName == 'BGGRAD') {\n                                style[child.localName] = parseGradient(child);\n                            } else {      \n                                style[child.localName] = child.firstChild.nodeValue;\n                            }\n                        }\n                        child = child.nextSibling;\n                    }\n                    stylesheet.pushStyle(filter, zoom, style);\n                }\n            }\n            successCB(stylesheet);\n        }, creds);\n    }).catch(function(err) {\n        console.log(err);\n        failureCB();\n    });\n}\n\n//\n// sources command\n// \n\nfunction DASRegistry(uri, opts)\n{\n    opts = opts || {};\n    this.uri = uri;\n    this.opts = opts;   \n}\n\nDASRegistry.prototype.sources = function(callback, failure, opts)\n{\n    if (!opts) {\n        opts = {};\n    }\n\n    var filters = [];\n    if (opts.taxon) {\n        filters.push('organism=' + opts.taxon);\n    }\n    if (opts.auth) {\n        filters.push('authority=' + opts.auth);\n    }\n    if (opts.version) {\n        filters.push('version=' + opts.version);\n    }\n    var quri = this.uri;\n    if (filters.length > 0) {\n        quri = quri + '?' + filters.join('&');   // '&' as a separator to hack around dasregistry.org bug.\n    }\n\n    doCrossDomainRequest(quri, function(responseXML) {\n        if (!responseXML && failure) {\n            failure();\n            return;\n        }\n\n        var sources = [];       \n        var sourceXMLs = responseXML.getElementsByTagName('SOURCE');\n        for (var si = 0; si < sourceXMLs.length; ++si) {\n            var sourceXML = sourceXMLs[si];\n            var versionXMLs = sourceXML.getElementsByTagName('VERSION');\n            if (versionXMLs.length < 1) {\n                continue;\n            }\n            var versionXML = versionXMLs[0];\n\n            var coordXMLs = versionXML.getElementsByTagName('COORDINATES');\n            var coords = [];\n            for (var ci = 0; ci < coordXMLs.length; ++ci) {\n                var coordXML = coordXMLs[ci];\n                var coord = new DASCoords();\n                coord.auth = coordXML.getAttribute('authority');\n                coord.taxon = coordXML.getAttribute('taxid');\n                coord.version = coordXML.getAttribute('version');\n                coords.push(coord);\n            }\n            \n            var caps = [];\n            var capXMLs = versionXML.getElementsByTagName('CAPABILITY');\n            var uri;\n            for (var ci = 0; ci < capXMLs.length; ++ci) {\n                var capXML = capXMLs[ci];\n                \n                caps.push(capXML.getAttribute('type'));\n\n                if (capXML.getAttribute('type') == 'das1:features') {\n                    var fep = capXML.getAttribute('query_uri');\n                    uri = fep.substring(0, fep.length - ('features'.length));\n                }\n            }\n\n            var props = {};\n            var propXMLs = versionXML.getElementsByTagName('PROP');\n            for (var pi = 0; pi < propXMLs.length; ++pi) {\n                pusho(props, propXMLs[pi].getAttribute('name'), propXMLs[pi].getAttribute('value'));\n            }\n            \n            if (uri) {\n                var source = new DASSource(uri, {\n                    source_uri: sourceXML.getAttribute('uri'),\n                    name:  sourceXML.getAttribute('title'),\n                    desc:  sourceXML.getAttribute('description'),\n                    coords: coords,\n                    props: props,\n                    capabilities: caps\n                });\n                sources.push(source);\n            }\n        }\n        \n        callback(sources);\n    });\n}\n\n\n//\n// Utility functions\n//\n\nfunction elementValue(element, tag)\n{\n    var children = element.getElementsByTagName(tag);\n    if (children.length > 0 && children[0].firstChild) {\n        var c = children[0];\n        if (c.childNodes.length == 1) {\n            return c.firstChild.nodeValue;\n        } else {\n            var s = '';\n            for (var ni = 0; ni < c.childNodes.length; ++ni) {\n                s += c.childNodes[ni].nodeValue;\n            }\n            return s;\n        }\n\n    } else {\n        return null;\n    }\n}\n\nfunction childElementOf(element)\n{\n    if (element.hasChildNodes()) {\n        var child = element.firstChild;\n        do {\n            if (child.nodeType == Node.ELEMENT_NODE) {\n                return child;\n            } \n            child = child.nextSibling;\n        } while (child != null);\n    }\n    return null;\n}\n\n\nfunction dasLinksOf(element)\n{\n    var links = new Array();\n    var maybeLinkChilden = element.getElementsByTagName('LINK');\n    for (var ci = 0; ci < maybeLinkChilden.length; ++ci) {\n        var linkXML = maybeLinkChilden[ci];\n        if (linkXML.parentNode == element) {\n            links.push(new DASLink(linkXML.firstChild ? linkXML.firstChild.nodeValue : 'Unknown', linkXML.getAttribute('href')));\n        }\n    }\n    \n    return links;\n}\n\nfunction dasNotesOf(element)\n{\n    var notes = [];\n    var maybeNotes = element.getElementsByTagName('NOTE');\n    for (var ni = 0; ni < maybeNotes.length; ++ni) {\n        if (maybeNotes[ni].firstChild) {\n            notes.push(maybeNotes[ni].firstChild.nodeValue);\n        }\n    }\n    return notes;\n}\n\nfunction doCrossDomainRequest(url, handler, credentials, custAuth) {\n    // TODO: explicit error handlers?\n\n    if (window.XDomainRequest) {\n        var req = new XDomainRequest();\n        req.onload = function() {\n            var dom = new ActiveXObject(\"Microsoft.XMLDOM\");\n            dom.async = false;\n            dom.loadXML(req.responseText);\n            handler(dom);\n        }\n        req.open(\"get\", url);\n        req.send('');\n    } else {\n        try {\n            var req = new XMLHttpRequest();\n            var timeout = setTimeout(\n                function() {\n                    console.log('timing out '  + url);\n                    req.abort();\n                    handler(null, req);\n                },\n                5000\n            );\n\n            req.ontimeout = function() {\n                console.log('timeout on ' + url);\n            };\n\n            req.onreadystatechange = function() {\n                if (req.readyState == 4) {\n                    clearTimeout(timeout);\n                    if (req.status >= 200 || req.status == 0) {\n                        handler(req.responseXML, req);\n                    }\n                }\n            };\n            req.open(\"get\", url, true);\n            // IE10/11 fix: The timeout property may be set only in the time interval between a call to the open method\n            //              and the first call to the send method.\n            req.timeout = 5000;\n            if (credentials) {\n                req.withCredentials = true;\n            }\n            if (custAuth) {\n                req.setRequestHeader('X-DAS-Authorisation', custAuth);\n            }\n            req.overrideMimeType('text/xml');\n            req.setRequestHeader('Accept', 'application/xml,*/*');\n            req.send('');\n        } catch (e) {\n            handler(null, req, e);\n        }\n    }\n}\n\nDASSource.prototype.doCrossDomainRequest = function(url, handler, errHandler) {\n    var custAuth;\n    if (this.xUser) {\n        custAuth = 'Basic ' + btoa(this.xUser + ':' + this.xPass);\n    }\n\n    try {\n        return doCrossDomainRequest(url, handler, this.credentials, custAuth);\n    } catch (err) {\n        if (errHandler) {\n            errHandler(err);\n        } else {\n            throw err;\n        }\n    }\n}\n\nfunction isDasBooleanTrue(s) {\n    s = ('' + s).toLowerCase();\n    return s==='yes' || s==='true';\n}\n\nfunction isDasBooleanNotFalse(s) {\n    if (!s)\n        return false;\n\n    s = ('' + s).toLowerCase();\n    return s!=='no' || s!=='false';\n}\n\nfunction copyStylesheet(ss) {\n    var nss = shallowCopy(ss);\n    nss.styles = [];\n    for (var si = 0; si < ss.styles.length; ++si) {\n        var sh = nss.styles[si] = shallowCopy(ss.styles[si]);\n        sh._methodRE = sh._labelRE = sh._typeRE = undefined;\n        sh.style = shallowCopy(sh.style);\n        sh.style.id = undefined;\n        sh.style._gradient = undefined;\n    }\n    return nss;\n}\n\nif (typeof(module) !== 'undefined') {\n    module.exports = {\n        DASGroup: DASGroup,\n        DASFeature: DASFeature,\n        DASStylesheet: DASStylesheet,\n        DASStyle: DASStyle,\n        DASSource: DASSource,\n        DASSegment: DASSegment,\n        DASRegistry: DASRegistry,\n        DASSequence: DASSequence,\n        DASLink: DASLink,\n\n        isDasBooleanTrue: isDasBooleanTrue,\n        isDasBooleanNotFalse: isDasBooleanNotFalse,\n        copyStylesheet: copyStylesheet,\n        coordsMatch: coordsMatch\n    };\n}\n","/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */\n\n// \n// Dalliance Genome Explorer\n// (c) Thomas Down 2006-2014\n//\n// encode.js: interface for ENCODE DCC services\n//\n\n\"use strict\";\n\nif (typeof(require) !== 'undefined') {\n    var Promise = require('es6-promise').Promise;\n}\n\nfunction lookupEncodeURI(uri, json) {\n    if (uri.indexOf('?') < 0)\n        uri = uri + '?soft=true';\n\n    return new Promise(function(accept, reject) {\n        var req = new XMLHttpRequest();\n        req.onreadystatechange = function() {\n            if (req.readyState == 4) {\n                if (req.status >= 300) {\n                    reject('Error code ' + req.status);\n                } else {\n                    var resp = JSON.parse(req.response);\n                    accept(json ? resp : resp.location);\n                }\n            }\n        };\n    \n        req.open('GET', uri, true);\n        req.setRequestHeader('Accept', 'application/json');\n        req.responseType = 'text';\n        req.send('');\n    });\n}\n\nfunction EncodeURLHolder(url) {\n    this.rawurl = url;\n}\n\nEncodeURLHolder.prototype.getURLPromise = function() {\n    if (this.urlPromise && this.urlPromiseValidity > Date.now()) {\n        return this.urlPromise;\n    } else {\n        this.urlPromise = lookupEncodeURI(this.rawurl, true).then(function(resp) {\n            return resp.location;\n        });\n        this.urlPromiseValidity = Date.now() + (12 * 3600 * 1000);\n        return this.urlPromise;\n    }\n}\n\nfunction EncodeFetchable(url, start, end, opts) {\n    if (!opts) {\n        if (typeof start === 'object') {\n            opts = start;\n            start = undefined;\n        } else {\n            opts = {};\n        }\n    }\n\n    this.url = (typeof url === 'string' ? new EncodeURLHolder(url) : url);\n    this.start = start || 0;\n    if (end) {\n        this.end = end;\n    }\n    this.opts = opts;\n}\n\n\n\nEncodeFetchable.prototype.slice = function(s, l) {\n    if (s < 0) {\n        throw 'Bad slice ' + s;\n    }\n\n    var ns = this.start, ne = this.end;\n    if (ns && s) {\n        ns = ns + s;\n    } else {\n        ns = s || ns;\n    }\n    if (l && ns) {\n        ne = ns + l - 1;\n    } else {\n        ne = ne || l - 1;\n    }\n    return new EncodeFetchable(this.url, ns, ne, this.opts);\n}\n\nEncodeFetchable.prototype.fetchAsText = function(callback) {\n    var self = this;\n    var req = new XMLHttpRequest();\n    var length;\n    self.url.getURLPromise().then(function(url) {\n        req.open('GET', url, true);\n\n        if (self.end) {\n            if (self.end - self.start > 100000000) {\n                throw 'Monster fetch!';\n            }\n            req.setRequestHeader('Range', 'bytes=' + self.start + '-' + self.end);\n            length = self.end - self.start + 1;\n        }\n\n        req.onreadystatechange = function() {\n            if (req.readyState == 4) {\n                if (req.status == 200 || req.status == 206) {\n                    return callback(req.responseText);\n                } else {\n                    return callback(null);\n                }\n            }\n        };\n        if (self.opts.credentials) {\n            req.withCredentials = true;\n        }\n        req.send('');\n    }).catch(function(err) {\n        console.log(err);\n        return callback(null);\n    });\n}\n\nEncodeFetchable.prototype.salted = function() {\n    return this;\n}\n\nEncodeFetchable.prototype.fetch = function(callback, attempt, truncatedLength) {\n    var self = this;\n\n    attempt = attempt || 1;\n    if (attempt > 3) {\n        return callback(null);\n    }\n\n    self.url.getURLPromise().then(function (url) {\n        var req = new XMLHttpRequest();\n        var length;\n        req.open('GET', url, true);\n        req.overrideMimeType('text/plain; charset=x-user-defined');\n        if (self.end) {\n            if (self.end - self.start > 100000000) {\n                throw 'Monster fetch!';\n            }\n            req.setRequestHeader('Range', 'bytes=' + self.start + '-' + self.end);\n            length = self.end - self.start + 1;\n        }\n        req.responseType = 'arraybuffer';\n        req.onreadystatechange = function() {\n            if (req.readyState == 4) {\n                if (req.status == 200 || req.status == 206) {\n                    if (req.response) {\n                        var bl = req.response.byteLength;\n                        if (length && length != bl && (!truncatedLength || bl != truncatedLength)) {\n                            return self.fetch(callback, attempt + 1, bl);\n                        } else {\n                            return callback(req.response);\n                        }\n                    } else if (req.mozResponseArrayBuffer) {\n                        return callback(req.mozResponseArrayBuffer);\n                    } else {\n                        var r = req.responseText;\n                        if (length && length != r.length && (!truncatedLength || r.length != truncatedLength)) {\n                            return self.fetch(callback, attempt + 1, r.length);\n                        } else {\n                            return callback(bstringToBuffer(req.responseText));\n                        }\n                    }\n                } else {\n                    return self.fetch(callback, attempt + 1);\n                }\n            }\n        };\n        if (self.opts.credentials) {\n            req.withCredentials = true;\n        }\n        req.send('');\n    }).catch(function(err) {\n        console.log(err);\n    });\n}\n\nfunction bstringToBuffer(result) {\n    if (!result) {\n        return null;\n    }\n\n    var ba = new Uint8Array(result.length);\n    for (var i = 0; i < ba.length; ++i) {\n        ba[i] = result.charCodeAt(i);\n    }\n    return ba.buffer;\n}\n\nif (typeof(module) !== 'undefined') {\n    module.exports = {\n        lookupEncodeURI: lookupEncodeURI,\n        EncodeFetchable: EncodeFetchable\n    };\n}\n","/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */\n\n// \n// Dalliance Genome Explorer\n// (c) Thomas Down 2006-2014\n//\n// fetchworker.js\n//\n\n\"use strict\";\n\nvar bin = require('./bin');\nvar bam = require('./bam');\nvar bigwig = require('./bigwig');\nvar encode = require('./encode');\nvar utils = require('./utils');\n\nvar Promise = require('es6-promise').Promise;\n\nvar connections = {};\nvar resolveResolvers = {};\n\nvar idSeed = 0;\n\nglobal.newID = function() {\n    return 'cn' + (++idSeed);\n}\n\npostMessage({tag: 'init'});\n\nself.onmessage = function(event) {\n    var d = event.data;\n    var command = event.data.command;\n    var tag = event.data.tag;\n\n    if (!command) {\n        var rr = resolveResolvers[tag];\n        if (rr) {\n            if (d.err) {\n                rr.reject(d.err);\n            } else {\n                rr.resolve(d.url);\n            }\n                \n            delete resolveResolvers[tag];\n        }\n    } else if (command === 'connectBAM') {\n        var id = newID();\n        var resolver;\n        if (d.resolver) {\n            resolver = proxyResolver(d.resolver);\n        }\n        var bamF, baiF, indexChunks;\n        if (d.blob) {\n            bamF = new bin.BlobFetchable(d.blob);\n            baiF = new bin.BlobFetchable(d.indexBlob);\n        } else {\n            bamF = new bin.URLFetchable(d.uri, {credentials: d.credentials, resolver: resolver});\n            baiF = new bin.URLFetchable(d.indexUri, {credentials: d.credentials, resolver: resolver});\n            indexChunks = d.indexChunks;\n        }\n\n        bam.makeBam(bamF, baiF, indexChunks, function(bamObj, err) {\n            if (bamObj) {\n                connections[id] = new BAMWorkerFetcher(bamObj);\n                postMessage({tag: tag, result: id});\n            } else {\n                postMessage({tag: tag, error: err || \"Couldn't fetch BAM\"});\n            }\n        });\n    } else if (command === 'connectBBI') {\n        var id = newID();\n        var resolver;\n        if (d.resolver) {\n            resolver = proxyResolver(d.resolver);\n        }\n        var bbi;\n        if (d.blob) {\n            bbi = new bin.BlobFetchable(d.blob);\n        } else if (d.transport == 'encode') {\n            bbi = new encode.EncodeFetchable(d.uri, {credentials: d.credentials});\n        } else {\n            bbi = new bin.URLFetchable(d.uri, {credentials: d.credentials, resolver: resolver});\n        }\n\n        bigwig.makeBwg(bbi, function(bwg, err) {\n            if (bwg) {\n                connections[id] = new BBIWorkerFetcher(bwg);\n                postMessage({tag: tag, result: id});\n            } else {\n                postMessage({tag: tag, error: err || \"Couldn't fetch BBI\"});\n            }\n        }, d.uri);\n    } else if (command === 'textxhr') {\n        utils.textXHR(d.uri, function(resp, err) {\n            if (resp) {\n                postMessage({tag: tag, result: resp});\n            } else {\n                postMessage({tag: tag, err: err || \"Couldn't fetch resource\"});\n            }\n        });\n    } else if (command === 'fetch') {\n        var con = connections[event.data.connection];\n        if (!con) {\n            return postMessage({tag: tag, error: 'No such connection: ' + event.data.connection});\n        }\n\n        con.fetch(d.tag, d.chr, d.min, d.max, d.zoom, d.opts);\n    } else if (command === 'leap') {\n        var con = connections[event.data.connection];\n        if (!con) {\n            return postMessage({tag: tag, error: 'No such connection: ' + event.data.connection});\n        }\n\n        con.leap(d.tag, d.chr, d.pos, d.dir);\n    } else if (command === 'quantLeap') {\n        var con = connections[event.data.connection];\n        if (!con) {\n            return postMessage({tag: tag, error: 'No such connection: ' + event.data.connection});\n        }\n\n        con.quantLeap(d.tag, d.chr, d.pos, d.dir, d.threshold, d.under);\n    } else if (command === 'meta') {\n        var con = connections[event.data.connection];\n        if (!con) {\n            return postMessage({tag: tag, error: 'No such connection: ' + event.data.connection});\n        }\n\n        con.meta(d.tag);\n    } else if (command === 'search') {\n        var con = connections[event.data.connection];\n        if (!con) {\n            return postMessage({tag: tag, error: 'No such connection: ' + event.data.connection});\n        }\n\n        con.search(d.tag, d.query, d.index);\n    } else if (command === 'date') {\n        return postMessage({tag: tag, result: Date.now()|0});\n    } else {\n        postMessage({tag: tag, error: 'Bad command ' + command});\n    }\n}\n\nfunction BAMWorkerFetcher(bam) {\n    this.bam = bam;\n}\n\nBAMWorkerFetcher.prototype.fetch = function(tag, chr, min, max, zoom, opts) {\n    opts = opts || {};\n    this.bam.fetch(chr, min, max, function(records, err) {\n        if (records) {\n            postMessage({tag: tag, result: records, time: Date.now()|0});\n        } else {\n            postMessage({tag: tag, error: err});\n        }\n    }, opts);\n}\n\nfunction BBIWorkerFetcher(bbi) {\n    this.bbi = bbi;\n}\n\nBBIWorkerFetcher.prototype.fetch = function(tag, chr, min, max, zoom) {\n    if (typeof(zoom) !== 'number')\n        zoom = -1;\n\n    var data;\n    if (zoom < 0) {\n        data = this.bbi.getUnzoomedView();\n    } else {\n        data = this.bbi.getZoomedView(zoom);\n    }\n\n    data.readWigData(chr, min, max, function(features) {\n        postMessage({tag: tag, result: features});\n    });\n}\n\nBBIWorkerFetcher.prototype.meta = function(tag) {\n    var scales = [1];\n    for (var z = 0; z < this.bbi.zoomLevels.length; ++z) {\n        scales.push(this.bbi.zoomLevels[z].reduction);\n    }\n\n    var thisB = this;\n    var meta = {type: this.bbi.type,\n                zoomLevels: scales,\n                fieldCount: this.bbi.fieldCount,\n                definedFieldCount: this.bbi.definedFieldCount,\n                schema: this.bbi.schema};\n    if (this.bbi.type === 'bigbed') {\n        this.bbi.getExtraIndices(function(ei) {\n            if (ei) {\n                thisB.extraIndices = ei;\n                meta.extraIndices = ei.map(function(i) {return i.field});\n            }\n            postMessage({tag: tag, result: meta});\n        });\n    } else {\n        postMessage({tag: tag, result: meta});\n    }\n}\n\nBBIWorkerFetcher.prototype.leap = function(tag, chr, pos, dir) {\n    this.bbi.getUnzoomedView().getFirstAdjacent(chr, pos, dir, function(result, err) {\n        postMessage({tag: tag, result: result, error: err});\n    });\n}\n\nBBIWorkerFetcher.prototype.quantLeap = function(tag, chr, pos, dir, threshold, under) {\n    this.bbi.thresholdSearch(chr, pos, dir, threshold, function(result, err) {\n        postMessage({tag: tag, result: result, error: err});\n    });\n}\n\nBBIWorkerFetcher.prototype.search = function(tag, query, index) {\n    var is = this.extraIndices[0];\n    is.lookup(query, function(result, err) {\n        postMessage({tag: tag, result: result, error: err});\n    });\n}\n\nfunction proxyResolver(tag) {\n    return function(url) {\n        var lid = newID();\n        return new Promise(function (resolve, reject) {\n            resolveResolvers[lid] = {resolve: resolve, reject: reject};\n            postMessage({tag: lid,\n                         cmd: 'resolve',\n                         resolver: tag,\n                         url: url});\n        });\n    }\n}\n","/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */\n\n// \n// Dalliance Genome Explorer\n// (c) Thomas Down 2006-2011\n//\n// lh3utils.js: common support for lh3's file formats\n//\n\nif (typeof(require) !== 'undefined') {\n    var jszlib = require('jszlib');\n    var jszlib_inflate_buffer = jszlib.inflateBuffer;\n    var arrayCopy = jszlib.arrayCopy;\n}\n\nfunction Vob(b, o) {\n    this.block = b;\n    this.offset = o;\n}\n\nVob.prototype.toString = function() {\n    return '' + this.block + ':' + this.offset;\n}\n\nfunction readVob(ba, offset, allowZero) {\n    var block = ((ba[offset+6] & 0xff) * 0x100000000) + ((ba[offset+5] & 0xff) * 0x1000000) + ((ba[offset+4] & 0xff) * 0x10000) + ((ba[offset+3] & 0xff) * 0x100) + ((ba[offset+2] & 0xff));\n    var bint = (ba[offset+1] << 8) | (ba[offset]);\n    if (block == 0 && bint == 0 && !allowZero) {\n        return null;  // Should only happen in the linear index?\n    } else {\n        return new Vob(block, bint);\n    }\n}\n\nfunction unbgzf(data, lim) {\n    lim = Math.min(lim || 1, data.byteLength - 50);\n    var oBlockList = [];\n    var ptr = [0];\n    var totalSize = 0;\n\n    while (ptr[0] < lim) {\n        var ba = new Uint8Array(data, ptr[0], 12); // FIXME is this enough for all credible BGZF block headers?\n        var xlen = (ba[11] << 8) | (ba[10]);\n        // dlog('xlen[' + (ptr[0]) +']=' + xlen);\n        var unc = jszlib_inflate_buffer(data, 12 + xlen + ptr[0], Math.min(65536, data.byteLength - 12 - xlen - ptr[0]), ptr);\n        ptr[0] += 8;\n        totalSize += unc.byteLength;\n        oBlockList.push(unc);\n    }\n\n    if (oBlockList.length == 1) {\n        return oBlockList[0];\n    } else {\n        var out = new Uint8Array(totalSize);\n        var cursor = 0;\n        for (var i = 0; i < oBlockList.length; ++i) {\n            var b = new Uint8Array(oBlockList[i]);\n            arrayCopy(b, 0, out, cursor, b.length);\n            cursor += b.length;\n        }\n        return out.buffer;\n    }\n}\n\nfunction Chunk(minv, maxv) {\n    this.minv = minv; this.maxv = maxv;\n}\n\n\n//\n// Binning (transliterated from SAM1.3 spec)\n//\n\n/* calculate bin given an alignment covering [beg,end) (zero-based, half-close-half-open) */\nfunction reg2bin(beg, end)\n{\n    --end;\n    if (beg>>14 == end>>14) return ((1<<15)-1)/7 + (beg>>14);\n    if (beg>>17 == end>>17) return ((1<<12)-1)/7 + (beg>>17);\n    if (beg>>20 == end>>20) return ((1<<9)-1)/7 + (beg>>20);\n    if (beg>>23 == end>>23) return ((1<<6)-1)/7 + (beg>>23);\n    if (beg>>26 == end>>26) return ((1<<3)-1)/7 + (beg>>26);\n    return 0;\n}\n\n/* calculate the list of bins that may overlap with region [beg,end) (zero-based) */\nvar MAX_BIN = (((1<<18)-1)/7);\nfunction reg2bins(beg, end) \n{\n    var i = 0, k, list = [];\n    --end;\n    list.push(0);\n    for (k = 1 + (beg>>26); k <= 1 + (end>>26); ++k) list.push(k);\n    for (k = 9 + (beg>>23); k <= 9 + (end>>23); ++k) list.push(k);\n    for (k = 73 + (beg>>20); k <= 73 + (end>>20); ++k) list.push(k);\n    for (k = 585 + (beg>>17); k <= 585 + (end>>17); ++k) list.push(k);\n    for (k = 4681 + (beg>>14); k <= 4681 + (end>>14); ++k) list.push(k);\n    return list;\n}\n\nif (typeof(module) !== 'undefined') {\n    module.exports = {\n        unbgzf: unbgzf,\n        readVob: readVob,\n        reg2bin: reg2bin,\n        reg2bins: reg2bins,\n        Chunk: Chunk\n    };\n}\n","/*\r\n * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\r\n * in FIPS 180-1\r\n * Version 2.2 Copyright Paul Johnston 2000 - 2009.\r\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\r\n * Distributed under the BSD License\r\n * See http://pajhome.org.uk/crypt/md5 for details.\r\n */\r\n\r\n \"use strict\";\r\n\r\n/*\r\n * Configurable variables. You may need to tweak these to be compatible with\r\n * the server-side, but the defaults work in most cases.\r\n */\r\nvar hexcase = 0;  /* hex output format. 0 - lowercase; 1 - uppercase        */\r\nvar b64pad  = \"\"; /* base-64 pad character. \"=\" for strict RFC compliance   */\r\n\r\n/*\r\n * These are the functions you'll usually want to call\r\n * They take string arguments and return either hex or base-64 encoded strings\r\n */\r\nfunction hex_sha1(s)    { return rstr2hex(rstr_sha1(str2rstr_utf8(s))); }\r\nfunction b64_sha1(s)    { return rstr2b64(rstr_sha1(str2rstr_utf8(s))); }\r\nfunction any_sha1(s, e) { return rstr2any(rstr_sha1(str2rstr_utf8(s)), e); }\r\nfunction hex_hmac_sha1(k, d)\r\n  { return rstr2hex(rstr_hmac_sha1(str2rstr_utf8(k), str2rstr_utf8(d))); }\r\nfunction b64_hmac_sha1(k, d)\r\n  { return rstr2b64(rstr_hmac_sha1(str2rstr_utf8(k), str2rstr_utf8(d))); }\r\nfunction any_hmac_sha1(k, d, e)\r\n  { return rstr2any(rstr_hmac_sha1(str2rstr_utf8(k), str2rstr_utf8(d)), e); }\r\n\r\n/*\r\n * Perform a simple self-test to see if the VM is working\r\n */\r\nfunction sha1_vm_test()\r\n{\r\n  return hex_sha1(\"abc\").toLowerCase() == \"a9993e364706816aba3e25717850c26c9cd0d89d\";\r\n}\r\n\r\n/*\r\n * Calculate the SHA1 of a raw string\r\n */\r\nfunction rstr_sha1(s)\r\n{\r\n  return binb2rstr(binb_sha1(rstr2binb(s), s.length * 8));\r\n}\r\n\r\n/*\r\n * Calculate the HMAC-SHA1 of a key and some data (raw strings)\r\n */\r\nfunction rstr_hmac_sha1(key, data)\r\n{\r\n  var bkey = rstr2binb(key);\r\n  if(bkey.length > 16) bkey = binb_sha1(bkey, key.length * 8);\r\n\r\n  var ipad = Array(16), opad = Array(16);\r\n  for(var i = 0; i < 16; i++)\r\n  {\r\n    ipad[i] = bkey[i] ^ 0x36363636;\r\n    opad[i] = bkey[i] ^ 0x5C5C5C5C;\r\n  }\r\n\r\n  var hash = binb_sha1(ipad.concat(rstr2binb(data)), 512 + data.length * 8);\r\n  return binb2rstr(binb_sha1(opad.concat(hash), 512 + 160));\r\n}\r\n\r\n/*\r\n * Convert a raw string to a hex string\r\n */\r\nfunction rstr2hex(input)\r\n{\r\n  // try { hexcase } catch(e) { hexcase=0; }\r\n  var hex_tab = hexcase ? \"0123456789ABCDEF\" : \"0123456789abcdef\";\r\n  var output = \"\";\r\n  var x;\r\n  for(var i = 0; i < input.length; i++)\r\n  {\r\n    x = input.charCodeAt(i);\r\n    output += hex_tab.charAt((x >>> 4) & 0x0F)\r\n           +  hex_tab.charAt( x        & 0x0F);\r\n  }\r\n  return output;\r\n}\r\n\r\n/*\r\n * Convert a raw string to a base-64 string\r\n */\r\nfunction rstr2b64(input)\r\n{\r\n  // try { b64pad } catch(e) { b64pad=''; }\r\n  var tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\r\n  var output = \"\";\r\n  var len = input.length;\r\n  for(var i = 0; i < len; i += 3)\r\n  {\r\n    var triplet = (input.charCodeAt(i) << 16)\r\n                | (i + 1 < len ? input.charCodeAt(i+1) << 8 : 0)\r\n                | (i + 2 < len ? input.charCodeAt(i+2)      : 0);\r\n    for(var j = 0; j < 4; j++)\r\n    {\r\n      if(i * 8 + j * 6 > input.length * 8) output += b64pad;\r\n      else output += tab.charAt((triplet >>> 6*(3-j)) & 0x3F);\r\n    }\r\n  }\r\n  return output;\r\n}\r\n\r\n/*\r\n * Convert a raw string to an arbitrary string encoding\r\n */\r\nfunction rstr2any(input, encoding)\r\n{\r\n  var divisor = encoding.length;\r\n  var remainders = Array();\r\n  var i, q, x, quotient;\r\n\r\n  /* Convert to an array of 16-bit big-endian values, forming the dividend */\r\n  var dividend = Array(Math.ceil(input.length / 2));\r\n  for(i = 0; i < dividend.length; i++)\r\n  {\r\n    dividend[i] = (input.charCodeAt(i * 2) << 8) | input.charCodeAt(i * 2 + 1);\r\n  }\r\n\r\n  /*\r\n   * Repeatedly perform a long division. The binary array forms the dividend,\r\n   * the length of the encoding is the divisor. Once computed, the quotient\r\n   * forms the dividend for the next step. We stop when the dividend is zero.\r\n   * All remainders are stored for later use.\r\n   */\r\n  while(dividend.length > 0)\r\n  {\r\n    quotient = Array();\r\n    x = 0;\r\n    for(i = 0; i < dividend.length; i++)\r\n    {\r\n      x = (x << 16) + dividend[i];\r\n      q = Math.floor(x / divisor);\r\n      x -= q * divisor;\r\n      if(quotient.length > 0 || q > 0)\r\n        quotient[quotient.length] = q;\r\n    }\r\n    remainders[remainders.length] = x;\r\n    dividend = quotient;\r\n  }\r\n\r\n  /* Convert the remainders to the output string */\r\n  var output = \"\";\r\n  for(i = remainders.length - 1; i >= 0; i--)\r\n    output += encoding.charAt(remainders[i]);\r\n\r\n  /* Append leading zero equivalents */\r\n  var full_length = Math.ceil(input.length * 8 /\r\n                                    (Math.log(encoding.length) / Math.log(2)))\r\n  for(i = output.length; i < full_length; i++)\r\n    output = encoding[0] + output;\r\n\r\n  return output;\r\n}\r\n\r\n/*\r\n * Encode a string as utf-8.\r\n * For efficiency, this assumes the input is valid utf-16.\r\n */\r\nfunction str2rstr_utf8(input)\r\n{\r\n  var output = \"\";\r\n  var i = -1;\r\n  var x, y;\r\n\r\n  while(++i < input.length)\r\n  {\r\n    /* Decode utf-16 surrogate pairs */\r\n    x = input.charCodeAt(i);\r\n    y = i + 1 < input.length ? input.charCodeAt(i + 1) : 0;\r\n    if(0xD800 <= x && x <= 0xDBFF && 0xDC00 <= y && y <= 0xDFFF)\r\n    {\r\n      x = 0x10000 + ((x & 0x03FF) << 10) + (y & 0x03FF);\r\n      i++;\r\n    }\r\n\r\n    /* Encode output as utf-8 */\r\n    if(x <= 0x7F)\r\n      output += String.fromCharCode(x);\r\n    else if(x <= 0x7FF)\r\n      output += String.fromCharCode(0xC0 | ((x >>> 6 ) & 0x1F),\r\n                                    0x80 | ( x         & 0x3F));\r\n    else if(x <= 0xFFFF)\r\n      output += String.fromCharCode(0xE0 | ((x >>> 12) & 0x0F),\r\n                                    0x80 | ((x >>> 6 ) & 0x3F),\r\n                                    0x80 | ( x         & 0x3F));\r\n    else if(x <= 0x1FFFFF)\r\n      output += String.fromCharCode(0xF0 | ((x >>> 18) & 0x07),\r\n                                    0x80 | ((x >>> 12) & 0x3F),\r\n                                    0x80 | ((x >>> 6 ) & 0x3F),\r\n                                    0x80 | ( x         & 0x3F));\r\n  }\r\n  return output;\r\n}\r\n\r\n/*\r\n * Encode a string as utf-16\r\n */\r\nfunction str2rstr_utf16le(input)\r\n{\r\n  var output = \"\";\r\n  for(var i = 0; i < input.length; i++)\r\n    output += String.fromCharCode( input.charCodeAt(i)        & 0xFF,\r\n                                  (input.charCodeAt(i) >>> 8) & 0xFF);\r\n  return output;\r\n}\r\n\r\nfunction str2rstr_utf16be(input)\r\n{\r\n  var output = \"\";\r\n  for(var i = 0; i < input.length; i++)\r\n    output += String.fromCharCode((input.charCodeAt(i) >>> 8) & 0xFF,\r\n                                   input.charCodeAt(i)        & 0xFF);\r\n  return output;\r\n}\r\n\r\n/*\r\n * Convert a raw string to an array of big-endian words\r\n * Characters >255 have their high-byte silently ignored.\r\n */\r\nfunction rstr2binb(input)\r\n{\r\n  var output = Array(input.length >> 2);\r\n  for(var i = 0; i < output.length; i++)\r\n    output[i] = 0;\r\n  for(var i = 0; i < input.length * 8; i += 8)\r\n    output[i>>5] |= (input.charCodeAt(i / 8) & 0xFF) << (24 - i % 32);\r\n  return output;\r\n}\r\n\r\n/*\r\n * Convert an array of big-endian words to a string\r\n */\r\nfunction binb2rstr(input)\r\n{\r\n  var output = \"\";\r\n  for(var i = 0; i < input.length * 32; i += 8)\r\n    output += String.fromCharCode((input[i>>5] >>> (24 - i % 32)) & 0xFF);\r\n  return output;\r\n}\r\n\r\n/*\r\n * Calculate the SHA-1 of an array of big-endian words, and a bit length\r\n */\r\nfunction binb_sha1(x, len)\r\n{\r\n  /* append padding */\r\n  x[len >> 5] |= 0x80 << (24 - len % 32);\r\n  x[((len + 64 >> 9) << 4) + 15] = len;\r\n\r\n  var w = Array(80);\r\n  var a =  1732584193;\r\n  var b = -271733879;\r\n  var c = -1732584194;\r\n  var d =  271733878;\r\n  var e = -1009589776;\r\n\r\n  for(var i = 0; i < x.length; i += 16)\r\n  {\r\n    var olda = a;\r\n    var oldb = b;\r\n    var oldc = c;\r\n    var oldd = d;\r\n    var olde = e;\r\n\r\n    for(var j = 0; j < 80; j++)\r\n    {\r\n      if(j < 16) w[j] = x[i + j];\r\n      else w[j] = bit_rol(w[j-3] ^ w[j-8] ^ w[j-14] ^ w[j-16], 1);\r\n      var t = safe_add(safe_add(bit_rol(a, 5), sha1_ft(j, b, c, d)),\r\n                       safe_add(safe_add(e, w[j]), sha1_kt(j)));\r\n      e = d;\r\n      d = c;\r\n      c = bit_rol(b, 30);\r\n      b = a;\r\n      a = t;\r\n    }\r\n\r\n    a = safe_add(a, olda);\r\n    b = safe_add(b, oldb);\r\n    c = safe_add(c, oldc);\r\n    d = safe_add(d, oldd);\r\n    e = safe_add(e, olde);\r\n  }\r\n  return Array(a, b, c, d, e);\r\n\r\n}\r\n\r\n/*\r\n * Perform the appropriate triplet combination function for the current\r\n * iteration\r\n */\r\nfunction sha1_ft(t, b, c, d)\r\n{\r\n  if(t < 20) return (b & c) | ((~b) & d);\r\n  if(t < 40) return b ^ c ^ d;\r\n  if(t < 60) return (b & c) | (b & d) | (c & d);\r\n  return b ^ c ^ d;\r\n}\r\n\r\n/*\r\n * Determine the appropriate additive constant for the current iteration\r\n */\r\nfunction sha1_kt(t)\r\n{\r\n  return (t < 20) ?  1518500249 : (t < 40) ?  1859775393 :\r\n         (t < 60) ? -1894007588 : -899497514;\r\n}\r\n\r\n/*\r\n * Add integers, wrapping at 2^32. This uses 16-bit operations internally\r\n * to work around bugs in some JS interpreters.\r\n */\r\nfunction safe_add(x, y)\r\n{\r\n  var lsw = (x & 0xFFFF) + (y & 0xFFFF);\r\n  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\r\n  return (msw << 16) | (lsw & 0xFFFF);\r\n}\r\n\r\n/*\r\n * Bitwise rotate a 32-bit number to the left.\r\n */\r\nfunction bit_rol(num, cnt)\r\n{\r\n  return (num << cnt) | (num >>> (32 - cnt));\r\n}\r\n\r\nif (typeof(module) !== 'undefined') {\r\n  module.exports = {\r\n    b64_sha1: b64_sha1,\r\n    hex_sha1: hex_sha1\r\n  }\r\n}\r\n","/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */\n\n// \n// Dalliance Genome Explorer\n// (c) Thomas Down 2006-2010\n//\n// spans.js: JavaScript Intset/Location port.\n//\n\n\"use strict\";\n\n\nfunction Range(min, max)\n{\n    if (typeof(min) != 'number' || typeof(max) != 'number')\n        throw 'Bad range ' + min + ',' + max;\n    this._min = min;\n    this._max = max;\n}\n\nRange.prototype.min = function() {\n    return this._min;\n}\n\nRange.prototype.max = function() {\n    return this._max;\n}\n\nRange.prototype.contains = function(pos) {\n    return pos >= this._min && pos <= this._max;\n}\n\nRange.prototype.isContiguous = function() {\n    return true;\n}\n\nRange.prototype.ranges = function() {\n    return [this];\n}\n\nRange.prototype._pushRanges = function(ranges) {\n    ranges.push(this);\n}\n\nRange.prototype.toString = function() {\n    return '[' + this._min + '-' + this._max + ']';\n}\n\nfunction _Compound(ranges) {\n    // given: a set of unsorted possibly overlapping ranges\n    // sort the input ranges\n    var sorted = ranges.sort(_rangeOrder);\n    // merge overlaps between adjacent ranges\n    var merged = [];\n    var current = sorted.shift();\n    sorted.forEach(function(range) {\n        if (range._min <= current._max) {\n            if (range._max > current._max) {\n                current._max = range._max;\n            }\n        }\n        else {\n            merged.push(current);\n            current = range;\n        }\n    });\n    merged.push(current);\n    this._ranges = merged;\n}\n\n_Compound.prototype.min = function() {\n    return this._ranges[0].min();\n}\n\n_Compound.prototype.max = function() {\n    return this._ranges[this._ranges.length - 1].max();\n}\n\n// returns the index of the first range that is not less than pos\n_Compound.prototype.lower_bound = function(pos) {\n    // first check if pos is out of range\n    var r = this.ranges();\n    if (pos > this.max()) return r.length;\n    if (pos < this.min()) return 0;\n    // do a binary search\n    var a=0, b=r.length - 1;\n    while (a <= b) {\n        var m = Math.floor((a+b)/2);\n        if (pos > r[m]._max) {\n            a = m+1;\n        }\n        else if (pos < r[m]._min) {\n            b = m-1;\n        }\n        else {\n            return m;\n        }\n    }\n    return a;\n}\n\n_Compound.prototype.contains = function(pos) {\n    var lb = this.lower_bound(pos);\n    if (lb < this._ranges.length && this._ranges[lb].contains(pos)) {\n        return true;\n    }\n    return false;\n}\n\n_Compound.prototype.insertRange = function(range) {\n    var lb = this.lower_bound(range._min);\n    if (lb === this._ranges.length) { // range follows this\n        this._ranges.push(range);\n        return;\n    }\n    \n    var r = this.ranges();\n    if (range._max < r[lb]._min) { // range preceeds lb\n        this._ranges.splice(lb,0,range);\n        return;\n    }\n\n    // range overlaps lb (at least)\n    if (r[lb]._min < range._min) range._min = r[lb]._min;\n    var ub = lb+1;\n    while (ub < r.length && r[ub]._min <= range._max) {\n        ub++;\n    }\n    ub--;\n    // ub is the upper bound of the new range\n    if (r[ub]._max > range._max) range._max = r[ub]._max;\n    \n    // splice range into this._ranges\n    this._ranges.splice(lb,ub-lb+1,range);\n    return;\n}\n\n_Compound.prototype.isContiguous = function() {\n    return this._ranges.length > 1;\n}\n\n_Compound.prototype.ranges = function() {\n    return this._ranges;\n}\n\n_Compound.prototype._pushRanges = function(ranges) {\n    for (var ri = 0; ri < this._ranges.length; ++ri)\n        ranges.push(this._ranges[ri]);\n}\n\n_Compound.prototype.toString = function() {\n    var s = '';\n    for (var r = 0; r < this._ranges.length; ++r) {\n        if (r>0) {\n            s = s + ',';\n        }\n        s = s + this._ranges[r].toString();\n    }\n    return s;\n}\n\nfunction union(s0, s1) {\n    if (! (s0 instanceof _Compound)) {\n        if (! (s0 instanceof Array))\n            s0 = [s0];\n        s0 = new _Compound(s0);\n    }\n    \n    if (s1)\n        s0.insertRange(s1);\n\n    return s0;\n}\n\nfunction intersection(s0, s1) {\n    var r0 = s0.ranges();\n    var r1 = s1.ranges();\n    var l0 = r0.length, l1 = r1.length;\n    var i0 = 0, i1 = 0;\n    var or = [];\n\n    while (i0 < l0 && i1 < l1) {\n        var s0 = r0[i0], s1 = r1[i1];\n        var lapMin = Math.max(s0.min(), s1.min());\n        var lapMax = Math.min(s0.max(), s1.max());\n        if (lapMax >= lapMin) {\n            or.push(new Range(lapMin, lapMax));\n        }\n        if (s0.max() > s1.max()) {\n            ++i1;\n        } else {\n            ++i0;\n        }\n    }\n    \n    if (or.length == 0) {\n        return null; // FIXME\n    } else if (or.length == 1) {\n        return or[0];\n    } else {\n        return new _Compound(or);\n    }\n}\n\nfunction coverage(s) {\n    var tot = 0;\n    var rl = s.ranges();\n    for (var ri = 0; ri < rl.length; ++ri) {\n        var r = rl[ri];\n        tot += (r.max() - r.min() + 1);\n    }\n    return tot;\n}\n\n\n\nfunction rangeOrder(a, b)\n{\n    if (a.min() < b.min()) {\n        return -1;\n    } else if (a.min() > b.min()) {\n        return 1;\n    } else if (a.max() < b.max()) {\n        return -1;\n    } else if (b.max() > a.max()) {\n        return 1;\n    } else {\n        return 0;\n    }\n}\n\nfunction _rangeOrder(a, b)\n{\n    if (a._min < b._min) {\n        return -1;\n    } else if (a._min > b._min) {\n        return 1;\n    } else if (a._max < b._max) {\n        return -1;\n    } else if (b._max > a._max) {\n        return 1;\n    } else {\n        return 0;\n    }\n}\n\nif (typeof(module) !== 'undefined') {\n    module.exports = {\n        Range: Range,\n        union: union,\n        intersection: intersection,\n        coverage: coverage,\n        rangeOver: rangeOrder,\n        _rangeOrder: _rangeOrder\n    }\n}","/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */\n\n// \n// Dalliance Genome Explorer\n// (c) Thomas Down 2006-2010\n//\n// utils.js: odds, sods, and ends.\n//\n\n\"use strict\";\n\nif (typeof(require) !== 'undefined') {\n    var sha1 = require('./sha1');\n    var b64_sha1 = sha1.b64_sha1;\n}\n\nvar NUM_REGEXP = new RegExp('[0-9]+');\n\nfunction stringToNumbersArray(str) {\n    var nums = new Array();\n    var m;\n    while (m = NUM_REGEXP.exec(str)) {\n        nums.push(m[0]);\n        str=str.substring(m.index + (m[0].length));\n    }\n    return nums;\n}\n\nvar STRICT_NUM_REGEXP = new RegExp('^[0-9]+$');\n\nfunction stringToInt(str) {\n    str = str.replace(new RegExp(',', 'g'), '');\n    if (!STRICT_NUM_REGEXP.test(str)) {\n        return null;\n    }\n    return str|0;\n}\n\nfunction pushnew(a, v) {\n    for (var i = 0; i < a.length; ++i) {\n        if (a[i] == v) {\n            return;\n        }\n    }\n    a.push(v);\n}\n\nfunction pusho(obj, k, v) {\n    if (obj[k]) {\n        obj[k].push(v);\n    } else {\n        obj[k] = [v];\n    }\n}\n\nfunction pushnewo(obj, k, v) {\n    var a = obj[k];\n    if (a) {\n        for (var i = 0; i < a.length; ++i) {    // indexOf requires JS16 :-(.\n            if (a[i] == v) {\n                return;\n            }\n        }\n        a.push(v);\n    } else {\n        obj[k] = [v];\n    }\n}\n\n\nfunction pick(a, b, c, d)\n{\n    if (a) {\n        return a;\n    } else if (b) {\n        return b;\n    } else if (c) {\n        return c;\n    } else if (d) {\n        return d;\n    }\n}\n\nfunction pushnew(l, o)\n{\n    for (var i = 0; i < l.length; ++i) {\n        if (l[i] == o) {\n            return;\n        }\n    }\n    l.push(o);\n}\n\n\n\nfunction arrayIndexOf(a, x) {\n    if (!a) {\n        return -1;\n    }\n\n    for (var i = 0; i < a.length; ++i) {\n        if (a[i] === x) {\n            return i;\n        }\n    }\n    return -1;\n}\n\nfunction arrayRemove(a, x) {\n    var i = arrayIndexOf(a, x);\n    if (i >= 0) {\n        a.splice(i, 1);\n        return true;\n    }\n    return false;\n}\n\n//\n// DOM utilities\n//\n\n\nfunction makeElement(tag, children, attribs, styles)\n{\n    var ele = document.createElement(tag);\n    if (children) {\n        if (! (children instanceof Array)) {\n            children = [children];\n        }\n        for (var i = 0; i < children.length; ++i) {\n            var c = children[i];\n            if (c) {\n                if (typeof c == 'string') {\n                    c = document.createTextNode(c);\n                } else if (typeof c == 'number') {\n                    c = document.createTextNode('' + c);\n                }\n                ele.appendChild(c);\n            }\n        }\n    }\n    \n    if (attribs) {\n        for (var l in attribs) {\n            try {\n                ele[l] = attribs[l];\n            } catch (e) {\n                console.log('error setting ' + l);\n                throw(e);\n            }\n        }\n    }\n    if (styles) {\n        for (var l in styles) {\n            ele.style[l] = styles[l];\n        }\n    }\n    return ele;\n}\n\nfunction makeElementNS(namespace, tag, children, attribs)\n{\n    var ele = document.createElementNS(namespace, tag);\n    if (children) {\n        if (! (children instanceof Array)) {\n            children = [children];\n        }\n        for (var i = 0; i < children.length; ++i) {\n            var c = children[i];\n            if (typeof c == 'string') {\n                c = document.createTextNode(c);\n            }\n            ele.appendChild(c);\n        }\n    }\n    \n    setAttrs(ele, attribs);\n    return ele;\n}\n\nvar attr_name_cache = {};\n\nfunction setAttr(node, key, value)\n{\n    var attr = attr_name_cache[key];\n    if (!attr) {\n        var _attr = '';\n        for (var c = 0; c < key.length; ++c) {\n            var cc = key.substring(c, c+1);\n            var lcc = cc.toLowerCase();\n            if (lcc != cc) {\n                _attr = _attr + '-' + lcc;\n            } else {\n                _attr = _attr + cc;\n            }\n        }\n        attr_name_cache[key] = _attr;\n        attr = _attr;\n    }\n    node.setAttribute(attr, value);\n}\n\nfunction setAttrs(node, attribs)\n{\n    if (attribs) {\n        for (var l in attribs) {\n            setAttr(node, l, attribs[l]);\n        }\n    }\n}\n\n\n\nfunction removeChildren(node)\n{\n    if (!node || !node.childNodes) {\n        return;\n    }\n\n    while (node.childNodes.length > 0) {\n        node.removeChild(node.firstChild);\n    }\n}\n\n\n\n//\n// WARNING: not for general use!\n//\n\nfunction miniJSONify(o, exc) {\n    if (typeof o === 'undefined') {\n        return 'undefined';\n    } else if (o == null) {\n        return 'null';\n    } else if (typeof o == 'string') {\n        return \"'\" + o + \"'\";\n    } else if (typeof o == 'number') {\n        return \"\" + o;\n    } else if (typeof o == 'boolean') {\n        return \"\" + o;\n    } else if (typeof o == 'object') {\n        if (o instanceof Array) {\n            var s = null;\n            for (var i = 0; i < o.length; ++i) {\n                s = (s == null ? '' : (s + ', ')) + miniJSONify(o[i], exc);\n            }\n            return '[' + (s?s:'') + ']';\n        } else {\n            exc = exc || {};\n            var s = null;\n            for (var k in o) {\n                if (exc[k])\n                    continue;\n                if (k != undefined && typeof(o[k]) != 'function') {\n                    s = (s == null ? '' : (s + ', ')) + k + ': ' + miniJSONify(o[k], exc);\n                }\n            }\n            return '{' + (s?s:'') + '}';\n        }\n    } else {\n        return (typeof o);\n    }\n}\n\nfunction shallowCopy(o) {\n    var n = {};\n    for (var k in o) {\n        n[k] = o[k];\n    }\n    return n;\n}\n\nfunction Observed(x) {\n    this.value = x;\n    this.listeners = [];\n}\n\nObserved.prototype.addListener = function(f) {\n    this.listeners.push(f);\n}\n\nObserved.prototype.addListenerAndFire = function(f) {\n    this.listeners.push(f);\n    f(this.value);\n}\n\nObserved.prototype.removeListener = function(f) {\n    arrayRemove(this.listeners, f);\n}\n\nObserved.prototype.get = function() {\n    return this.value;\n}\n\nObserved.prototype.set = function(x) {\n    this.value = x;\n    for (var i = 0; i < this.listeners.length; ++i) {\n        this.listeners[i](x);\n    }\n}\n\nfunction Awaited() {\n    this.queue = [];\n}\n\nAwaited.prototype.provide = function(x) {\n    if (this.res !== undefined) {\n        throw \"Resource has already been provided.\";\n    }\n\n    this.res = x;\n    for (var i = 0; i < this.queue.length; ++i) {\n        this.queue[i](x);\n    }\n    this.queue = null;   // avoid leaking closures.\n}\n\nAwaited.prototype.await = function(f) {\n    if (this.res !== undefined) {\n        f(this.res);\n        return this.res;\n    } else {\n        this.queue.push(f);\n    }\n}\n\nvar __dalliance_saltSeed = 0;\n\nfunction saltURL(url) {\n    return url + '?salt=' + b64_sha1('' + Date.now() + ',' + (++__dalliance_saltSeed));\n}\n\nfunction textXHR(url, callback, opts) {\n    if (opts && opts.salt) \n        url = saltURL(url);\n\n    try {\n        var timeout;\n        if (opts.timeout) {\n            timeout = setTimeout(\n                function() {\n                    console.log('timing out ' + url);\n                    req.abort();\n                    return callback(null, 'Timeout');\n                },\n                opts.timeout\n            );\n        }\n\n        var req = new XMLHttpRequest();\n        req.onreadystatechange = function() {\n    \t    if (req.readyState == 4) {\n                if (timeout)\n                    clearTimeout(timeout);\n    \t        if (req.status < 200 || req.status >= 300) {\n    \t\t    callback(null, 'Error code ' + req.status);\n    \t        } else {\n    \t\t    callback(req.responseText);\n    \t        }\n    \t    }\n        };\n        \n        req.open('GET', url, true);\n        req.responseType = 'text';\n\n        if (opts && opts.credentials) {\n            req.withCredentials = true;\n        }\n        req.send('');\n    } catch (e) {\n        callback(null, 'Exception ' + e);\n    }\n}\n\nfunction relativeURL(base, rel) {\n    // FIXME quite naive -- good enough for trackhubs?\n\n    if (rel.indexOf('http:') == 0 || rel.indexOf('https:') == 0) {\n        return rel;\n    }\n\n    var li = base.lastIndexOf('/');\n    if (li >= 0) {\n        return base.substr(0, li + 1) + rel;\n    } else {\n        return rel;\n    }\n}\n\nvar AMINO_ACID_TRANSLATION = {\n    'TTT': 'F',\n    'TTC': 'F',\n    'TTA': 'L',\n    'TTG': 'L',\n    'CTT': 'L',\n    'CTC': 'L',\n    'CTA': 'L',\n    'CTG': 'L',\n    'ATT': 'I',\n    'ATC': 'I',\n    'ATA': 'I',\n    'ATG': 'M',\n    'GTT': 'V',\n    'GTC': 'V',\n    'GTA': 'V',\n    'GTG': 'V',\n    'TCT': 'S',\n    'TCC': 'S',\n    'TCA': 'S',\n    'TCG': 'S',\n    'CCT': 'P',\n    'CCC': 'P',\n    'CCA': 'P',\n    'CCG': 'P',\n    'ACT': 'T',\n    'ACC': 'T',\n    'ACA': 'T',\n    'ACG': 'T',\n    'GCT': 'A',\n    'GCC': 'A',\n    'GCA': 'A',\n    'GCG': 'A',\n    'TAT': 'Y',\n    'TAC': 'Y',\n    'TAA': '*',  // stop\n    'TAG': '*',  // stop\n    'CAT': 'H',\n    'CAC': 'H',\n    'CAA': 'Q',\n    'CAG': 'Q',\n    'AAT': 'N',\n    'AAC': 'N',\n    'AAA': 'K',\n    'AAG': 'K',\n    'GAT': 'D',\n    'GAC': 'D',\n    'GAA': 'E',\n    'GAG': 'E',\n    'TGT': 'C',\n    'TGC': 'C',\n    'TGA': '*',  // stop\n    'TGG': 'W',\n    'CGT': 'R',\n    'CGC': 'R',\n    'CGA': 'R',\n    'CGG': 'R',\n    'AGT': 'S',\n    'AGC': 'S',\n    'AGA': 'R',\n    'AGG': 'R',\n    'GGT': 'G',\n    'GGC': 'G',\n    'GGA': 'G',\n    'GGG': 'G'\n}\n\nfunction resolveUrlToPage(rel) {\n    return makeElement('a', null, {href: rel}).href;\n}\n\n//\n// Missing APIs\n// \n\nif (!('trim' in String.prototype)) {\n    String.prototype.trim = function() {\n        return this.replace(/^\\s+/, '').replace(/\\s+$/, '');\n    };\n}\n\nif (typeof(module) !== 'undefined') {\n    module.exports = {\n        textXHR: textXHR,\n        relativeURL: relativeURL,\n        resolveUrlToPage: resolveUrlToPage,\n        shallowCopy: shallowCopy,\n        pusho: pusho,\n        pushnew: pushnew,\n        pushnewo: pushnewo,\n        arrayIndexOf: arrayIndexOf,\n        pick: pick,\n\n        makeElement: makeElement,\n        makeElementNS: makeElementNS,\n        removeChildren: removeChildren,\n\n        miniJSONify: miniJSONify,\n\n        Observed: Observed,\n        Awaited: Awaited,\n\n        AMINO_ACID_TRANSLATION: AMINO_ACID_TRANSLATION\n    }\n}\n","// shim for using process in browser\n\nvar process = module.exports = {};\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = setTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    clearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        setTimeout(drainQueue, 0);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","/*!\n * @overview es6-promise - a tiny implementation of Promises/A+.\n * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)\n * @license   Licensed under MIT license\n *            See https://raw.githubusercontent.com/jakearchibald/es6-promise/master/LICENSE\n * @version   3.0.2\n */\n\n(function() {\n    \"use strict\";\n    function lib$es6$promise$utils$$objectOrFunction(x) {\n      return typeof x === 'function' || (typeof x === 'object' && x !== null);\n    }\n\n    function lib$es6$promise$utils$$isFunction(x) {\n      return typeof x === 'function';\n    }\n\n    function lib$es6$promise$utils$$isMaybeThenable(x) {\n      return typeof x === 'object' && x !== null;\n    }\n\n    var lib$es6$promise$utils$$_isArray;\n    if (!Array.isArray) {\n      lib$es6$promise$utils$$_isArray = function (x) {\n        return Object.prototype.toString.call(x) === '[object Array]';\n      };\n    } else {\n      lib$es6$promise$utils$$_isArray = Array.isArray;\n    }\n\n    var lib$es6$promise$utils$$isArray = lib$es6$promise$utils$$_isArray;\n    var lib$es6$promise$asap$$len = 0;\n    var lib$es6$promise$asap$$toString = {}.toString;\n    var lib$es6$promise$asap$$vertxNext;\n    var lib$es6$promise$asap$$customSchedulerFn;\n\n    var lib$es6$promise$asap$$asap = function asap(callback, arg) {\n      lib$es6$promise$asap$$queue[lib$es6$promise$asap$$len] = callback;\n      lib$es6$promise$asap$$queue[lib$es6$promise$asap$$len + 1] = arg;\n      lib$es6$promise$asap$$len += 2;\n      if (lib$es6$promise$asap$$len === 2) {\n        // If len is 2, that means that we need to schedule an async flush.\n        // If additional callbacks are queued before the queue is flushed, they\n        // will be processed by this flush that we are scheduling.\n        if (lib$es6$promise$asap$$customSchedulerFn) {\n          lib$es6$promise$asap$$customSchedulerFn(lib$es6$promise$asap$$flush);\n        } else {\n          lib$es6$promise$asap$$scheduleFlush();\n        }\n      }\n    }\n\n    function lib$es6$promise$asap$$setScheduler(scheduleFn) {\n      lib$es6$promise$asap$$customSchedulerFn = scheduleFn;\n    }\n\n    function lib$es6$promise$asap$$setAsap(asapFn) {\n      lib$es6$promise$asap$$asap = asapFn;\n    }\n\n    var lib$es6$promise$asap$$browserWindow = (typeof window !== 'undefined') ? window : undefined;\n    var lib$es6$promise$asap$$browserGlobal = lib$es6$promise$asap$$browserWindow || {};\n    var lib$es6$promise$asap$$BrowserMutationObserver = lib$es6$promise$asap$$browserGlobal.MutationObserver || lib$es6$promise$asap$$browserGlobal.WebKitMutationObserver;\n    var lib$es6$promise$asap$$isNode = typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';\n\n    // test for web worker but not in IE10\n    var lib$es6$promise$asap$$isWorker = typeof Uint8ClampedArray !== 'undefined' &&\n      typeof importScripts !== 'undefined' &&\n      typeof MessageChannel !== 'undefined';\n\n    // node\n    function lib$es6$promise$asap$$useNextTick() {\n      // node version 0.10.x displays a deprecation warning when nextTick is used recursively\n      // see https://github.com/cujojs/when/issues/410 for details\n      return function() {\n        process.nextTick(lib$es6$promise$asap$$flush);\n      };\n    }\n\n    // vertx\n    function lib$es6$promise$asap$$useVertxTimer() {\n      return function() {\n        lib$es6$promise$asap$$vertxNext(lib$es6$promise$asap$$flush);\n      };\n    }\n\n    function lib$es6$promise$asap$$useMutationObserver() {\n      var iterations = 0;\n      var observer = new lib$es6$promise$asap$$BrowserMutationObserver(lib$es6$promise$asap$$flush);\n      var node = document.createTextNode('');\n      observer.observe(node, { characterData: true });\n\n      return function() {\n        node.data = (iterations = ++iterations % 2);\n      };\n    }\n\n    // web worker\n    function lib$es6$promise$asap$$useMessageChannel() {\n      var channel = new MessageChannel();\n      channel.port1.onmessage = lib$es6$promise$asap$$flush;\n      return function () {\n        channel.port2.postMessage(0);\n      };\n    }\n\n    function lib$es6$promise$asap$$useSetTimeout() {\n      return function() {\n        setTimeout(lib$es6$promise$asap$$flush, 1);\n      };\n    }\n\n    var lib$es6$promise$asap$$queue = new Array(1000);\n    function lib$es6$promise$asap$$flush() {\n      for (var i = 0; i < lib$es6$promise$asap$$len; i+=2) {\n        var callback = lib$es6$promise$asap$$queue[i];\n        var arg = lib$es6$promise$asap$$queue[i+1];\n\n        callback(arg);\n\n        lib$es6$promise$asap$$queue[i] = undefined;\n        lib$es6$promise$asap$$queue[i+1] = undefined;\n      }\n\n      lib$es6$promise$asap$$len = 0;\n    }\n\n    function lib$es6$promise$asap$$attemptVertx() {\n      try {\n        var r = require;\n        var vertx = r('vertx');\n        lib$es6$promise$asap$$vertxNext = vertx.runOnLoop || vertx.runOnContext;\n        return lib$es6$promise$asap$$useVertxTimer();\n      } catch(e) {\n        return lib$es6$promise$asap$$useSetTimeout();\n      }\n    }\n\n    var lib$es6$promise$asap$$scheduleFlush;\n    // Decide what async method to use to triggering processing of queued callbacks:\n    if (lib$es6$promise$asap$$isNode) {\n      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useNextTick();\n    } else if (lib$es6$promise$asap$$BrowserMutationObserver) {\n      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useMutationObserver();\n    } else if (lib$es6$promise$asap$$isWorker) {\n      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useMessageChannel();\n    } else if (lib$es6$promise$asap$$browserWindow === undefined && typeof require === 'function') {\n      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$attemptVertx();\n    } else {\n      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useSetTimeout();\n    }\n\n    function lib$es6$promise$$internal$$noop() {}\n\n    var lib$es6$promise$$internal$$PENDING   = void 0;\n    var lib$es6$promise$$internal$$FULFILLED = 1;\n    var lib$es6$promise$$internal$$REJECTED  = 2;\n\n    var lib$es6$promise$$internal$$GET_THEN_ERROR = new lib$es6$promise$$internal$$ErrorObject();\n\n    function lib$es6$promise$$internal$$selfFulfillment() {\n      return new TypeError(\"You cannot resolve a promise with itself\");\n    }\n\n    function lib$es6$promise$$internal$$cannotReturnOwn() {\n      return new TypeError('A promises callback cannot return that same promise.');\n    }\n\n    function lib$es6$promise$$internal$$getThen(promise) {\n      try {\n        return promise.then;\n      } catch(error) {\n        lib$es6$promise$$internal$$GET_THEN_ERROR.error = error;\n        return lib$es6$promise$$internal$$GET_THEN_ERROR;\n      }\n    }\n\n    function lib$es6$promise$$internal$$tryThen(then, value, fulfillmentHandler, rejectionHandler) {\n      try {\n        then.call(value, fulfillmentHandler, rejectionHandler);\n      } catch(e) {\n        return e;\n      }\n    }\n\n    function lib$es6$promise$$internal$$handleForeignThenable(promise, thenable, then) {\n       lib$es6$promise$asap$$asap(function(promise) {\n        var sealed = false;\n        var error = lib$es6$promise$$internal$$tryThen(then, thenable, function(value) {\n          if (sealed) { return; }\n          sealed = true;\n          if (thenable !== value) {\n            lib$es6$promise$$internal$$resolve(promise, value);\n          } else {\n            lib$es6$promise$$internal$$fulfill(promise, value);\n          }\n        }, function(reason) {\n          if (sealed) { return; }\n          sealed = true;\n\n          lib$es6$promise$$internal$$reject(promise, reason);\n        }, 'Settle: ' + (promise._label || ' unknown promise'));\n\n        if (!sealed && error) {\n          sealed = true;\n          lib$es6$promise$$internal$$reject(promise, error);\n        }\n      }, promise);\n    }\n\n    function lib$es6$promise$$internal$$handleOwnThenable(promise, thenable) {\n      if (thenable._state === lib$es6$promise$$internal$$FULFILLED) {\n        lib$es6$promise$$internal$$fulfill(promise, thenable._result);\n      } else if (thenable._state === lib$es6$promise$$internal$$REJECTED) {\n        lib$es6$promise$$internal$$reject(promise, thenable._result);\n      } else {\n        lib$es6$promise$$internal$$subscribe(thenable, undefined, function(value) {\n          lib$es6$promise$$internal$$resolve(promise, value);\n        }, function(reason) {\n          lib$es6$promise$$internal$$reject(promise, reason);\n        });\n      }\n    }\n\n    function lib$es6$promise$$internal$$handleMaybeThenable(promise, maybeThenable) {\n      if (maybeThenable.constructor === promise.constructor) {\n        lib$es6$promise$$internal$$handleOwnThenable(promise, maybeThenable);\n      } else {\n        var then = lib$es6$promise$$internal$$getThen(maybeThenable);\n\n        if (then === lib$es6$promise$$internal$$GET_THEN_ERROR) {\n          lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$GET_THEN_ERROR.error);\n        } else if (then === undefined) {\n          lib$es6$promise$$internal$$fulfill(promise, maybeThenable);\n        } else if (lib$es6$promise$utils$$isFunction(then)) {\n          lib$es6$promise$$internal$$handleForeignThenable(promise, maybeThenable, then);\n        } else {\n          lib$es6$promise$$internal$$fulfill(promise, maybeThenable);\n        }\n      }\n    }\n\n    function lib$es6$promise$$internal$$resolve(promise, value) {\n      if (promise === value) {\n        lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$selfFulfillment());\n      } else if (lib$es6$promise$utils$$objectOrFunction(value)) {\n        lib$es6$promise$$internal$$handleMaybeThenable(promise, value);\n      } else {\n        lib$es6$promise$$internal$$fulfill(promise, value);\n      }\n    }\n\n    function lib$es6$promise$$internal$$publishRejection(promise) {\n      if (promise._onerror) {\n        promise._onerror(promise._result);\n      }\n\n      lib$es6$promise$$internal$$publish(promise);\n    }\n\n    function lib$es6$promise$$internal$$fulfill(promise, value) {\n      if (promise._state !== lib$es6$promise$$internal$$PENDING) { return; }\n\n      promise._result = value;\n      promise._state = lib$es6$promise$$internal$$FULFILLED;\n\n      if (promise._subscribers.length !== 0) {\n        lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publish, promise);\n      }\n    }\n\n    function lib$es6$promise$$internal$$reject(promise, reason) {\n      if (promise._state !== lib$es6$promise$$internal$$PENDING) { return; }\n      promise._state = lib$es6$promise$$internal$$REJECTED;\n      promise._result = reason;\n\n      lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publishRejection, promise);\n    }\n\n    function lib$es6$promise$$internal$$subscribe(parent, child, onFulfillment, onRejection) {\n      var subscribers = parent._subscribers;\n      var length = subscribers.length;\n\n      parent._onerror = null;\n\n      subscribers[length] = child;\n      subscribers[length + lib$es6$promise$$internal$$FULFILLED] = onFulfillment;\n      subscribers[length + lib$es6$promise$$internal$$REJECTED]  = onRejection;\n\n      if (length === 0 && parent._state) {\n        lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publish, parent);\n      }\n    }\n\n    function lib$es6$promise$$internal$$publish(promise) {\n      var subscribers = promise._subscribers;\n      var settled = promise._state;\n\n      if (subscribers.length === 0) { return; }\n\n      var child, callback, detail = promise._result;\n\n      for (var i = 0; i < subscribers.length; i += 3) {\n        child = subscribers[i];\n        callback = subscribers[i + settled];\n\n        if (child) {\n          lib$es6$promise$$internal$$invokeCallback(settled, child, callback, detail);\n        } else {\n          callback(detail);\n        }\n      }\n\n      promise._subscribers.length = 0;\n    }\n\n    function lib$es6$promise$$internal$$ErrorObject() {\n      this.error = null;\n    }\n\n    var lib$es6$promise$$internal$$TRY_CATCH_ERROR = new lib$es6$promise$$internal$$ErrorObject();\n\n    function lib$es6$promise$$internal$$tryCatch(callback, detail) {\n      try {\n        return callback(detail);\n      } catch(e) {\n        lib$es6$promise$$internal$$TRY_CATCH_ERROR.error = e;\n        return lib$es6$promise$$internal$$TRY_CATCH_ERROR;\n      }\n    }\n\n    function lib$es6$promise$$internal$$invokeCallback(settled, promise, callback, detail) {\n      var hasCallback = lib$es6$promise$utils$$isFunction(callback),\n          value, error, succeeded, failed;\n\n      if (hasCallback) {\n        value = lib$es6$promise$$internal$$tryCatch(callback, detail);\n\n        if (value === lib$es6$promise$$internal$$TRY_CATCH_ERROR) {\n          failed = true;\n          error = value.error;\n          value = null;\n        } else {\n          succeeded = true;\n        }\n\n        if (promise === value) {\n          lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$cannotReturnOwn());\n          return;\n        }\n\n      } else {\n        value = detail;\n        succeeded = true;\n      }\n\n      if (promise._state !== lib$es6$promise$$internal$$PENDING) {\n        // noop\n      } else if (hasCallback && succeeded) {\n        lib$es6$promise$$internal$$resolve(promise, value);\n      } else if (failed) {\n        lib$es6$promise$$internal$$reject(promise, error);\n      } else if (settled === lib$es6$promise$$internal$$FULFILLED) {\n        lib$es6$promise$$internal$$fulfill(promise, value);\n      } else if (settled === lib$es6$promise$$internal$$REJECTED) {\n        lib$es6$promise$$internal$$reject(promise, value);\n      }\n    }\n\n    function lib$es6$promise$$internal$$initializePromise(promise, resolver) {\n      try {\n        resolver(function resolvePromise(value){\n          lib$es6$promise$$internal$$resolve(promise, value);\n        }, function rejectPromise(reason) {\n          lib$es6$promise$$internal$$reject(promise, reason);\n        });\n      } catch(e) {\n        lib$es6$promise$$internal$$reject(promise, e);\n      }\n    }\n\n    function lib$es6$promise$enumerator$$Enumerator(Constructor, input) {\n      var enumerator = this;\n\n      enumerator._instanceConstructor = Constructor;\n      enumerator.promise = new Constructor(lib$es6$promise$$internal$$noop);\n\n      if (enumerator._validateInput(input)) {\n        enumerator._input     = input;\n        enumerator.length     = input.length;\n        enumerator._remaining = input.length;\n\n        enumerator._init();\n\n        if (enumerator.length === 0) {\n          lib$es6$promise$$internal$$fulfill(enumerator.promise, enumerator._result);\n        } else {\n          enumerator.length = enumerator.length || 0;\n          enumerator._enumerate();\n          if (enumerator._remaining === 0) {\n            lib$es6$promise$$internal$$fulfill(enumerator.promise, enumerator._result);\n          }\n        }\n      } else {\n        lib$es6$promise$$internal$$reject(enumerator.promise, enumerator._validationError());\n      }\n    }\n\n    lib$es6$promise$enumerator$$Enumerator.prototype._validateInput = function(input) {\n      return lib$es6$promise$utils$$isArray(input);\n    };\n\n    lib$es6$promise$enumerator$$Enumerator.prototype._validationError = function() {\n      return new Error('Array Methods must be provided an Array');\n    };\n\n    lib$es6$promise$enumerator$$Enumerator.prototype._init = function() {\n      this._result = new Array(this.length);\n    };\n\n    var lib$es6$promise$enumerator$$default = lib$es6$promise$enumerator$$Enumerator;\n\n    lib$es6$promise$enumerator$$Enumerator.prototype._enumerate = function() {\n      var enumerator = this;\n\n      var length  = enumerator.length;\n      var promise = enumerator.promise;\n      var input   = enumerator._input;\n\n      for (var i = 0; promise._state === lib$es6$promise$$internal$$PENDING && i < length; i++) {\n        enumerator._eachEntry(input[i], i);\n      }\n    };\n\n    lib$es6$promise$enumerator$$Enumerator.prototype._eachEntry = function(entry, i) {\n      var enumerator = this;\n      var c = enumerator._instanceConstructor;\n\n      if (lib$es6$promise$utils$$isMaybeThenable(entry)) {\n        if (entry.constructor === c && entry._state !== lib$es6$promise$$internal$$PENDING) {\n          entry._onerror = null;\n          enumerator._settledAt(entry._state, i, entry._result);\n        } else {\n          enumerator._willSettleAt(c.resolve(entry), i);\n        }\n      } else {\n        enumerator._remaining--;\n        enumerator._result[i] = entry;\n      }\n    };\n\n    lib$es6$promise$enumerator$$Enumerator.prototype._settledAt = function(state, i, value) {\n      var enumerator = this;\n      var promise = enumerator.promise;\n\n      if (promise._state === lib$es6$promise$$internal$$PENDING) {\n        enumerator._remaining--;\n\n        if (state === lib$es6$promise$$internal$$REJECTED) {\n          lib$es6$promise$$internal$$reject(promise, value);\n        } else {\n          enumerator._result[i] = value;\n        }\n      }\n\n      if (enumerator._remaining === 0) {\n        lib$es6$promise$$internal$$fulfill(promise, enumerator._result);\n      }\n    };\n\n    lib$es6$promise$enumerator$$Enumerator.prototype._willSettleAt = function(promise, i) {\n      var enumerator = this;\n\n      lib$es6$promise$$internal$$subscribe(promise, undefined, function(value) {\n        enumerator._settledAt(lib$es6$promise$$internal$$FULFILLED, i, value);\n      }, function(reason) {\n        enumerator._settledAt(lib$es6$promise$$internal$$REJECTED, i, reason);\n      });\n    };\n    function lib$es6$promise$promise$all$$all(entries) {\n      return new lib$es6$promise$enumerator$$default(this, entries).promise;\n    }\n    var lib$es6$promise$promise$all$$default = lib$es6$promise$promise$all$$all;\n    function lib$es6$promise$promise$race$$race(entries) {\n      /*jshint validthis:true */\n      var Constructor = this;\n\n      var promise = new Constructor(lib$es6$promise$$internal$$noop);\n\n      if (!lib$es6$promise$utils$$isArray(entries)) {\n        lib$es6$promise$$internal$$reject(promise, new TypeError('You must pass an array to race.'));\n        return promise;\n      }\n\n      var length = entries.length;\n\n      function onFulfillment(value) {\n        lib$es6$promise$$internal$$resolve(promise, value);\n      }\n\n      function onRejection(reason) {\n        lib$es6$promise$$internal$$reject(promise, reason);\n      }\n\n      for (var i = 0; promise._state === lib$es6$promise$$internal$$PENDING && i < length; i++) {\n        lib$es6$promise$$internal$$subscribe(Constructor.resolve(entries[i]), undefined, onFulfillment, onRejection);\n      }\n\n      return promise;\n    }\n    var lib$es6$promise$promise$race$$default = lib$es6$promise$promise$race$$race;\n    function lib$es6$promise$promise$resolve$$resolve(object) {\n      /*jshint validthis:true */\n      var Constructor = this;\n\n      if (object && typeof object === 'object' && object.constructor === Constructor) {\n        return object;\n      }\n\n      var promise = new Constructor(lib$es6$promise$$internal$$noop);\n      lib$es6$promise$$internal$$resolve(promise, object);\n      return promise;\n    }\n    var lib$es6$promise$promise$resolve$$default = lib$es6$promise$promise$resolve$$resolve;\n    function lib$es6$promise$promise$reject$$reject(reason) {\n      /*jshint validthis:true */\n      var Constructor = this;\n      var promise = new Constructor(lib$es6$promise$$internal$$noop);\n      lib$es6$promise$$internal$$reject(promise, reason);\n      return promise;\n    }\n    var lib$es6$promise$promise$reject$$default = lib$es6$promise$promise$reject$$reject;\n\n    var lib$es6$promise$promise$$counter = 0;\n\n    function lib$es6$promise$promise$$needsResolver() {\n      throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');\n    }\n\n    function lib$es6$promise$promise$$needsNew() {\n      throw new TypeError(\"Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.\");\n    }\n\n    var lib$es6$promise$promise$$default = lib$es6$promise$promise$$Promise;\n    /**\n      Promise objects represent the eventual result of an asynchronous operation. The\n      primary way of interacting with a promise is through its `then` method, which\n      registers callbacks to receive either a promise's eventual value or the reason\n      why the promise cannot be fulfilled.\n\n      Terminology\n      -----------\n\n      - `promise` is an object or function with a `then` method whose behavior conforms to this specification.\n      - `thenable` is an object or function that defines a `then` method.\n      - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).\n      - `exception` is a value that is thrown using the throw statement.\n      - `reason` is a value that indicates why a promise was rejected.\n      - `settled` the final resting state of a promise, fulfilled or rejected.\n\n      A promise can be in one of three states: pending, fulfilled, or rejected.\n\n      Promises that are fulfilled have a fulfillment value and are in the fulfilled\n      state.  Promises that are rejected have a rejection reason and are in the\n      rejected state.  A fulfillment value is never a thenable.\n\n      Promises can also be said to *resolve* a value.  If this value is also a\n      promise, then the original promise's settled state will match the value's\n      settled state.  So a promise that *resolves* a promise that rejects will\n      itself reject, and a promise that *resolves* a promise that fulfills will\n      itself fulfill.\n\n\n      Basic Usage:\n      ------------\n\n      ```js\n      var promise = new Promise(function(resolve, reject) {\n        // on success\n        resolve(value);\n\n        // on failure\n        reject(reason);\n      });\n\n      promise.then(function(value) {\n        // on fulfillment\n      }, function(reason) {\n        // on rejection\n      });\n      ```\n\n      Advanced Usage:\n      ---------------\n\n      Promises shine when abstracting away asynchronous interactions such as\n      `XMLHttpRequest`s.\n\n      ```js\n      function getJSON(url) {\n        return new Promise(function(resolve, reject){\n          var xhr = new XMLHttpRequest();\n\n          xhr.open('GET', url);\n          xhr.onreadystatechange = handler;\n          xhr.responseType = 'json';\n          xhr.setRequestHeader('Accept', 'application/json');\n          xhr.send();\n\n          function handler() {\n            if (this.readyState === this.DONE) {\n              if (this.status === 200) {\n                resolve(this.response);\n              } else {\n                reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));\n              }\n            }\n          };\n        });\n      }\n\n      getJSON('/posts.json').then(function(json) {\n        // on fulfillment\n      }, function(reason) {\n        // on rejection\n      });\n      ```\n\n      Unlike callbacks, promises are great composable primitives.\n\n      ```js\n      Promise.all([\n        getJSON('/posts'),\n        getJSON('/comments')\n      ]).then(function(values){\n        values[0] // => postsJSON\n        values[1] // => commentsJSON\n\n        return values;\n      });\n      ```\n\n      @class Promise\n      @param {function} resolver\n      Useful for tooling.\n      @constructor\n    */\n    function lib$es6$promise$promise$$Promise(resolver) {\n      this._id = lib$es6$promise$promise$$counter++;\n      this._state = undefined;\n      this._result = undefined;\n      this._subscribers = [];\n\n      if (lib$es6$promise$$internal$$noop !== resolver) {\n        if (!lib$es6$promise$utils$$isFunction(resolver)) {\n          lib$es6$promise$promise$$needsResolver();\n        }\n\n        if (!(this instanceof lib$es6$promise$promise$$Promise)) {\n          lib$es6$promise$promise$$needsNew();\n        }\n\n        lib$es6$promise$$internal$$initializePromise(this, resolver);\n      }\n    }\n\n    lib$es6$promise$promise$$Promise.all = lib$es6$promise$promise$all$$default;\n    lib$es6$promise$promise$$Promise.race = lib$es6$promise$promise$race$$default;\n    lib$es6$promise$promise$$Promise.resolve = lib$es6$promise$promise$resolve$$default;\n    lib$es6$promise$promise$$Promise.reject = lib$es6$promise$promise$reject$$default;\n    lib$es6$promise$promise$$Promise._setScheduler = lib$es6$promise$asap$$setScheduler;\n    lib$es6$promise$promise$$Promise._setAsap = lib$es6$promise$asap$$setAsap;\n    lib$es6$promise$promise$$Promise._asap = lib$es6$promise$asap$$asap;\n\n    lib$es6$promise$promise$$Promise.prototype = {\n      constructor: lib$es6$promise$promise$$Promise,\n\n    /**\n      The primary way of interacting with a promise is through its `then` method,\n      which registers callbacks to receive either a promise's eventual value or the\n      reason why the promise cannot be fulfilled.\n\n      ```js\n      findUser().then(function(user){\n        // user is available\n      }, function(reason){\n        // user is unavailable, and you are given the reason why\n      });\n      ```\n\n      Chaining\n      --------\n\n      The return value of `then` is itself a promise.  This second, 'downstream'\n      promise is resolved with the return value of the first promise's fulfillment\n      or rejection handler, or rejected if the handler throws an exception.\n\n      ```js\n      findUser().then(function (user) {\n        return user.name;\n      }, function (reason) {\n        return 'default name';\n      }).then(function (userName) {\n        // If `findUser` fulfilled, `userName` will be the user's name, otherwise it\n        // will be `'default name'`\n      });\n\n      findUser().then(function (user) {\n        throw new Error('Found user, but still unhappy');\n      }, function (reason) {\n        throw new Error('`findUser` rejected and we're unhappy');\n      }).then(function (value) {\n        // never reached\n      }, function (reason) {\n        // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.\n        // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.\n      });\n      ```\n      If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.\n\n      ```js\n      findUser().then(function (user) {\n        throw new PedagogicalException('Upstream error');\n      }).then(function (value) {\n        // never reached\n      }).then(function (value) {\n        // never reached\n      }, function (reason) {\n        // The `PedgagocialException` is propagated all the way down to here\n      });\n      ```\n\n      Assimilation\n      ------------\n\n      Sometimes the value you want to propagate to a downstream promise can only be\n      retrieved asynchronously. This can be achieved by returning a promise in the\n      fulfillment or rejection handler. The downstream promise will then be pending\n      until the returned promise is settled. This is called *assimilation*.\n\n      ```js\n      findUser().then(function (user) {\n        return findCommentsByAuthor(user);\n      }).then(function (comments) {\n        // The user's comments are now available\n      });\n      ```\n\n      If the assimliated promise rejects, then the downstream promise will also reject.\n\n      ```js\n      findUser().then(function (user) {\n        return findCommentsByAuthor(user);\n      }).then(function (comments) {\n        // If `findCommentsByAuthor` fulfills, we'll have the value here\n      }, function (reason) {\n        // If `findCommentsByAuthor` rejects, we'll have the reason here\n      });\n      ```\n\n      Simple Example\n      --------------\n\n      Synchronous Example\n\n      ```javascript\n      var result;\n\n      try {\n        result = findResult();\n        // success\n      } catch(reason) {\n        // failure\n      }\n      ```\n\n      Errback Example\n\n      ```js\n      findResult(function(result, err){\n        if (err) {\n          // failure\n        } else {\n          // success\n        }\n      });\n      ```\n\n      Promise Example;\n\n      ```javascript\n      findResult().then(function(result){\n        // success\n      }, function(reason){\n        // failure\n      });\n      ```\n\n      Advanced Example\n      --------------\n\n      Synchronous Example\n\n      ```javascript\n      var author, books;\n\n      try {\n        author = findAuthor();\n        books  = findBooksByAuthor(author);\n        // success\n      } catch(reason) {\n        // failure\n      }\n      ```\n\n      Errback Example\n\n      ```js\n\n      function foundBooks(books) {\n\n      }\n\n      function failure(reason) {\n\n      }\n\n      findAuthor(function(author, err){\n        if (err) {\n          failure(err);\n          // failure\n        } else {\n          try {\n            findBoooksByAuthor(author, function(books, err) {\n              if (err) {\n                failure(err);\n              } else {\n                try {\n                  foundBooks(books);\n                } catch(reason) {\n                  failure(reason);\n                }\n              }\n            });\n          } catch(error) {\n            failure(err);\n          }\n          // success\n        }\n      });\n      ```\n\n      Promise Example;\n\n      ```javascript\n      findAuthor().\n        then(findBooksByAuthor).\n        then(function(books){\n          // found books\n      }).catch(function(reason){\n        // something went wrong\n      });\n      ```\n\n      @method then\n      @param {Function} onFulfilled\n      @param {Function} onRejected\n      Useful for tooling.\n      @return {Promise}\n    */\n      then: function(onFulfillment, onRejection) {\n        var parent = this;\n        var state = parent._state;\n\n        if (state === lib$es6$promise$$internal$$FULFILLED && !onFulfillment || state === lib$es6$promise$$internal$$REJECTED && !onRejection) {\n          return this;\n        }\n\n        var child = new this.constructor(lib$es6$promise$$internal$$noop);\n        var result = parent._result;\n\n        if (state) {\n          var callback = arguments[state - 1];\n          lib$es6$promise$asap$$asap(function(){\n            lib$es6$promise$$internal$$invokeCallback(state, child, callback, result);\n          });\n        } else {\n          lib$es6$promise$$internal$$subscribe(parent, child, onFulfillment, onRejection);\n        }\n\n        return child;\n      },\n\n    /**\n      `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same\n      as the catch block of a try/catch statement.\n\n      ```js\n      function findAuthor(){\n        throw new Error('couldn't find that author');\n      }\n\n      // synchronous\n      try {\n        findAuthor();\n      } catch(reason) {\n        // something went wrong\n      }\n\n      // async with promises\n      findAuthor().catch(function(reason){\n        // something went wrong\n      });\n      ```\n\n      @method catch\n      @param {Function} onRejection\n      Useful for tooling.\n      @return {Promise}\n    */\n      'catch': function(onRejection) {\n        return this.then(null, onRejection);\n      }\n    };\n    function lib$es6$promise$polyfill$$polyfill() {\n      var local;\n\n      if (typeof global !== 'undefined') {\n          local = global;\n      } else if (typeof self !== 'undefined') {\n          local = self;\n      } else {\n          try {\n              local = Function('return this')();\n          } catch (e) {\n              throw new Error('polyfill failed because global object is unavailable in this environment');\n          }\n      }\n\n      var P = local.Promise;\n\n      if (P && Object.prototype.toString.call(P.resolve()) === '[object Promise]' && !P.cast) {\n        return;\n      }\n\n      local.Promise = lib$es6$promise$promise$$default;\n    }\n    var lib$es6$promise$polyfill$$default = lib$es6$promise$polyfill$$polyfill;\n\n    var lib$es6$promise$umd$$ES6Promise = {\n      'Promise': lib$es6$promise$promise$$default,\n      'polyfill': lib$es6$promise$polyfill$$default\n    };\n\n    /* global define:true module:true window: true */\n    if (typeof define === 'function' && define['amd']) {\n      define(function() { return lib$es6$promise$umd$$ES6Promise; });\n    } else if (typeof module !== 'undefined' && module['exports']) {\n      module['exports'] = lib$es6$promise$umd$$ES6Promise;\n    } else if (typeof this !== 'undefined') {\n      this['ES6Promise'] = lib$es6$promise$umd$$ES6Promise;\n    }\n\n    lib$es6$promise$polyfill$$default();\n}).call(this);\n\n","/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */\n\n// \n// Javascript ZLib\n// By Thomas Down 2010-2011\n//\n// Based very heavily on portions of jzlib (by ymnk@jcraft.com), who in\n// turn credits Jean-loup Gailly and Mark Adler for the original zlib code.\n//\n// inflate.js: ZLib inflate code\n//\n\n//\n// Shared constants\n//\n\nvar MAX_WBITS=15; // 32K LZ77 window\nvar DEF_WBITS=MAX_WBITS;\nvar MAX_MEM_LEVEL=9;\nvar MANY=1440;\nvar BMAX = 15;\n\n// preset dictionary flag in zlib header\nvar PRESET_DICT=0x20;\n\nvar Z_NO_FLUSH=0;\nvar Z_PARTIAL_FLUSH=1;\nvar Z_SYNC_FLUSH=2;\nvar Z_FULL_FLUSH=3;\nvar Z_FINISH=4;\n\nvar Z_DEFLATED=8;\n\nvar Z_OK=0;\nvar Z_STREAM_END=1;\nvar Z_NEED_DICT=2;\nvar Z_ERRNO=-1;\nvar Z_STREAM_ERROR=-2;\nvar Z_DATA_ERROR=-3;\nvar Z_MEM_ERROR=-4;\nvar Z_BUF_ERROR=-5;\nvar Z_VERSION_ERROR=-6;\n\nvar METHOD=0;   // waiting for method byte\nvar FLAG=1;     // waiting for flag byte\nvar DICT4=2;    // four dictionary check bytes to go\nvar DICT3=3;    // three dictionary check bytes to go\nvar DICT2=4;    // two dictionary check bytes to go\nvar DICT1=5;    // one dictionary check byte to go\nvar DICT0=6;    // waiting for inflateSetDictionary\nvar BLOCKS=7;   // decompressing blocks\nvar CHECK4=8;   // four check bytes to go\nvar CHECK3=9;   // three check bytes to go\nvar CHECK2=10;  // two check bytes to go\nvar CHECK1=11;  // one check byte to go\nvar DONE=12;    // finished check, done\nvar BAD=13;     // got an error--stay here\n\nvar inflate_mask = [0x00000000, 0x00000001, 0x00000003, 0x00000007, 0x0000000f, 0x0000001f, 0x0000003f, 0x0000007f, 0x000000ff, 0x000001ff, 0x000003ff, 0x000007ff, 0x00000fff, 0x00001fff, 0x00003fff, 0x00007fff, 0x0000ffff];\n\nvar IB_TYPE=0;  // get type bits (3, including end bit)\nvar IB_LENS=1;  // get lengths for stored\nvar IB_STORED=2;// processing stored block\nvar IB_TABLE=3; // get table lengths\nvar IB_BTREE=4; // get bit lengths tree for a dynamic block\nvar IB_DTREE=5; // get length, distance trees for a dynamic block\nvar IB_CODES=6; // processing fixed or dynamic block\nvar IB_DRY=7;   // output remaining window bytes\nvar IB_DONE=8;  // finished last block, done\nvar IB_BAD=9;   // ot a data error--stuck here\n\nvar fixed_bl = 9;\nvar fixed_bd = 5;\n\nvar fixed_tl = [\n    96,7,256, 0,8,80, 0,8,16, 84,8,115,\n    82,7,31, 0,8,112, 0,8,48, 0,9,192,\n    80,7,10, 0,8,96, 0,8,32, 0,9,160,\n    0,8,0, 0,8,128, 0,8,64, 0,9,224,\n    80,7,6, 0,8,88, 0,8,24, 0,9,144,\n    83,7,59, 0,8,120, 0,8,56, 0,9,208,\n    81,7,17, 0,8,104, 0,8,40, 0,9,176,\n    0,8,8, 0,8,136, 0,8,72, 0,9,240,\n    80,7,4, 0,8,84, 0,8,20, 85,8,227,\n    83,7,43, 0,8,116, 0,8,52, 0,9,200,\n    81,7,13, 0,8,100, 0,8,36, 0,9,168,\n    0,8,4, 0,8,132, 0,8,68, 0,9,232,\n    80,7,8, 0,8,92, 0,8,28, 0,9,152,\n    84,7,83, 0,8,124, 0,8,60, 0,9,216,\n    82,7,23, 0,8,108, 0,8,44, 0,9,184,\n    0,8,12, 0,8,140, 0,8,76, 0,9,248,\n    80,7,3, 0,8,82, 0,8,18, 85,8,163,\n    83,7,35, 0,8,114, 0,8,50, 0,9,196,\n    81,7,11, 0,8,98, 0,8,34, 0,9,164,\n    0,8,2, 0,8,130, 0,8,66, 0,9,228,\n    80,7,7, 0,8,90, 0,8,26, 0,9,148,\n    84,7,67, 0,8,122, 0,8,58, 0,9,212,\n    82,7,19, 0,8,106, 0,8,42, 0,9,180,\n    0,8,10, 0,8,138, 0,8,74, 0,9,244,\n    80,7,5, 0,8,86, 0,8,22, 192,8,0,\n    83,7,51, 0,8,118, 0,8,54, 0,9,204,\n    81,7,15, 0,8,102, 0,8,38, 0,9,172,\n    0,8,6, 0,8,134, 0,8,70, 0,9,236,\n    80,7,9, 0,8,94, 0,8,30, 0,9,156,\n    84,7,99, 0,8,126, 0,8,62, 0,9,220,\n    82,7,27, 0,8,110, 0,8,46, 0,9,188,\n    0,8,14, 0,8,142, 0,8,78, 0,9,252,\n    96,7,256, 0,8,81, 0,8,17, 85,8,131,\n    82,7,31, 0,8,113, 0,8,49, 0,9,194,\n    80,7,10, 0,8,97, 0,8,33, 0,9,162,\n    0,8,1, 0,8,129, 0,8,65, 0,9,226,\n    80,7,6, 0,8,89, 0,8,25, 0,9,146,\n    83,7,59, 0,8,121, 0,8,57, 0,9,210,\n    81,7,17, 0,8,105, 0,8,41, 0,9,178,\n    0,8,9, 0,8,137, 0,8,73, 0,9,242,\n    80,7,4, 0,8,85, 0,8,21, 80,8,258,\n    83,7,43, 0,8,117, 0,8,53, 0,9,202,\n    81,7,13, 0,8,101, 0,8,37, 0,9,170,\n    0,8,5, 0,8,133, 0,8,69, 0,9,234,\n    80,7,8, 0,8,93, 0,8,29, 0,9,154,\n    84,7,83, 0,8,125, 0,8,61, 0,9,218,\n    82,7,23, 0,8,109, 0,8,45, 0,9,186,\n    0,8,13, 0,8,141, 0,8,77, 0,9,250,\n    80,7,3, 0,8,83, 0,8,19, 85,8,195,\n    83,7,35, 0,8,115, 0,8,51, 0,9,198,\n    81,7,11, 0,8,99, 0,8,35, 0,9,166,\n    0,8,3, 0,8,131, 0,8,67, 0,9,230,\n    80,7,7, 0,8,91, 0,8,27, 0,9,150,\n    84,7,67, 0,8,123, 0,8,59, 0,9,214,\n    82,7,19, 0,8,107, 0,8,43, 0,9,182,\n    0,8,11, 0,8,139, 0,8,75, 0,9,246,\n    80,7,5, 0,8,87, 0,8,23, 192,8,0,\n    83,7,51, 0,8,119, 0,8,55, 0,9,206,\n    81,7,15, 0,8,103, 0,8,39, 0,9,174,\n    0,8,7, 0,8,135, 0,8,71, 0,9,238,\n    80,7,9, 0,8,95, 0,8,31, 0,9,158,\n    84,7,99, 0,8,127, 0,8,63, 0,9,222,\n    82,7,27, 0,8,111, 0,8,47, 0,9,190,\n    0,8,15, 0,8,143, 0,8,79, 0,9,254,\n    96,7,256, 0,8,80, 0,8,16, 84,8,115,\n    82,7,31, 0,8,112, 0,8,48, 0,9,193,\n\n    80,7,10, 0,8,96, 0,8,32, 0,9,161,\n    0,8,0, 0,8,128, 0,8,64, 0,9,225,\n    80,7,6, 0,8,88, 0,8,24, 0,9,145,\n    83,7,59, 0,8,120, 0,8,56, 0,9,209,\n    81,7,17, 0,8,104, 0,8,40, 0,9,177,\n    0,8,8, 0,8,136, 0,8,72, 0,9,241,\n    80,7,4, 0,8,84, 0,8,20, 85,8,227,\n    83,7,43, 0,8,116, 0,8,52, 0,9,201,\n    81,7,13, 0,8,100, 0,8,36, 0,9,169,\n    0,8,4, 0,8,132, 0,8,68, 0,9,233,\n    80,7,8, 0,8,92, 0,8,28, 0,9,153,\n    84,7,83, 0,8,124, 0,8,60, 0,9,217,\n    82,7,23, 0,8,108, 0,8,44, 0,9,185,\n    0,8,12, 0,8,140, 0,8,76, 0,9,249,\n    80,7,3, 0,8,82, 0,8,18, 85,8,163,\n    83,7,35, 0,8,114, 0,8,50, 0,9,197,\n    81,7,11, 0,8,98, 0,8,34, 0,9,165,\n    0,8,2, 0,8,130, 0,8,66, 0,9,229,\n    80,7,7, 0,8,90, 0,8,26, 0,9,149,\n    84,7,67, 0,8,122, 0,8,58, 0,9,213,\n    82,7,19, 0,8,106, 0,8,42, 0,9,181,\n    0,8,10, 0,8,138, 0,8,74, 0,9,245,\n    80,7,5, 0,8,86, 0,8,22, 192,8,0,\n    83,7,51, 0,8,118, 0,8,54, 0,9,205,\n    81,7,15, 0,8,102, 0,8,38, 0,9,173,\n    0,8,6, 0,8,134, 0,8,70, 0,9,237,\n    80,7,9, 0,8,94, 0,8,30, 0,9,157,\n    84,7,99, 0,8,126, 0,8,62, 0,9,221,\n    82,7,27, 0,8,110, 0,8,46, 0,9,189,\n    0,8,14, 0,8,142, 0,8,78, 0,9,253,\n    96,7,256, 0,8,81, 0,8,17, 85,8,131,\n    82,7,31, 0,8,113, 0,8,49, 0,9,195,\n    80,7,10, 0,8,97, 0,8,33, 0,9,163,\n    0,8,1, 0,8,129, 0,8,65, 0,9,227,\n    80,7,6, 0,8,89, 0,8,25, 0,9,147,\n    83,7,59, 0,8,121, 0,8,57, 0,9,211,\n    81,7,17, 0,8,105, 0,8,41, 0,9,179,\n    0,8,9, 0,8,137, 0,8,73, 0,9,243,\n    80,7,4, 0,8,85, 0,8,21, 80,8,258,\n    83,7,43, 0,8,117, 0,8,53, 0,9,203,\n    81,7,13, 0,8,101, 0,8,37, 0,9,171,\n    0,8,5, 0,8,133, 0,8,69, 0,9,235,\n    80,7,8, 0,8,93, 0,8,29, 0,9,155,\n    84,7,83, 0,8,125, 0,8,61, 0,9,219,\n    82,7,23, 0,8,109, 0,8,45, 0,9,187,\n    0,8,13, 0,8,141, 0,8,77, 0,9,251,\n    80,7,3, 0,8,83, 0,8,19, 85,8,195,\n    83,7,35, 0,8,115, 0,8,51, 0,9,199,\n    81,7,11, 0,8,99, 0,8,35, 0,9,167,\n    0,8,3, 0,8,131, 0,8,67, 0,9,231,\n    80,7,7, 0,8,91, 0,8,27, 0,9,151,\n    84,7,67, 0,8,123, 0,8,59, 0,9,215,\n    82,7,19, 0,8,107, 0,8,43, 0,9,183,\n    0,8,11, 0,8,139, 0,8,75, 0,9,247,\n    80,7,5, 0,8,87, 0,8,23, 192,8,0,\n    83,7,51, 0,8,119, 0,8,55, 0,9,207,\n    81,7,15, 0,8,103, 0,8,39, 0,9,175,\n    0,8,7, 0,8,135, 0,8,71, 0,9,239,\n    80,7,9, 0,8,95, 0,8,31, 0,9,159,\n    84,7,99, 0,8,127, 0,8,63, 0,9,223,\n    82,7,27, 0,8,111, 0,8,47, 0,9,191,\n    0,8,15, 0,8,143, 0,8,79, 0,9,255\n];\nvar fixed_td = [\n    80,5,1, 87,5,257, 83,5,17, 91,5,4097,\n    81,5,5, 89,5,1025, 85,5,65, 93,5,16385,\n    80,5,3, 88,5,513, 84,5,33, 92,5,8193,\n    82,5,9, 90,5,2049, 86,5,129, 192,5,24577,\n    80,5,2, 87,5,385, 83,5,25, 91,5,6145,\n    81,5,7, 89,5,1537, 85,5,97, 93,5,24577,\n    80,5,4, 88,5,769, 84,5,49, 92,5,12289,\n    82,5,13, 90,5,3073, 86,5,193, 192,5,24577\n];\n\n  // Tables for deflate from PKZIP's appnote.txt.\n  var cplens = [ // Copy lengths for literal codes 257..285\n        3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,\n        35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0\n  ];\n\n  // see note #13 above about 258\n  var cplext = [ // Extra bits for literal codes 257..285\n        0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2,\n        3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 112, 112  // 112==invalid\n  ];\n\n var cpdist = [ // Copy offsets for distance codes 0..29\n        1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,\n        257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,\n        8193, 12289, 16385, 24577\n  ];\n\n  var cpdext = [ // Extra bits for distance codes\n        0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6,\n        7, 7, 8, 8, 9, 9, 10, 10, 11, 11,\n        12, 12, 13, 13];\n\n//\n// ZStream.java\n//\n\nfunction ZStream() {\n}\n\n\nZStream.prototype.inflateInit = function(w, nowrap) {\n    if (!w) {\n\tw = DEF_WBITS;\n    }\n    if (nowrap) {\n\tnowrap = false;\n    }\n    this.istate = new Inflate();\n    return this.istate.inflateInit(this, nowrap?-w:w);\n}\n\nZStream.prototype.inflate = function(f) {\n    if(this.istate==null) return Z_STREAM_ERROR;\n    return this.istate.inflate(this, f);\n}\n\nZStream.prototype.inflateEnd = function(){\n    if(this.istate==null) return Z_STREAM_ERROR;\n    var ret=istate.inflateEnd(this);\n    this.istate = null;\n    return ret;\n}\nZStream.prototype.inflateSync = function(){\n    // if(istate == null) return Z_STREAM_ERROR;\n    return istate.inflateSync(this);\n}\nZStream.prototype.inflateSetDictionary = function(dictionary, dictLength){\n    // if(istate == null) return Z_STREAM_ERROR;\n    return istate.inflateSetDictionary(this, dictionary, dictLength);\n}\n\n/*\n\n  public int deflateInit(int level){\n    return deflateInit(level, MAX_WBITS);\n  }\n  public int deflateInit(int level, boolean nowrap){\n    return deflateInit(level, MAX_WBITS, nowrap);\n  }\n  public int deflateInit(int level, int bits){\n    return deflateInit(level, bits, false);\n  }\n  public int deflateInit(int level, int bits, boolean nowrap){\n    dstate=new Deflate();\n    return dstate.deflateInit(this, level, nowrap?-bits:bits);\n  }\n  public int deflate(int flush){\n    if(dstate==null){\n      return Z_STREAM_ERROR;\n    }\n    return dstate.deflate(this, flush);\n  }\n  public int deflateEnd(){\n    if(dstate==null) return Z_STREAM_ERROR;\n    int ret=dstate.deflateEnd();\n    dstate=null;\n    return ret;\n  }\n  public int deflateParams(int level, int strategy){\n    if(dstate==null) return Z_STREAM_ERROR;\n    return dstate.deflateParams(this, level, strategy);\n  }\n  public int deflateSetDictionary (byte[] dictionary, int dictLength){\n    if(dstate == null)\n      return Z_STREAM_ERROR;\n    return dstate.deflateSetDictionary(this, dictionary, dictLength);\n  }\n\n*/\n\n/*\n  // Flush as much pending output as possible. All deflate() output goes\n  // through this function so some applications may wish to modify it\n  // to avoid allocating a large strm->next_out buffer and copying into it.\n  // (See also read_buf()).\n  void flush_pending(){\n    int len=dstate.pending;\n\n    if(len>avail_out) len=avail_out;\n    if(len==0) return;\n\n    if(dstate.pending_buf.length<=dstate.pending_out ||\n       next_out.length<=next_out_index ||\n       dstate.pending_buf.length<(dstate.pending_out+len) ||\n       next_out.length<(next_out_index+len)){\n      System.out.println(dstate.pending_buf.length+\", \"+dstate.pending_out+\n\t\t\t \", \"+next_out.length+\", \"+next_out_index+\", \"+len);\n      System.out.println(\"avail_out=\"+avail_out);\n    }\n\n    System.arraycopy(dstate.pending_buf, dstate.pending_out,\n\t\t     next_out, next_out_index, len);\n\n    next_out_index+=len;\n    dstate.pending_out+=len;\n    total_out+=len;\n    avail_out-=len;\n    dstate.pending-=len;\n    if(dstate.pending==0){\n      dstate.pending_out=0;\n    }\n  }\n\n  // Read a new buffer from the current input stream, update the adler32\n  // and total number of bytes read.  All deflate() input goes through\n  // this function so some applications may wish to modify it to avoid\n  // allocating a large strm->next_in buffer and copying from it.\n  // (See also flush_pending()).\n  int read_buf(byte[] buf, int start, int size) {\n    int len=avail_in;\n\n    if(len>size) len=size;\n    if(len==0) return 0;\n\n    avail_in-=len;\n\n    if(dstate.noheader==0) {\n      adler=_adler.adler32(adler, next_in, next_in_index, len);\n    }\n    System.arraycopy(next_in, next_in_index, buf, start, len);\n    next_in_index  += len;\n    total_in += len;\n    return len;\n  }\n\n  public void free(){\n    next_in=null;\n    next_out=null;\n    msg=null;\n    _adler=null;\n  }\n}\n*/\n\n\n//\n// Inflate.java\n//\n\nfunction Inflate() {\n    this.was = [0];\n}\n\nInflate.prototype.inflateReset = function(z) {\n    if(z == null || z.istate == null) return Z_STREAM_ERROR;\n    \n    z.total_in = z.total_out = 0;\n    z.msg = null;\n    z.istate.mode = z.istate.nowrap!=0 ? BLOCKS : METHOD;\n    z.istate.blocks.reset(z, null);\n    return Z_OK;\n}\n\nInflate.prototype.inflateEnd = function(z){\n    if(this.blocks != null)\n      this.blocks.free(z);\n    this.blocks=null;\n    return Z_OK;\n}\n\nInflate.prototype.inflateInit = function(z, w){\n    z.msg = null;\n    this.blocks = null;\n\n    // handle undocumented nowrap option (no zlib header or check)\n    nowrap = 0;\n    if(w < 0){\n      w = - w;\n      nowrap = 1;\n    }\n\n    // set window size\n    if(w<8 ||w>15){\n      this.inflateEnd(z);\n      return Z_STREAM_ERROR;\n    }\n    this.wbits=w;\n\n    z.istate.blocks=new InfBlocks(z, \n\t\t\t\t  z.istate.nowrap!=0 ? null : this,\n\t\t\t\t  1<<w);\n\n    // reset state\n    this.inflateReset(z);\n    return Z_OK;\n  }\n\nInflate.prototype.inflate = function(z, f){\n    var r, b;\n\n    if(z == null || z.istate == null || z.next_in == null)\n      return Z_STREAM_ERROR;\n    f = f == Z_FINISH ? Z_BUF_ERROR : Z_OK;\n    r = Z_BUF_ERROR;\n    while (true){\n      switch (z.istate.mode){\n      case METHOD:\n\n        if(z.avail_in==0)return r;r=f;\n\n        z.avail_in--; z.total_in++;\n        if(((z.istate.method = z.next_in[z.next_in_index++])&0xf)!=Z_DEFLATED){\n          z.istate.mode = BAD;\n          z.msg=\"unknown compression method\";\n          z.istate.marker = 5;       // can't try inflateSync\n          break;\n        }\n        if((z.istate.method>>4)+8>z.istate.wbits){\n          z.istate.mode = BAD;\n          z.msg=\"invalid window size\";\n          z.istate.marker = 5;       // can't try inflateSync\n          break;\n        }\n        z.istate.mode=FLAG;\n      case FLAG:\n\n        if(z.avail_in==0)return r;r=f;\n\n        z.avail_in--; z.total_in++;\n        b = (z.next_in[z.next_in_index++])&0xff;\n\n        if((((z.istate.method << 8)+b) % 31)!=0){\n          z.istate.mode = BAD;\n          z.msg = \"incorrect header check\";\n          z.istate.marker = 5;       // can't try inflateSync\n          break;\n        }\n\n        if((b&PRESET_DICT)==0){\n          z.istate.mode = BLOCKS;\n          break;\n        }\n        z.istate.mode = DICT4;\n      case DICT4:\n\n        if(z.avail_in==0)return r;r=f;\n\n        z.avail_in--; z.total_in++;\n        z.istate.need=((z.next_in[z.next_in_index++]&0xff)<<24)&0xff000000;\n        z.istate.mode=DICT3;\n      case DICT3:\n\n        if(z.avail_in==0)return r;r=f;\n\n        z.avail_in--; z.total_in++;\n        z.istate.need+=((z.next_in[z.next_in_index++]&0xff)<<16)&0xff0000;\n        z.istate.mode=DICT2;\n      case DICT2:\n\n        if(z.avail_in==0)return r;r=f;\n\n        z.avail_in--; z.total_in++;\n        z.istate.need+=((z.next_in[z.next_in_index++]&0xff)<<8)&0xff00;\n        z.istate.mode=DICT1;\n      case DICT1:\n\n        if(z.avail_in==0)return r;r=f;\n\n        z.avail_in--; z.total_in++;\n        z.istate.need += (z.next_in[z.next_in_index++]&0xff);\n        z.adler = z.istate.need;\n        z.istate.mode = DICT0;\n        return Z_NEED_DICT;\n      case DICT0:\n        z.istate.mode = BAD;\n        z.msg = \"need dictionary\";\n        z.istate.marker = 0;       // can try inflateSync\n        return Z_STREAM_ERROR;\n      case BLOCKS:\n\n        r = z.istate.blocks.proc(z, r);\n        if(r == Z_DATA_ERROR){\n          z.istate.mode = BAD;\n          z.istate.marker = 0;     // can try inflateSync\n          break;\n        }\n        if(r == Z_OK){\n          r = f;\n        }\n        if(r != Z_STREAM_END){\n          return r;\n        }\n        r = f;\n        z.istate.blocks.reset(z, z.istate.was);\n        if(z.istate.nowrap!=0){\n          z.istate.mode=DONE;\n          break;\n        }\n        z.istate.mode=CHECK4;\n      case CHECK4:\n\n        if(z.avail_in==0)return r;r=f;\n\n        z.avail_in--; z.total_in++;\n        z.istate.need=((z.next_in[z.next_in_index++]&0xff)<<24)&0xff000000;\n        z.istate.mode=CHECK3;\n      case CHECK3:\n\n        if(z.avail_in==0)return r;r=f;\n\n        z.avail_in--; z.total_in++;\n        z.istate.need+=((z.next_in[z.next_in_index++]&0xff)<<16)&0xff0000;\n        z.istate.mode = CHECK2;\n      case CHECK2:\n\n        if(z.avail_in==0)return r;r=f;\n\n        z.avail_in--; z.total_in++;\n        z.istate.need+=((z.next_in[z.next_in_index++]&0xff)<<8)&0xff00;\n        z.istate.mode = CHECK1;\n      case CHECK1:\n\n        if(z.avail_in==0)return r;r=f;\n\n        z.avail_in--; z.total_in++;\n        z.istate.need+=(z.next_in[z.next_in_index++]&0xff);\n\n        if(((z.istate.was[0])) != ((z.istate.need))){\n          z.istate.mode = BAD;\n          z.msg = \"incorrect data check\";\n          z.istate.marker = 5;       // can't try inflateSync\n          break;\n        }\n\n        z.istate.mode = DONE;\n      case DONE:\n        return Z_STREAM_END;\n      case BAD:\n        return Z_DATA_ERROR;\n      default:\n        return Z_STREAM_ERROR;\n      }\n    }\n  }\n\n\nInflate.prototype.inflateSetDictionary = function(z,  dictionary, dictLength) {\n    var index=0;\n    var length = dictLength;\n    if(z==null || z.istate == null|| z.istate.mode != DICT0)\n      return Z_STREAM_ERROR;\n\n    if(z._adler.adler32(1, dictionary, 0, dictLength)!=z.adler){\n      return Z_DATA_ERROR;\n    }\n\n    z.adler = z._adler.adler32(0, null, 0, 0);\n\n    if(length >= (1<<z.istate.wbits)){\n      length = (1<<z.istate.wbits)-1;\n      index=dictLength - length;\n    }\n    z.istate.blocks.set_dictionary(dictionary, index, length);\n    z.istate.mode = BLOCKS;\n    return Z_OK;\n  }\n\n//  static private byte[] mark = {(byte)0, (byte)0, (byte)0xff, (byte)0xff};\nvar mark = [0, 0, 255, 255]\n\nInflate.prototype.inflateSync = function(z){\n    var n;       // number of bytes to look at\n    var p;       // pointer to bytes\n    var m;       // number of marker bytes found in a row\n    var r, w;   // temporaries to save total_in and total_out\n\n    // set up\n    if(z == null || z.istate == null)\n      return Z_STREAM_ERROR;\n    if(z.istate.mode != BAD){\n      z.istate.mode = BAD;\n      z.istate.marker = 0;\n    }\n    if((n=z.avail_in)==0)\n      return Z_BUF_ERROR;\n    p=z.next_in_index;\n    m=z.istate.marker;\n\n    // search\n    while (n!=0 && m < 4){\n      if(z.next_in[p] == mark[m]){\n        m++;\n      }\n      else if(z.next_in[p]!=0){\n        m = 0;\n      }\n      else{\n        m = 4 - m;\n      }\n      p++; n--;\n    }\n\n    // restore\n    z.total_in += p-z.next_in_index;\n    z.next_in_index = p;\n    z.avail_in = n;\n    z.istate.marker = m;\n\n    // return no joy or set up to restart on a new block\n    if(m != 4){\n      return Z_DATA_ERROR;\n    }\n    r=z.total_in;  w=z.total_out;\n    this.inflateReset(z);\n    z.total_in=r;  z.total_out = w;\n    z.istate.mode = BLOCKS;\n    return Z_OK;\n}\n\n  // Returns true if inflate is currently at the end of a block generated\n  // by Z_SYNC_FLUSH or Z_FULL_FLUSH. This function is used by one PPP\n  // implementation to provide an additional safety check. PPP uses Z_SYNC_FLUSH\n  // but removes the length bytes of the resulting empty stored block. When\n  // decompressing, PPP checks that at the end of input packet, inflate is\n  // waiting for these length bytes.\nInflate.prototype.inflateSyncPoint = function(z){\n    if(z == null || z.istate == null || z.istate.blocks == null)\n      return Z_STREAM_ERROR;\n    return z.istate.blocks.sync_point();\n}\n\n\n//\n// InfBlocks.java\n//\n\nvar INFBLOCKS_BORDER = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];\n\nfunction InfBlocks(z, checkfn, w) {\n    this.hufts=new Int32Array(MANY*3);\n    this.window=new Uint8Array(w);\n    this.end=w;\n    this.checkfn = checkfn;\n    this.mode = IB_TYPE;\n    this.reset(z, null);\n\n    this.left = 0;            // if STORED, bytes left to copy \n\n    this.table = 0;           // table lengths (14 bits) \n    this.index = 0;           // index into blens (or border) \n    this.blens = null;         // bit lengths of codes \n    this.bb=new Int32Array(1); // bit length tree depth \n    this.tb=new Int32Array(1); // bit length decoding tree \n\n    this.codes = new InfCodes();\n\n    this.last = 0;            // true if this block is the last block \n\n  // mode independent information \n    this.bitk = 0;            // bits in bit buffer \n    this.bitb = 0;            // bit buffer \n    this.read = 0;            // window read pointer \n    this.write = 0;           // window write pointer \n    this.check = 0;          // check on output \n\n    this.inftree=new InfTree();\n}\n\n\n\n\nInfBlocks.prototype.reset = function(z, c){\n    if(c) c[0]=this.check;\n    if(this.mode==IB_CODES){\n      this.codes.free(z);\n    }\n    this.mode=IB_TYPE;\n    this.bitk=0;\n    this.bitb=0;\n    this.read=this.write=0;\n\n    if(this.checkfn)\n      z.adler=this.check=z._adler.adler32(0, null, 0, 0);\n  }\n\n InfBlocks.prototype.proc = function(z, r){\n    var t;              // temporary storage\n    var b;              // bit buffer\n    var k;              // bits in bit buffer\n    var p;              // input data pointer\n    var n;              // bytes available there\n    var q;              // output window write pointer\n    var m;              // bytes to end of window or read pointer\n\n    // copy input/output information to locals (UPDATE macro restores)\n    {p=z.next_in_index;n=z.avail_in;b=this.bitb;k=this.bitk;}\n    {q=this.write;m=(q<this.read ? this.read-q-1 : this.end-q);}\n\n    // process input based on current state\n    while(true){\n      switch (this.mode){\n      case IB_TYPE:\n\n\twhile(k<(3)){\n\t  if(n!=0){\n\t    r=Z_OK;\n\t  }\n\t  else{\n\t    this.bitb=b; this.bitk=k; \n\t    z.avail_in=n;\n\t    z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t    this.write=q;\n\t    return this.inflate_flush(z,r);\n\t  };\n\t  n--;\n\t  b|=(z.next_in[p++]&0xff)<<k;\n\t  k+=8;\n\t}\n\tt = (b & 7);\n\tthis.last = t & 1;\n\n\tswitch (t >>> 1){\n        case 0:                         // stored \n          {b>>>=(3);k-=(3);}\n          t = k & 7;                    // go to byte boundary\n\n          {b>>>=(t);k-=(t);}\n          this.mode = IB_LENS;                  // get length of stored block\n          break;\n        case 1:                         // fixed\n          {\n              var bl=new Int32Array(1);\n\t      var bd=new Int32Array(1);\n              var tl=[];\n\t      var td=[];\n\n\t      inflate_trees_fixed(bl, bd, tl, td, z);\n              this.codes.init(bl[0], bd[0], tl[0], 0, td[0], 0, z);\n          }\n\n          {b>>>=(3);k-=(3);}\n\n          this.mode = IB_CODES;\n          break;\n        case 2:                         // dynamic\n\n          {b>>>=(3);k-=(3);}\n\n          this.mode = IB_TABLE;\n          break;\n        case 3:                         // illegal\n\n          {b>>>=(3);k-=(3);}\n          this.mode = BAD;\n          z.msg = \"invalid block type\";\n          r = Z_DATA_ERROR;\n\n\t  this.bitb=b; this.bitk=k; \n\t  z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t  this.write=q;\n\t  return this.inflate_flush(z,r);\n\t}\n\tbreak;\n      case IB_LENS:\n\twhile(k<(32)){\n\t  if(n!=0){\n\t    r=Z_OK;\n\t  }\n\t  else{\n\t    this.bitb=b; this.bitk=k; \n\t    z.avail_in=n;\n\t    z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t    this.write=q;\n\t    return this.inflate_flush(z,r);\n\t  };\n\t  n--;\n\t  b|=(z.next_in[p++]&0xff)<<k;\n\t  k+=8;\n\t}\n\n\tif ((((~b) >>> 16) & 0xffff) != (b & 0xffff)){\n\t  this.mode = BAD;\n\t  z.msg = \"invalid stored block lengths\";\n\t  r = Z_DATA_ERROR;\n\n\t  this.bitb=b; this.bitk=k; \n\t  z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t  this.write=q;\n\t  return this.inflate_flush(z,r);\n\t}\n\tthis.left = (b & 0xffff);\n\tb = k = 0;                       // dump bits\n\tthis.mode = this.left!=0 ? IB_STORED : (this.last!=0 ? IB_DRY : IB_TYPE);\n\tbreak;\n      case IB_STORED:\n\tif (n == 0){\n\t  this.bitb=b; this.bitk=k; \n\t  z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t  write=q;\n\t  return this.inflate_flush(z,r);\n\t}\n\n\tif(m==0){\n\t  if(q==end&&read!=0){\n\t    q=0; m=(q<this.read ? this.read-q-1 : this.end-q);\n\t  }\n\t  if(m==0){\n\t    this.write=q; \n\t    r=this.inflate_flush(z,r);\n\t    q=this.write; m = (q < this.read ? this.read-q-1 : this.end-q);\n\t    if(q==this.end && this.read != 0){\n\t      q=0; m = (q < this.read ? this.read-q-1 : this.end-q);\n\t    }\n\t    if(m==0){\n\t      this.bitb=b; this.bitk=k; \n\t      z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t      this.write=q;\n\t      return this.inflate_flush(z,r);\n\t    }\n\t  }\n\t}\n\tr=Z_OK;\n\n\tt = this.left;\n\tif(t>n) t = n;\n\tif(t>m) t = m;\n\tarrayCopy(z.next_in, p, this.window, q, t);\n\tp += t;  n -= t;\n\tq += t;  m -= t;\n\tif ((this.left -= t) != 0)\n\t  break;\n\tthis.mode = (this.last != 0 ? IB_DRY : IB_TYPE);\n\tbreak;\n      case IB_TABLE:\n\n\twhile(k<(14)){\n\t  if(n!=0){\n\t    r=Z_OK;\n\t  }\n\t  else{\n\t    this.bitb=b; this.bitk=k; \n\t    z.avail_in=n;\n\t    z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t    this.write=q;\n\t    return this.inflate_flush(z,r);\n\t  };\n\t  n--;\n\t  b|=(z.next_in[p++]&0xff)<<k;\n\t  k+=8;\n\t}\n\n\tthis.table = t = (b & 0x3fff);\n\tif ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29)\n\t  {\n\t    this.mode = IB_BAD;\n\t    z.msg = \"too many length or distance symbols\";\n\t    r = Z_DATA_ERROR;\n\n\t    this.bitb=b; this.bitk=k; \n\t    z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t    this.write=q;\n\t    return this.inflate_flush(z,r);\n\t  }\n\tt = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);\n\tif(this.blens==null || this.blens.length<t){\n\t    this.blens=new Int32Array(t);\n\t}\n\telse{\n\t  for(var i=0; i<t; i++){\n              this.blens[i]=0;\n          }\n\t}\n\n\t{b>>>=(14);k-=(14);}\n\n\tthis.index = 0;\n\tmode = IB_BTREE;\n      case IB_BTREE:\n\twhile (this.index < 4 + (this.table >>> 10)){\n\t  while(k<(3)){\n\t    if(n!=0){\n\t      r=Z_OK;\n\t    }\n\t    else{\n\t      this.bitb=b; this.bitk=k; \n\t      z.avail_in=n;\n\t      z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t      this.write=q;\n\t      return this.inflate_flush(z,r);\n\t    };\n\t    n--;\n\t    b|=(z.next_in[p++]&0xff)<<k;\n\t    k+=8;\n\t  }\n\n\t  this.blens[INFBLOCKS_BORDER[this.index++]] = b&7;\n\n\t  {b>>>=(3);k-=(3);}\n\t}\n\n\twhile(this.index < 19){\n\t  this.blens[INFBLOCKS_BORDER[this.index++]] = 0;\n\t}\n\n\tthis.bb[0] = 7;\n\tt = this.inftree.inflate_trees_bits(this.blens, this.bb, this.tb, this.hufts, z);\n\tif (t != Z_OK){\n\t  r = t;\n\t  if (r == Z_DATA_ERROR){\n\t    this.blens=null;\n\t    this.mode = IB_BAD;\n\t  }\n\n\t  this.bitb=b; this.bitk=k; \n\t  z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t  write=q;\n\t  return this.inflate_flush(z,r);\n\t}\n\n\tthis.index = 0;\n\tthis.mode = IB_DTREE;\n      case IB_DTREE:\n\twhile (true){\n\t  t = this.table;\n\t  if(!(this.index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))){\n\t    break;\n\t  }\n\n\t  var h; //int[]\n\t  var i, j, c;\n\n\t  t = this.bb[0];\n\n\t  while(k<(t)){\n\t    if(n!=0){\n\t      r=Z_OK;\n\t    }\n\t    else{\n\t      this.bitb=b; this.bitk=k; \n\t      z.avail_in=n;\n\t      z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t      this.write=q;\n\t      return this.inflate_flush(z,r);\n\t    };\n\t    n--;\n\t    b|=(z.next_in[p++]&0xff)<<k;\n\t    k+=8;\n\t  }\n\n//\t  if (this.tb[0]==-1){\n//            dlog(\"null...\");\n//\t  }\n\n\t  t=this.hufts[(this.tb[0]+(b & inflate_mask[t]))*3+1];\n\t  c=this.hufts[(this.tb[0]+(b & inflate_mask[t]))*3+2];\n\n\t  if (c < 16){\n\t    b>>>=(t);k-=(t);\n\t    this.blens[this.index++] = c;\n\t  }\n\t  else { // c == 16..18\n\t    i = c == 18 ? 7 : c - 14;\n\t    j = c == 18 ? 11 : 3;\n\n\t    while(k<(t+i)){\n\t      if(n!=0){\n\t\tr=Z_OK;\n\t      }\n\t      else{\n\t\tthis.bitb=b; this.bitk=k; \n\t\tz.avail_in=n;\n\t\tz.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t\tthis.write=q;\n\t\treturn this.inflate_flush(z,r);\n\t      };\n\t      n--;\n\t      b|=(z.next_in[p++]&0xff)<<k;\n\t      k+=8;\n\t    }\n\n\t    b>>>=(t);k-=(t);\n\n\t    j += (b & inflate_mask[i]);\n\n\t    b>>>=(i);k-=(i);\n\n\t    i = this.index;\n\t    t = this.table;\n\t    if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) ||\n\t\t(c == 16 && i < 1)){\n\t      this.blens=null;\n\t      this.mode = IB_BAD;\n\t      z.msg = \"invalid bit length repeat\";\n\t      r = Z_DATA_ERROR;\n\n\t      this.bitb=b; this.bitk=k; \n\t      z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t      this.write=q;\n\t      return this.inflate_flush(z,r);\n\t    }\n\n\t    c = c == 16 ? this.blens[i-1] : 0;\n\t    do{\n\t      this.blens[i++] = c;\n\t    }\n\t    while (--j!=0);\n\t    this.index = i;\n\t  }\n\t}\n\n\tthis.tb[0]=-1;\n\t{\n\t    var bl=new Int32Array(1);\n\t    var bd=new Int32Array(1);\n\t    var tl=new Int32Array(1);\n\t    var td=new Int32Array(1);\n\t    bl[0] = 9;         // must be <= 9 for lookahead assumptions\n\t    bd[0] = 6;         // must be <= 9 for lookahead assumptions\n\n\t    t = this.table;\n\t    t = this.inftree.inflate_trees_dynamic(257 + (t & 0x1f), \n\t\t\t\t\t      1 + ((t >> 5) & 0x1f),\n\t\t\t\t\t      this.blens, bl, bd, tl, td, this.hufts, z);\n\n\t    if (t != Z_OK){\n\t        if (t == Z_DATA_ERROR){\n\t            this.blens=null;\n\t            this.mode = BAD;\n\t        }\n\t        r = t;\n\n\t        this.bitb=b; this.bitk=k; \n\t        z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t        this.write=q;\n\t        return this.inflate_flush(z,r);\n\t    }\n\t    this.codes.init(bl[0], bd[0], this.hufts, tl[0], this.hufts, td[0], z);\n\t}\n\tthis.mode = IB_CODES;\n      case IB_CODES:\n\tthis.bitb=b; this.bitk=k;\n\tz.avail_in=n; z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\tthis.write=q;\n\n\tif ((r = this.codes.proc(this, z, r)) != Z_STREAM_END){\n\t  return this.inflate_flush(z, r);\n\t}\n\tr = Z_OK;\n\tthis.codes.free(z);\n\n\tp=z.next_in_index; n=z.avail_in;b=this.bitb;k=this.bitk;\n\tq=this.write;m = (q < this.read ? this.read-q-1 : this.end-q);\n\n\tif (this.last==0){\n\t  this.mode = IB_TYPE;\n\t  break;\n\t}\n\tthis.mode = IB_DRY;\n      case IB_DRY:\n\tthis.write=q; \n\tr = this.inflate_flush(z, r); \n\tq=this.write; m = (q < this.read ? this.read-q-1 : this.end-q);\n\tif (this.read != this.write){\n\t  this.bitb=b; this.bitk=k; \n\t  z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t  this.write=q;\n\t  return this.inflate_flush(z, r);\n\t}\n\tmode = DONE;\n      case IB_DONE:\n\tr = Z_STREAM_END;\n\n\tthis.bitb=b; this.bitk=k; \n\tz.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\tthis.write=q;\n\treturn this.inflate_flush(z, r);\n      case IB_BAD:\n\tr = Z_DATA_ERROR;\n\n\tthis.bitb=b; this.bitk=k; \n\tz.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\tthis.write=q;\n\treturn this.inflate_flush(z, r);\n\n      default:\n\tr = Z_STREAM_ERROR;\n\n\tthis.bitb=b; this.bitk=k; \n\tz.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\tthis.write=q;\n\treturn this.inflate_flush(z, r);\n      }\n    }\n  }\n\nInfBlocks.prototype.free = function(z){\n    this.reset(z, null);\n    this.window=null;\n    this.hufts=null;\n}\n\nInfBlocks.prototype.set_dictionary = function(d, start, n){\n    arrayCopy(d, start, window, 0, n);\n    this.read = this.write = n;\n}\n\n  // Returns true if inflate is currently at the end of a block generated\n  // by Z_SYNC_FLUSH or Z_FULL_FLUSH. \nInfBlocks.prototype.sync_point = function(){\n    return this.mode == IB_LENS;\n}\n\n  // copy as much as possible from the sliding window to the output area\nInfBlocks.prototype.inflate_flush = function(z, r){\n    var n;\n    var p;\n    var q;\n\n    // local copies of source and destination pointers\n    p = z.next_out_index;\n    q = this.read;\n\n    // compute number of bytes to copy as far as end of window\n    n = ((q <= this.write ? this.write : this.end) - q);\n    if (n > z.avail_out) n = z.avail_out;\n    if (n!=0 && r == Z_BUF_ERROR) r = Z_OK;\n\n    // update counters\n    z.avail_out -= n;\n    z.total_out += n;\n\n    // update check information\n    if(this.checkfn != null)\n      z.adler=this.check=z._adler.adler32(this.check, this.window, q, n);\n\n    // copy as far as end of window\n    arrayCopy(this.window, q, z.next_out, p, n);\n    p += n;\n    q += n;\n\n    // see if more to copy at beginning of window\n    if (q == this.end){\n      // wrap pointers\n      q = 0;\n      if (this.write == this.end)\n        this.write = 0;\n\n      // compute bytes to copy\n      n = this.write - q;\n      if (n > z.avail_out) n = z.avail_out;\n      if (n!=0 && r == Z_BUF_ERROR) r = Z_OK;\n\n      // update counters\n      z.avail_out -= n;\n      z.total_out += n;\n\n      // update check information\n      if(this.checkfn != null)\n\tz.adler=this.check=z._adler.adler32(this.check, this.window, q, n);\n\n      // copy\n      arrayCopy(this.window, q, z.next_out, p, n);\n      p += n;\n      q += n;\n    }\n\n    // update pointers\n    z.next_out_index = p;\n    this.read = q;\n\n    // done\n    return r;\n  }\n\n//\n// InfCodes.java\n//\n\nvar IC_START=0;  // x: set up for LEN\nvar IC_LEN=1;    // i: get length/literal/eob next\nvar IC_LENEXT=2; // i: getting length extra (have base)\nvar IC_DIST=3;   // i: get distance next\nvar IC_DISTEXT=4;// i: getting distance extra\nvar IC_COPY=5;   // o: copying bytes in window, waiting for space\nvar IC_LIT=6;    // o: got literal, waiting for output space\nvar IC_WASH=7;   // o: got eob, possibly still output waiting\nvar IC_END=8;    // x: got eob and all data flushed\nvar IC_BADCODE=9;// x: got error\n\nfunction InfCodes() {\n}\n\nInfCodes.prototype.init = function(bl, bd, tl, tl_index, td, td_index, z) {\n    this.mode=IC_START;\n    this.lbits=bl;\n    this.dbits=bd;\n    this.ltree=tl;\n    this.ltree_index=tl_index;\n    this.dtree = td;\n    this.dtree_index=td_index;\n    this.tree=null;\n}\n\nInfCodes.prototype.proc = function(s, z, r){ \n    var j;              // temporary storage\n    var t;              // temporary pointer (int[])\n    var tindex;         // temporary pointer\n    var e;              // extra bits or operation\n    var b=0;            // bit buffer\n    var k=0;            // bits in bit buffer\n    var p=0;            // input data pointer\n    var n;              // bytes available there\n    var q;              // output window write pointer\n    var m;              // bytes to end of window or read pointer\n    var f;              // pointer to copy strings from\n\n    // copy input/output information to locals (UPDATE macro restores)\n    p=z.next_in_index;n=z.avail_in;b=s.bitb;k=s.bitk;\n    q=s.write;m=q<s.read?s.read-q-1:s.end-q;\n\n    // process input and output based on current state\n    while (true){\n      switch (this.mode){\n\t// waiting for \"i:\"=input, \"o:\"=output, \"x:\"=nothing\n      case IC_START:         // x: set up for LEN\n\tif (m >= 258 && n >= 10){\n\n\t  s.bitb=b;s.bitk=k;\n\t  z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t  s.write=q;\n\t  r = this.inflate_fast(this.lbits, this.dbits, \n\t\t\t   this.ltree, this.ltree_index, \n\t\t\t   this.dtree, this.dtree_index,\n\t\t\t   s, z);\n\n\t  p=z.next_in_index;n=z.avail_in;b=s.bitb;k=s.bitk;\n\t  q=s.write;m=q<s.read?s.read-q-1:s.end-q;\n\n\t  if (r != Z_OK){\n\t    this.mode = r == Z_STREAM_END ? IC_WASH : IC_BADCODE;\n\t    break;\n\t  }\n\t}\n\tthis.need = this.lbits;\n\tthis.tree = this.ltree;\n\tthis.tree_index=this.ltree_index;\n\n\tthis.mode = IC_LEN;\n      case IC_LEN:           // i: get length/literal/eob next\n\tj = this.need;\n\n\twhile(k<(j)){\n\t  if(n!=0)r=Z_OK;\n\t  else{\n\n\t    s.bitb=b;s.bitk=k;\n\t    z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t    s.write=q;\n\t    return s.inflate_flush(z,r);\n\t  }\n\t  n--;\n\t  b|=(z.next_in[p++]&0xff)<<k;\n\t  k+=8;\n\t}\n\n\ttindex=(this.tree_index+(b&inflate_mask[j]))*3;\n\n\tb>>>=(this.tree[tindex+1]);\n\tk-=(this.tree[tindex+1]);\n\n\te=this.tree[tindex];\n\n\tif(e == 0){               // literal\n\t  this.lit = this.tree[tindex+2];\n\t  this.mode = IC_LIT;\n\t  break;\n\t}\n\tif((e & 16)!=0 ){          // length\n\t  this.get = e & 15;\n\t  this.len = this.tree[tindex+2];\n\t  this.mode = IC_LENEXT;\n\t  break;\n\t}\n\tif ((e & 64) == 0){        // next table\n\t  this.need = e;\n\t  this.tree_index = tindex/3 + this.tree[tindex+2];\n\t  break;\n\t}\n\tif ((e & 32)!=0){               // end of block\n\t  this.mode = IC_WASH;\n\t  break;\n\t}\n\tthis.mode = IC_BADCODE;        // invalid code\n\tz.msg = \"invalid literal/length code\";\n\tr = Z_DATA_ERROR;\n\n\ts.bitb=b;s.bitk=k;\n\tz.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\ts.write=q;\n\treturn s.inflate_flush(z,r);\n\n      case IC_LENEXT:        // i: getting length extra (have base)\n\tj = this.get;\n\n\twhile(k<(j)){\n\t  if(n!=0)r=Z_OK;\n\t  else{\n\n\t    s.bitb=b;s.bitk=k;\n\t    z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t    s.write=q;\n\t    return s.inflate_flush(z,r);\n\t  }\n\t  n--; b|=(z.next_in[p++]&0xff)<<k;\n\t  k+=8;\n\t}\n\n\tthis.len += (b & inflate_mask[j]);\n\n\tb>>=j;\n\tk-=j;\n\n\tthis.need = this.dbits;\n\tthis.tree = this.dtree;\n\tthis.tree_index = this.dtree_index;\n\tthis.mode = IC_DIST;\n      case IC_DIST:          // i: get distance next\n\tj = this.need;\n\n\twhile(k<(j)){\n\t  if(n!=0)r=Z_OK;\n\t  else{\n\n\t    s.bitb=b;s.bitk=k;\n\t    z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t    s.write=q;\n\t    return s.inflate_flush(z,r);\n\t  }\n\t  n--; b|=(z.next_in[p++]&0xff)<<k;\n\t  k+=8;\n\t}\n\n\ttindex=(this.tree_index+(b & inflate_mask[j]))*3;\n\n\tb>>=this.tree[tindex+1];\n\tk-=this.tree[tindex+1];\n\n\te = (this.tree[tindex]);\n\tif((e & 16)!=0){               // distance\n\t  this.get = e & 15;\n\t  this.dist = this.tree[tindex+2];\n\t  this.mode = IC_DISTEXT;\n\t  break;\n\t}\n\tif ((e & 64) == 0){        // next table\n\t  this.need = e;\n\t  this.tree_index = tindex/3 + this.tree[tindex+2];\n\t  break;\n\t}\n\tthis.mode = IC_BADCODE;        // invalid code\n\tz.msg = \"invalid distance code\";\n\tr = Z_DATA_ERROR;\n\n\ts.bitb=b;s.bitk=k;\n\tz.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\ts.write=q;\n\treturn s.inflate_flush(z,r);\n\n      case IC_DISTEXT:       // i: getting distance extra\n\tj = this.get;\n\n\twhile(k<(j)){\n\t  if(n!=0)r=Z_OK;\n\t  else{\n\n\t    s.bitb=b;s.bitk=k;\n\t    z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t    s.write=q;\n\t    return s.inflate_flush(z,r);\n\t  }\n\t  n--; b|=(z.next_in[p++]&0xff)<<k;\n\t  k+=8;\n\t}\n\n\tthis.dist += (b & inflate_mask[j]);\n\n\tb>>=j;\n\tk-=j;\n\n\tthis.mode = IC_COPY;\n      case IC_COPY:          // o: copying bytes in window, waiting for space\n        f = q - this.dist;\n        while(f < 0){     // modulo window size-\"while\" instead\n          f += s.end;     // of \"if\" handles invalid distances\n\t}\n\twhile (this.len!=0){\n\n\t  if(m==0){\n\t    if(q==s.end&&s.read!=0){q=0;m=q<s.read?s.read-q-1:s.end-q;}\n\t    if(m==0){\n\t      s.write=q; r=s.inflate_flush(z,r);\n\t      q=s.write;m=q<s.read?s.read-q-1:s.end-q;\n\n\t      if(q==s.end&&s.read!=0){q=0;m=q<s.read?s.read-q-1:s.end-q;}\n\n\t      if(m==0){\n\t\ts.bitb=b;s.bitk=k;\n\t\tz.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t\ts.write=q;\n\t\treturn s.inflate_flush(z,r);\n\t      }  \n\t    }\n\t  }\n\n\t  s.window[q++]=s.window[f++]; m--;\n\n\t  if (f == s.end)\n            f = 0;\n\t  this.len--;\n\t}\n\tthis.mode = IC_START;\n\tbreak;\n      case IC_LIT:           // o: got literal, waiting for output space\n\tif(m==0){\n\t  if(q==s.end&&s.read!=0){q=0;m=q<s.read?s.read-q-1:s.end-q;}\n\t  if(m==0){\n\t    s.write=q; r=s.inflate_flush(z,r);\n\t    q=s.write;m=q<s.read?s.read-q-1:s.end-q;\n\n\t    if(q==s.end&&s.read!=0){q=0;m=q<s.read?s.read-q-1:s.end-q;}\n\t    if(m==0){\n\t      s.bitb=b;s.bitk=k;\n\t      z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t      s.write=q;\n\t      return s.inflate_flush(z,r);\n\t    }\n\t  }\n\t}\n\tr=Z_OK;\n\n\ts.window[q++]=this.lit; m--;\n\n\tthis.mode = IC_START;\n\tbreak;\n      case IC_WASH:           // o: got eob, possibly more output\n\tif (k > 7){        // return unused byte, if any\n\t  k -= 8;\n\t  n++;\n\t  p--;             // can always return one\n\t}\n\n\ts.write=q; r=s.inflate_flush(z,r);\n\tq=s.write;m=q<s.read?s.read-q-1:s.end-q;\n\n\tif (s.read != s.write){\n\t  s.bitb=b;s.bitk=k;\n\t  z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t  s.write=q;\n\t  return s.inflate_flush(z,r);\n\t}\n\tthis.mode = IC_END;\n      case IC_END:\n\tr = Z_STREAM_END;\n\ts.bitb=b;s.bitk=k;\n\tz.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\ts.write=q;\n\treturn s.inflate_flush(z,r);\n\n      case IC_BADCODE:       // x: got error\n\n\tr = Z_DATA_ERROR;\n\n\ts.bitb=b;s.bitk=k;\n\tz.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\ts.write=q;\n\treturn s.inflate_flush(z,r);\n\n      default:\n\tr = Z_STREAM_ERROR;\n\n\ts.bitb=b;s.bitk=k;\n\tz.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\ts.write=q;\n\treturn s.inflate_flush(z,r);\n      }\n    }\n  }\n\nInfCodes.prototype.free = function(z){\n    //  ZFREE(z, c);\n}\n\n  // Called with number of bytes left to write in window at least 258\n  // (the maximum string length) and number of input bytes available\n  // at least ten.  The ten bytes are six bytes for the longest length/\n  // distance pair plus four bytes for overloading the bit buffer.\n\nInfCodes.prototype.inflate_fast = function(bl, bd, tl, tl_index, td, td_index, s, z) {\n    var t;                // temporary pointer\n    var   tp;             // temporary pointer (int[])\n    var tp_index;         // temporary pointer\n    var e;                // extra bits or operation\n    var b;                // bit buffer\n    var k;                // bits in bit buffer\n    var p;                // input data pointer\n    var n;                // bytes available there\n    var q;                // output window write pointer\n    var m;                // bytes to end of window or read pointer\n    var ml;               // mask for literal/length tree\n    var md;               // mask for distance tree\n    var c;                // bytes to copy\n    var d;                // distance back to copy from\n    var r;                // copy source pointer\n\n    var tp_index_t_3;     // (tp_index+t)*3\n\n    // load input, output, bit values\n    p=z.next_in_index;n=z.avail_in;b=s.bitb;k=s.bitk;\n    q=s.write;m=q<s.read?s.read-q-1:s.end-q;\n\n    // initialize masks\n    ml = inflate_mask[bl];\n    md = inflate_mask[bd];\n\n    // do until not enough input or output space for fast loop\n    do {                          // assume called with m >= 258 && n >= 10\n      // get literal/length code\n      while(k<(20)){              // max bits for literal/length code\n\tn--;\n\tb|=(z.next_in[p++]&0xff)<<k;k+=8;\n      }\n\n      t= b&ml;\n      tp=tl; \n      tp_index=tl_index;\n      tp_index_t_3=(tp_index+t)*3;\n      if ((e = tp[tp_index_t_3]) == 0){\n\tb>>=(tp[tp_index_t_3+1]); k-=(tp[tp_index_t_3+1]);\n\n\ts.window[q++] = tp[tp_index_t_3+2];\n\tm--;\n\tcontinue;\n      }\n      do {\n\n\tb>>=(tp[tp_index_t_3+1]); k-=(tp[tp_index_t_3+1]);\n\n\tif((e&16)!=0){\n\t  e &= 15;\n\t  c = tp[tp_index_t_3+2] + (b & inflate_mask[e]);\n\n\t  b>>=e; k-=e;\n\n\t  // decode distance base of block to copy\n\t  while(k<(15)){           // max bits for distance code\n\t    n--;\n\t    b|=(z.next_in[p++]&0xff)<<k;k+=8;\n\t  }\n\n\t  t= b&md;\n\t  tp=td;\n\t  tp_index=td_index;\n          tp_index_t_3=(tp_index+t)*3;\n\t  e = tp[tp_index_t_3];\n\n\t  do {\n\n\t    b>>=(tp[tp_index_t_3+1]); k-=(tp[tp_index_t_3+1]);\n\n\t    if((e&16)!=0){\n\t      // get extra bits to add to distance base\n\t      e &= 15;\n\t      while(k<(e)){         // get extra bits (up to 13)\n\t\tn--;\n\t\tb|=(z.next_in[p++]&0xff)<<k;k+=8;\n\t      }\n\n\t      d = tp[tp_index_t_3+2] + (b&inflate_mask[e]);\n\n\t      b>>=(e); k-=(e);\n\n\t      // do the copy\n\t      m -= c;\n\t      if (q >= d){                // offset before dest\n\t\t//  just copy\n\t\tr=q-d;\n\t\tif(q-r>0 && 2>(q-r)){           \n\t\t  s.window[q++]=s.window[r++]; // minimum count is three,\n\t\t  s.window[q++]=s.window[r++]; // so unroll loop a little\n\t\t  c-=2;\n\t\t}\n\t\telse{\n\t\t  s.window[q++]=s.window[r++]; // minimum count is three,\n\t\t  s.window[q++]=s.window[r++]; // so unroll loop a little\n\t\t  c-=2;\n\t\t}\n\t      }\n\t      else{                  // else offset after destination\n                r=q-d;\n                do{\n                  r+=s.end;          // force pointer in window\n                }while(r<0);         // covers invalid distances\n\t\te=s.end-r;\n\t\tif(c>e){             // if source crosses,\n\t\t  c-=e;              // wrapped copy\n\t\t  if(q-r>0 && e>(q-r)){           \n\t\t    do{s.window[q++] = s.window[r++];}\n\t\t    while(--e!=0);\n\t\t  }\n\t\t  else{\n\t\t    arrayCopy(s.window, r, s.window, q, e);\n\t\t    q+=e; r+=e; e=0;\n\t\t  }\n\t\t  r = 0;                  // copy rest from start of window\n\t\t}\n\n\t      }\n\n\t      // copy all or what's left\n              do{s.window[q++] = s.window[r++];}\n\t\twhile(--c!=0);\n\t      break;\n\t    }\n\t    else if((e&64)==0){\n\t      t+=tp[tp_index_t_3+2];\n\t      t+=(b&inflate_mask[e]);\n\t      tp_index_t_3=(tp_index+t)*3;\n\t      e=tp[tp_index_t_3];\n\t    }\n\t    else{\n\t      z.msg = \"invalid distance code\";\n\n\t      c=z.avail_in-n;c=(k>>3)<c?k>>3:c;n+=c;p-=c;k-=c<<3;\n\n\t      s.bitb=b;s.bitk=k;\n\t      z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t      s.write=q;\n\n\t      return Z_DATA_ERROR;\n\t    }\n\t  }\n\t  while(true);\n\t  break;\n\t}\n\n\tif((e&64)==0){\n\t  t+=tp[tp_index_t_3+2];\n\t  t+=(b&inflate_mask[e]);\n\t  tp_index_t_3=(tp_index+t)*3;\n\t  if((e=tp[tp_index_t_3])==0){\n\n\t    b>>=(tp[tp_index_t_3+1]); k-=(tp[tp_index_t_3+1]);\n\n\t    s.window[q++]=tp[tp_index_t_3+2];\n\t    m--;\n\t    break;\n\t  }\n\t}\n\telse if((e&32)!=0){\n\n\t  c=z.avail_in-n;c=(k>>3)<c?k>>3:c;n+=c;p-=c;k-=c<<3;\n \n\t  s.bitb=b;s.bitk=k;\n\t  z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t  s.write=q;\n\n\t  return Z_STREAM_END;\n\t}\n\telse{\n\t  z.msg=\"invalid literal/length code\";\n\n\t  c=z.avail_in-n;c=(k>>3)<c?k>>3:c;n+=c;p-=c;k-=c<<3;\n\n\t  s.bitb=b;s.bitk=k;\n\t  z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t  s.write=q;\n\n\t  return Z_DATA_ERROR;\n\t}\n      } \n      while(true);\n    } \n    while(m>=258 && n>= 10);\n\n    // not enough input or output--restore pointers and return\n    c=z.avail_in-n;c=(k>>3)<c?k>>3:c;n+=c;p-=c;k-=c<<3;\n\n    s.bitb=b;s.bitk=k;\n    z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n    s.write=q;\n\n    return Z_OK;\n}\n\n//\n// InfTree.java\n//\n\nfunction InfTree() {\n}\n\nInfTree.prototype.huft_build = function(b, bindex, n, s, d, e, t, m, hp, hn, v) {\n\n    // Given a list of code lengths and a maximum table size, make a set of\n    // tables to decode that set of codes.  Return Z_OK on success, Z_BUF_ERROR\n    // if the given code set is incomplete (the tables are still built in this\n    // case), Z_DATA_ERROR if the input is invalid (an over-subscribed set of\n    // lengths), or Z_MEM_ERROR if not enough memory.\n\n    var a;                       // counter for codes of length k\n    var f;                       // i repeats in table every f entries\n    var g;                       // maximum code length\n    var h;                       // table level\n    var i;                       // counter, current code\n    var j;                       // counter\n    var k;                       // number of bits in current code\n    var l;                       // bits per table (returned in m)\n    var mask;                    // (1 << w) - 1, to avoid cc -O bug on HP\n    var p;                       // pointer into c[], b[], or v[]\n    var q;                       // points to current table\n    var w;                       // bits before this table == (l * h)\n    var xp;                      // pointer into x\n    var y;                       // number of dummy codes added\n    var z;                       // number of entries in current table\n\n    // Generate counts for each bit length\n\n    p = 0; i = n;\n    do {\n      this.c[b[bindex+p]]++; p++; i--;   // assume all entries <= BMAX\n    }while(i!=0);\n\n    if(this.c[0] == n){                // null input--all zero length codes\n      t[0] = -1;\n      m[0] = 0;\n      return Z_OK;\n    }\n\n    // Find minimum and maximum length, bound *m by those\n    l = m[0];\n    for (j = 1; j <= BMAX; j++)\n      if(this.c[j]!=0) break;\n    k = j;                        // minimum code length\n    if(l < j){\n      l = j;\n    }\n    for (i = BMAX; i!=0; i--){\n      if(this.c[i]!=0) break;\n    }\n    g = i;                        // maximum code length\n    if(l > i){\n      l = i;\n    }\n    m[0] = l;\n\n    // Adjust last length count to fill out codes, if needed\n    for (y = 1 << j; j < i; j++, y <<= 1){\n      if ((y -= this.c[j]) < 0){\n        return Z_DATA_ERROR;\n      }\n    }\n    if ((y -= this.c[i]) < 0){\n      return Z_DATA_ERROR;\n    }\n    this.c[i] += y;\n\n    // Generate starting offsets into the value table for each length\n    this.x[1] = j = 0;\n    p = 1;  xp = 2;\n    while (--i!=0) {                 // note that i == g from above\n      this.x[xp] = (j += this.c[p]);\n      xp++;\n      p++;\n    }\n\n    // Make a table of values in order of bit lengths\n    i = 0; p = 0;\n    do {\n      if ((j = b[bindex+p]) != 0){\n        this.v[this.x[j]++] = i;\n      }\n      p++;\n    }\n    while (++i < n);\n    n = this.x[g];                     // set n to length of v\n\n    // Generate the Huffman codes and for each, make the table entries\n    this.x[0] = i = 0;                 // first Huffman code is zero\n    p = 0;                        // grab values in bit order\n    h = -1;                       // no tables yet--level -1\n    w = -l;                       // bits decoded == (l * h)\n    this.u[0] = 0;                     // just to keep compilers happy\n    q = 0;                        // ditto\n    z = 0;                        // ditto\n\n    // go through the bit lengths (k already is bits in shortest code)\n    for (; k <= g; k++){\n      a = this.c[k];\n      while (a--!=0){\n\t// here i is the Huffman code of length k bits for value *p\n\t// make tables up to required level\n        while (k > w + l){\n          h++;\n          w += l;                 // previous table always l bits\n\t  // compute minimum size table less than or equal to l bits\n          z = g - w;\n          z = (z > l) ? l : z;        // table size upper limit\n          if((f=1<<(j=k-w))>a+1){     // try a k-w bit table\n                                      // too few codes for k-w bit table\n            f -= a + 1;               // deduct codes from patterns left\n            xp = k;\n            if(j < z){\n              while (++j < z){        // try smaller tables up to z bits\n                if((f <<= 1) <= this.c[++xp])\n                  break;              // enough codes to use up j bits\n                f -= this.c[xp];           // else deduct codes from patterns\n              }\n\t    }\n          }\n          z = 1 << j;                 // table entries for j-bit table\n\n\t  // allocate new table\n          if (this.hn[0] + z > MANY){       // (note: doesn't matter for fixed)\n            return Z_DATA_ERROR;       // overflow of MANY\n          }\n          this.u[h] = q = /*hp+*/ this.hn[0];   // DEBUG\n          this.hn[0] += z;\n \n\t  // connect to last table, if there is one\n\t  if(h!=0){\n            this.x[h]=i;           // save pattern for backing up\n            this.r[0]=j;     // bits in this table\n            this.r[1]=l;     // bits to dump before this table\n            j=i>>>(w - l);\n            this.r[2] = (q - this.u[h-1] - j);               // offset to this table\n            arrayCopy(this.r, 0, hp, (this.u[h-1]+j)*3, 3); // connect to last table\n          }\n          else{\n            t[0] = q;               // first table is returned result\n\t  }\n        }\n\n\t// set up table entry in r\n        this.r[1] = (k - w);\n        if (p >= n){\n          this.r[0] = 128 + 64;      // out of values--invalid code\n\t}\n        else if (v[p] < s){\n          this.r[0] = (this.v[p] < 256 ? 0 : 32 + 64);  // 256 is end-of-block\n          this.r[2] = this.v[p++];          // simple code is just the value\n        }\n        else{\n          this.r[0]=(e[this.v[p]-s]+16+64); // non-simple--look up in lists\n          this.r[2]=d[this.v[p++] - s];\n        }\n\n        // fill code-like entries with r\n        f=1<<(k-w);\n        for (j=i>>>w;j<z;j+=f){\n          arrayCopy(this.r, 0, hp, (q+j)*3, 3);\n\t}\n\n\t// backwards increment the k-bit code i\n        for (j = 1 << (k - 1); (i & j)!=0; j >>>= 1){\n          i ^= j;\n\t}\n        i ^= j;\n\n\t// backup over finished tables\n        mask = (1 << w) - 1;      // needed on HP, cc -O bug\n        while ((i & mask) != this.x[h]){\n          h--;                    // don't need to update q\n          w -= l;\n          mask = (1 << w) - 1;\n        }\n      }\n    }\n    // Return Z_BUF_ERROR if we were given an incomplete table\n    return y != 0 && g != 1 ? Z_BUF_ERROR : Z_OK;\n}\n\nInfTree.prototype.inflate_trees_bits = function(c, bb, tb, hp, z) {\n    var result;\n    this.initWorkArea(19);\n    this.hn[0]=0;\n    result = this.huft_build(c, 0, 19, 19, null, null, tb, bb, hp, this.hn, this.v);\n\n    if(result == Z_DATA_ERROR){\n      z.msg = \"oversubscribed dynamic bit lengths tree\";\n    }\n    else if(result == Z_BUF_ERROR || bb[0] == 0){\n      z.msg = \"incomplete dynamic bit lengths tree\";\n      result = Z_DATA_ERROR;\n    }\n    return result;\n}\n\nInfTree.prototype.inflate_trees_dynamic = function(nl, nd, c, bl, bd, tl, td, hp, z) {\n    var result;\n\n    // build literal/length tree\n    this.initWorkArea(288);\n    this.hn[0]=0;\n    result = this.huft_build(c, 0, nl, 257, cplens, cplext, tl, bl, hp, this.hn, this.v);\n    if (result != Z_OK || bl[0] == 0){\n      if(result == Z_DATA_ERROR){\n        z.msg = \"oversubscribed literal/length tree\";\n      }\n      else if (result != Z_MEM_ERROR){\n        z.msg = \"incomplete literal/length tree\";\n        result = Z_DATA_ERROR;\n      }\n      return result;\n    }\n\n    // build distance tree\n    this.initWorkArea(288);\n    result = this.huft_build(c, nl, nd, 0, cpdist, cpdext, td, bd, hp, this.hn, this.v);\n\n    if (result != Z_OK || (bd[0] == 0 && nl > 257)){\n      if (result == Z_DATA_ERROR){\n        z.msg = \"oversubscribed distance tree\";\n      }\n      else if (result == Z_BUF_ERROR) {\n        z.msg = \"incomplete distance tree\";\n        result = Z_DATA_ERROR;\n      }\n      else if (result != Z_MEM_ERROR){\n        z.msg = \"empty distance tree with lengths\";\n        result = Z_DATA_ERROR;\n      }\n      return result;\n    }\n\n    return Z_OK;\n}\n/*\n  static int inflate_trees_fixed(int[] bl,  //literal desired/actual bit depth\n                                 int[] bd,  //distance desired/actual bit depth\n                                 int[][] tl,//literal/length tree result\n                                 int[][] td,//distance tree result \n                                 ZStream z  //for memory allocation\n\t\t\t\t ){\n\n*/\n\nfunction inflate_trees_fixed(bl, bd, tl, td, z) {\n    bl[0]=fixed_bl;\n    bd[0]=fixed_bd;\n    tl[0]=fixed_tl;\n    td[0]=fixed_td;\n    return Z_OK;\n}\n\nInfTree.prototype.initWorkArea = function(vsize){\n    if(this.hn==null){\n        this.hn=new Int32Array(1);\n        this.v=new Int32Array(vsize);\n        this.c=new Int32Array(BMAX+1);\n        this.r=new Int32Array(3);\n        this.u=new Int32Array(BMAX);\n        this.x=new Int32Array(BMAX+1);\n    }\n    if(this.v.length<vsize){ \n        this.v=new Int32Array(vsize); \n    }\n    for(var i=0; i<vsize; i++){this.v[i]=0;}\n    for(var i=0; i<BMAX+1; i++){this.c[i]=0;}\n    for(var i=0; i<3; i++){this.r[i]=0;}\n//  for(int i=0; i<BMAX; i++){u[i]=0;}\n    arrayCopy(this.c, 0, this.u, 0, BMAX);\n//  for(int i=0; i<BMAX+1; i++){x[i]=0;}\n    arrayCopy(this.c, 0, this.x, 0, BMAX+1);\n}\n\nvar testArray = new Uint8Array(1);\nvar hasSubarray = (typeof testArray.subarray === 'function');\nvar hasSlice = false; /* (typeof testArray.slice === 'function'); */ // Chrome slice performance is so dire that we're currently not using it...\n\nfunction arrayCopy(src, srcOffset, dest, destOffset, count) {\n    if (count == 0) {\n        return;\n    } \n    if (!src) {\n        throw \"Undef src\";\n    } else if (!dest) {\n        throw \"Undef dest\";\n    }\n\n    if (srcOffset == 0 && count == src.length) {\n        arrayCopy_fast(src, dest, destOffset);\n    } else if (hasSubarray) {\n        arrayCopy_fast(src.subarray(srcOffset, srcOffset + count), dest, destOffset); \n    } else if (src.BYTES_PER_ELEMENT == 1 && count > 100) {\n        arrayCopy_fast(new Uint8Array(src.buffer, src.byteOffset + srcOffset, count), dest, destOffset);\n    } else { \n        arrayCopy_slow(src, srcOffset, dest, destOffset, count);\n    }\n\n}\n\nfunction arrayCopy_slow(src, srcOffset, dest, destOffset, count) {\n\n    // dlog('_slow call: srcOffset=' + srcOffset + '; destOffset=' + destOffset + '; count=' + count);\n\n     for (var i = 0; i < count; ++i) {\n        dest[destOffset + i] = src[srcOffset + i];\n    }\n}\n\nfunction arrayCopy_fast(src, dest, destOffset) {\n    dest.set(src, destOffset);\n}\n\n\n  // largest prime smaller than 65536\nvar ADLER_BASE=65521; \n  // NMAX is the largest n such that 255n(n+1)/2 + (n+1)(BASE-1) <= 2^32-1\nvar ADLER_NMAX=5552;\n\nfunction adler32(adler, /* byte[] */ buf,  index, len){\n    if(buf == null){ return 1; }\n\n    var s1=adler&0xffff;\n    var s2=(adler>>16)&0xffff;\n    var k;\n\n    while(len > 0) {\n      k=len<ADLER_NMAX?len:ADLER_NMAX;\n      len-=k;\n      while(k>=16){\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        k-=16;\n      }\n      if(k!=0){\n        do{\n          s1+=buf[index++]&0xff; s2+=s1;\n        }\n        while(--k!=0);\n      }\n      s1%=ADLER_BASE;\n      s2%=ADLER_BASE;\n    }\n    return (s2<<16)|s1;\n}\n\n\n\nfunction jszlib_inflate_buffer(buffer, start, length, afterUncOffset) {\n    if (!start) {\n        buffer = new Uint8Array(buffer);\n    } else if (!length) {\n        buffer = new Uint8Array(buffer, start, buffer.byteLength - start);\n    } else {\n        buffer = new Uint8Array(buffer, start, length);\n    }\n\n    var z = new ZStream();\n    z.inflateInit(DEF_WBITS, true);\n    z.next_in = buffer;\n    z.next_in_index = 0;\n    z.avail_in = buffer.length;\n\n    var oBlockList = [];\n    var totalSize = 0;\n    while (true) {\n        var obuf = new Uint8Array(32000);\n        z.next_out = obuf;\n        z.next_out_index = 0;\n        z.avail_out = obuf.length;\n        var status = z.inflate(Z_NO_FLUSH);\n        if (status != Z_OK && status != Z_STREAM_END && status != Z_BUF_ERROR) {\n            throw z.msg;\n        }\n        if (z.avail_out != 0) {\n            var newob = new Uint8Array(obuf.length - z.avail_out);\n            arrayCopy(obuf, 0, newob, 0, (obuf.length - z.avail_out));\n            obuf = newob;\n        }\n        oBlockList.push(obuf);\n        totalSize += obuf.length;\n        if (status == Z_STREAM_END || status == Z_BUF_ERROR) {\n            break;\n        }\n    }\n\n    if (afterUncOffset) {\n        afterUncOffset[0] = (start || 0) + z.next_in_index;\n    }\n\n    if (oBlockList.length == 1) {\n        return oBlockList[0].buffer;\n    } else {\n        var out = new Uint8Array(totalSize);\n        var cursor = 0;\n        for (var i = 0; i < oBlockList.length; ++i) {\n            var b = oBlockList[i];\n            arrayCopy(b, 0, out, cursor, b.length);\n            cursor += b.length;\n        }\n        return out.buffer;\n    }\n}\n\nif (typeof(module) !== 'undefined') {\n  module.exports = {\n    inflateBuffer: jszlib_inflate_buffer,\n    arrayCopy: arrayCopy\n  };\n}\n"]}